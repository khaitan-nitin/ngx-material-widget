{"version":3,"sources":["../../../projects/ngx-material-widget/src/lib/utility/badge.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/collection.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/button.utility.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-material-widget/src/lib/utility/dependent.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/master-data.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/string.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/field.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/object.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/form.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/form-custom.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/list.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/property.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/security.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/dropdown.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/crud.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/keymap.utility.ts","../../../projects/ngx-material-widget/src/lib/utility/ability.utility.ts","../../../projects/ngx-material-widget/src/lib/button/component/button-delete-confirmation/button-delete-confirmation.component.ts","../../../projects/ngx-material-widget/src/lib/button/component/button/button.component.ts","../../../projects/ngx-material-widget/src/lib/button/component/button-group/button-group.component.ts","../../../projects/ngx-material-widget/src/lib/crud/component/crud-form/crud-form.component.ts","../../../projects/ngx-material-widget/src/lib/crud/component/crud-list/crud-list.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/file-uploader/file-uploader.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/field/html.editor.configuration.ts","../../../projects/ngx-material-widget/src/lib/field/component/field/field.component.ts","../../../projects/ngx-material-widget/src/lib/list/component/list.component.ts","../../../projects/ngx-material-widget/src/lib/list/component/static-list/static-list.component.ts","../../../projects/ngx-material-widget/src/lib/list/component/dynamic-list/dynamic-list.component.ts","../../../projects/ngx-material-widget/src/lib/modal/component/modal/modal.component.ts","../../../projects/ngx-material-widget/src/lib/page/component/admin-layout/admin-layout.component.ts","../../../projects/ngx-material-widget/src/lib/crud/component/crud-header/crud-header.component.ts","../../../projects/ngx-material-widget/src/lib/form/component/form-header/form-header.component.ts","../../../projects/ngx-material-widget/src/lib/form/component/form/form.component.ts","../../../projects/ngx-material-widget/src/lib/crud/interface/crud-list/crud-list-interface.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/chips/chips.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/toolbar/toolbar.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/multi-image/multi-image.component.ts","../../../projects/ngx-material-widget/src/lib/field/component/paragraph/paragraph.component.ts","../../../projects/ngx-material-widget/src/lib/field/pipes/highlightPipe.ts","../../../projects/ngx-material-widget/src/lib/field/component/tooltip/tooltip.component.ts","../../../projects/ngx-material-widget/src/lib/list/directives/ngInit.directive.ts","../../../projects/ngx-material-widget/src/lib/list/pipes/safeHtml.pipe.ts","../../../projects/ngx-material-widget/src/lib/list/directives/compile.directive.ts","../../../projects/ngx-material-widget/src/lib/navigation/component/navigation/navigation.component.ts","../../../projects/ngx-material-widget/src/lib/ngx-material-widget.module.ts","../../../projects/ngx-material-widget/src/lib/modal/utility/modal.util.ts"],"names":["CollectionUtils","isEmpty","value","undefined","length","ButtonUtils","instanceOfButton","object","instanceOfChipButton","instanceOfButtonGroup","instanceOfHoverButton","instanceOfAnyButtonType","isButton","this","hasWidth","buttons","hasButtonWidth","filter","button","width","setEqualWidth","buttonWidth_1","forEach","getAction","sourceIdentifier","sourceIndex","widgetArrayIndex","identifier","parentHierarchy","event","originalData","context","actionDialog","data","Object","assign","action","actionData","isDisable","displayMode","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__assign","t","s","i","n","arguments","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","pop","push","__createBinding","o","m","k","k2","enumerable","get","__exportStar","__values","__read","ar","error","__spread","concat","__spreadArrays","il","a","j","jl","__spreadArray","to","from","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__esModule","__importDefault","default","__classPrivateFieldGet","receiver","privateMap","has","__classPrivateFieldSet","set","DependentUtils","displayDependencyField","dependentOnFields","supportingRecord","record","displaySupportingDependencyField","dependentField","dependencyValue","eval","condition","hasMatch_1","dependentOnFields_1","dependentOnFields_1_1","hasMatch_2","dependentOnFields_2","dependentOnFields_2_1","getDependencyTree","formFields","dependency","formFields_1","formFields_1_1","formField","field","_c","e_4","_d","getDependencyTreeForButton","buttonLayout","_f","_g","_h","e_6","_j","cells","_k","_l","cell","_m","e_8","_o","_p","e_9","_q","MasterDataUtils","getMasterDataFromLocalStore","JSON","parse","localStorage","getItem","getMasterDataAsOptions","masterDataKey","masterData","options","items","StringUtils","FieldUtils","isFormDisable","isFieldDisabled","currentDisplayMode","isDisabled","type","isReadOnly","isUnique","displayEllipsis","charLimit","showEllipsis","strValue","stringify","readOnlyField","isEllipsisField","hasEllipsis","ellipsis","setOptionsUsingKey","setOptionsUsingValues","keyMap","ObjectUtils","obj","keys","text","replace","unflatten","_json","jsonToObj","reduce","acc","current","index","inlineKeys","split","firstProp","parsedKey","parseInt","isNextKeyNumber","isNaN","_nextData","_index","isValueInArray","currentValueObj","join","FormUtils","disableField","form","disable","disableFieldControl","fieldControl","checkUniqueIdentifier","forms","getRawValue","formValue","initFormGroup","fieldControls","initFieldGroup","FormGroup","getFieldValidation","validations","_b","val","addMore","fieldValue","getValueViaEval","FormArray","vCnt","opts","getCheckboxOption","setFormGroup","option","dateRange","controls","FormControl","fieldContexts","values","getFormFieldValue","setFormControl","getParagraphFields","dateRangeValidation","mismatch","opt","checked","optionSelected","fieldValues","Map","fieldContextKey","formGroup","formControl","enable","elements","isArray","cnt","getFieldValue","recordValue","reset","formConfig","fieldKey","relaodAll","isMatchingDependendKeyMap","optionDependsOn","optionDependsOnValue","changeButtonLabelIcon","buttonIdentifier","icon","FormCustomUtils","setCustomLayout","layout","_this","control","resolvedControl","getControl","console","log","cellControl","getButtonControl","getFieldControl","controlKey","ListUtils","addColoumn","hideColoumn","list","columns","column","fields","getColumnKey","getColumnLabel","getColumnSelectorField","listConfig","disabled","selected","show","appearance","fieldDisplayType","placeholder","multiselect","getMobileConfig","mobile","setCustomLayouts","hasRowHover","row","hover","template","hasCustomCellLayout","hasCustomRowLayout","hasHoverConfig","colIndex","cControlIndex","actions","getColumnControl","cControlIndex_1","PropertyUtils","getPropertyFromLocalStore","SecurityUtils","encrypt","CryptoJS.AES","toString","Error","decrypt","bytes","CryptoJS.enc","Utf8","DropdownUtils","getValue","CrudUtils","crud","tabs","tab","widgets","widget","widgetType","lists","search","setDisplayType","crudTabs","formDisplayMode","KeyMapUtils","keyMaps","associations","optionType","optionComponent","generateKeyMap","setOptionssUsingValues","optionsDD","association","valueAsKey","AbilityUtils","setAbility","ability","user","rules","update","ButtonDeleteConfirmationComponent","dialogRef","ngOnInit","title","confirmationConfig","message","displayOnlyIcon","displayIcon","click","close","Component","args","selector","MatDialogRef","Inject","MAT_DIALOG_DATA","Ability","ButtonComponent","dialog","router","route","onClick","EventEmitter","onIconClick","routerLink","displayButton","isButtonDisabled","isDisplayOnlyIcon","hasIconDisplay","isFlatButton","isGhostButton","isRaisedButton","isStrokedButton","isFabButton","isChip","isLink","isGroupButton","isMenuButton","buttonWithoutPadding","state","_button","document","documentElement","style","setProperty","iconPosition","setLabel","setButtonEnable","formSubscription","valueChanges","subscribe","setButtonDisplay","setOnlyIconDisplay","setIconDisplay","setLink","setGroupButton","setFlatButton","setGhostButton","setRaisedButton","setStrokedButton","setFabButton","setChip","setButtonWithoutPadding","setMenuButton","displayInFormModes","confirmationConfiguration","invokeAction","openDialog","open","buttonRoute","afterClosed","navigate","skipLocationChange","replaceUrl","addSearchParamsInUrl","emit","iconClick","filterData","queryParams","relativeTo","queryParamsHandling","valid","alwaysEnable","onlyIcon","groupIdentifier","ngOnDestroy","unsubscribe","MatDialog","Router","ActivatedRoute","Input","Output","ButtonGroupComponent","buttonLists","buttonListsType","displayDesktopDD","displayTabletDD","displayMobileDD","hoverButtonLists","_buttons","btns","getButtonList","getButtonType","hasMobileButton","changeButtonTypeToGhost","displayIn","hasButtonsForDropdown","buttonArray","buttonArrayIndex","getGroupButton","hoverButton","getHoverButtons","hoverButtons","isGroupAdded","groupAdded","buttonList","bgAdded","gButtons","map","gButton","fullWidth","buttonWidth","groupButtons","groupLabel","groupIcon","badge","buttonType","isButtonGroup","isChipGroup","isButtonHover","isButtonArray","encapsulation","ViewEncapsulation","None","CrudFormComponent","onFormChange","onFieldChange","onButtonClick","onSortClick","onPageClick","formsConfigToDisplay","rowsInTab","formTabLength","filteredTabs","drawTabs","setConfigAsPerTab","setFormTitle","addWidget","addWidgetButton","setFormHeader","header","searchModeTitle","addModeTitle","editModeTitle","viewModeTitle","tabIdentifier","configData","badges","pageBackRoute","configPerTabs","tabIndex_1","tabConfigData","tabKey","getTabIdentifier","tabTitle","widgetIdentifiers","actionPages","actionPage","onAction","associatedWidgetIdentifiers","tIndex","permission","can","tabRows","drawTab","tabIndex","rows","rIndex","this_1","includes","colCount_1","colSpan","e_3","displayWidget","color","size","fieldChange","formChange","buttonClick","onTabChange","textLabel","onAccordianChange","onSort","onPage","CrudListComponent","_bottomSheet","_expanded","onButtonIconClick","onTabClick","showSearchForm","listHeaders","searchOnFieldsCount","searchOnFieldsButtons","_configData","searchButton","setSearchButton","searchModalButton","displaySearchForm","setListHeaders","setCrudHeader","searchConfig","displayType","displayInColumns","records","searchData","filterButton","setSelectedFilterButton","listType","sidenav","buttonIconClick","openBottomSheet","BottomSearchSheet","formReset","buttonSubscriber","instance","fieldSubscriber","formSubscriber","dialogRefSubscriber","afterDismissed","bottomUnsubscribe","MatBottomSheet","ViewChild","_bottomSheetRef","openLink","dismiss","preventDefault","MatBottomSheetRef","MAT_BOTTOM_SHEET_DATA","FileUploaderComponent","_http","param","fileList","multiple","fileType","fileIcon","hideDownloadButton","hideDeleteFileButton","hideUploadButton","hideFileIconButton","hideDeleteAllButton","hideActionStrip","isUploaded","isUploadingInProgress","isFileImageType","setFileTypeAndIcon","getImageFileType","onUploadClick","fileInput","nativeElement","onchange","files","file","name","onDeleteAllClick","isFunctionDefined","onDeleteFileClick","delFile","onShowAllItems","showLess","func","subFileType","x","toLowerCase","defaultUploadBtnText","uploadButtonText","setFieldDisabled","setHideDeleteAllButton","setHideActionStrip","HttpClient","static","quillConfiguration","formula","toolbar","font","align","indent","background","script","FieldErrorStateMatcher","isErrorState","invalid","dirty","touched","FieldComponent","onDependentFieldChange","ellipsisRequired","editorOptions","onListSelectionFuc","listOptions","minLengthForTrigger","highlightAutoCompleteText","onShowAllOptions","autoCompleteInputHasValue","onListImageLoadError","$event","src","defaultImageUrl","_displayMode","fieldDisabled","isEditorErrorState","matcher","isRequired","required","hasFieldNavigate","fieldNavigate","hasHintIcon","displayHintIcon","setMaxLength","setNumberMinMax","setAppearance","setOptionInDisplay","getImagePath","setRows","setHeight","setClear","setAsBubble","setTextAlign","setAddMoreDisplayInColumn","setMinLengthForTrigger","setDisplayTemplate","setCalendar","setShowLess","textClearButton","setTextClearButton","routeToButton","routeTo","helpModalButton","setHelpButton","plusButton","addRemoveButton","minusButton","displayTemplate","isAddMore","device","addMoreFieldDisplayInColumns","addMoreButtonDisplayInColumns","height","asBubble","bubbleColor","textAlign","maxLength","min","max","help","resolvedValue","txt","initialLength","finalLength","objs","hasAssociation","element","componentIdentifier","substr","displayFullText","resolvedValueStr","displayShortText","invokeOnChangeOnField","input","invokeOnChange","autocompleteDisplayFn","_filter","filterValue","autoCompleteResultCount","hasClear","cleanValue","setValue","getResolveTextWithKey","getDropdownValue","isSelected","imagePath","onAutocompleteChange","autocomplate","onChangeEvent","onToggleChange","toggle","onSliderChange","slider","onRadioChange","radio","onCheckboxChange","checkbox","onOptionChange","listView","selectedOptions","source","_value","currentOptions","onHtmlEditorChange","html","onChipsListChange","onInputChange","onDateChange","date","onChange","dropdown","onFileChange","reader","FileReader","readAsDataURL","onload","_event","imgURL","onParagraphChange","setTimeout","dependencies","fieldIndex","errors","keyError","validation","addField","removeField","splice","onFileComplete","ListComponent","breakpointObserver","onPageChange","onSortChange","dataSource","MatTableDataSource","cellCount","isCustomTemplate","displayVertical","formIndex","inlineEditButtons","hasDisplayActions","isInlineEditable","inlineButtonSize","childRows","displayModes","columnNames","columnConfigs","selection","SelectionModel","hideCard","hideHeader","hideFooter","pageSizeOptions","rowCount","limit","rowColors","cellColors","showCard","selectableAdded","sortDirection","tooltipPosition","top","left","_listConfig","setColumnNames","setDetailColumnCount","setCardVisibility","_record","parent","init","showRowEditable","_listReset","resetInlineEditButton","pagination","paginator","sort","getLayout","setPageSize","total","pageNo","populateAllChilds","initCommonFormGroup","setColors","setIconPosition","setFilterBar","setCustomTemplate","_a","isMobile","rowHeight","sticky","header1","querySelectorAll","getElementById","offsetTop","window","pageYOffset","classList","add","el","remove","onScrolled","staticList","hasOnPageFilter","hasColumnSelection","contentFilterColumnSpan","columnSelectionColumnSpan","pageSize","position","getFilterField","filterField","columnSelectorField","updateColumnDisplay","_e","inlinEditButton","cIndex","e_2","setRowEditablity","inlineButtonTemp","getChildRows","child","recordIdentifier","childData","cFieldIndex","updateFilter","trim","firstPage","getCurrentRecord","e_5","uniqueKeys","commonFieldControls","commonListForm","getObjectTree","currentRow","values_1","objectTree","hierarchyUp","isAllSelected","masterToggle","clear","select","checkboxLabel","description","totalDispalyableWidth","selectable","unshift","hasDisplayableField","actionWidth","childColumnCount","bgColor","textColor","rowColor","rowBgColor","rowTextColor","cellColor","selectableButton","selectButton","stopPropagation","breakpointSubscription","observe","Breakpoints","XSmall","Small","Medium","Large","XLarge","breakpoints","isTablet","isDesktop","resetVerticalDisplay","rowClick","rowIndex","actionButton","rowAction","actionObj","getButton","onHover","hoverRowData","hoverRowIndex","animations","trigger","minHeight","transition","animate","BreakpointObserver","MatPaginator","MatSort","StaticListComponent","_super","onscroll","isList","sorton","sortdir","expandedRow","pageInfo","DynamicListComponent","ModalComponent","AdminLayoutComponent","CrudHeaderComponent","badgeButtons","_pageBackRoute","addBackButton","transformBadgeButtons","content","badgeColorToButtonColor","buttonColor","backButton","backAlreadyAdded","FormHeaderComponent","formInitialized","_formDisplayMode","getFormHeader","saperateFormActions","formHeaderConfig","subtitle","formActions","formAction","FormComponent","showButtons","formLayouts","_formConfig","_supportingRecord","_reset","getActions","getCustomLayout","showCustomLayout","formButton","formButtonLayout","dependentFieldChange","newRecord","fieldDefaultSetting","setTitle","resetDisplayInColumn","getFormValue","transformRows","sectionLabel","separator","sectionIcon","sectionExpandable","expandable","rLength","formFieldRowColumnCount","colCount","cCnt","toggleList","formLayout","allowed","resetButtonDisplay","getNewDisplayInColumn","displayInColumn","displayInColumnMap","mobileMap","tabletMap","CrudListComponentInterface","setCommonConfig","setListConfig","setBadges","setCommonConfigUsingCrud","listReset","setListConfigUsingCrud","quickLinks","setConfigListData","loadFilterParams","filterStr","configListData","configListDataNew","getRowKey","lIndex","getChildRowKey","getChildRecordIdentifier","beforeChangeMerge","isMatchingRow","keys_1","e_1","keys_1_1","addRow","afterChangeMerge","beforeChildChangeMerge","keys_2","keys_2_1","childRecordIdentifier","keys_4","isChildMatchingRow","keys_3","keys_3_1","addChildRow","keys_5","keys_5_1","setTabDisplayMode","afterChildChangeMerge","setHeaderTitle","setHeaderDescription","ChipsComponent","onListChange","separatorKeysCodes","ENTER","chips","addOnBlur","addItem","keyExists","removable","triggerChangedEvent","removeItem","item","drop","moveItemInArray","previousIndex","currentIndex","onSelected","setDescribedByIds","ids","onContainerClick","orientation","setChips","optionMatch_1","chip","ToolbarComponent","onMenuClick","menuItems","MultiImageComponent","onShowAllClick","count","images","radius","showCount","showAll","lastItemLabel","hideTooltip","ParagraphComponent","tokens","paragraphField","words","word","slice","buttonContexts","isButtonDisable","HighlightPipe","transform","pattern","regex","RegExp","match","Pipe","TooltipComponent","placement","NgInit","ngInit","Directive","SafeHtmlPipe","sanitizer","bypassSecurityTrustHtml","DomSanitizer","cfTemplateDirective","vcRef","compiler","ngOnChanges","cfTemplate","componentRef","updateProperties","component","createDynamicComponent","module","createDynamicModule","compileModuleAndAllComponentsAsync","moduleWithFactories","componentFactory","componentFactories","find","componentType","createComponent","catch","prop","cfTemplateContext","CustomDynamicComponent","CfDynamicModule","NgModule","imports","CommonModule","declarations","ViewContainerRef","Compiler","NavigationComponent","ref","isExpanded","logout","showSubmenu","isShowing","showSubSubMenu","ngAfterViewChecked","detectChanges","mouseenter","mouseleave","logoutEvent","ngAfterViewInit","navigation","navigationPanel","navigations","defaultCollapse","HandsetLandscape","HandsetPortrait","matches","ChangeDetectorRef","HttpClientModule","RouterModule","MdePopoverModule","ReactiveFormsModule","TooltipModule","LayoutModule","MatButtonModule","MatButtonToggleModule","MatMenuModule","MatChipsModule","MatIconModule","MatBadgeModule","MatDialogModule","MatCardModule","MatTabsModule","MatExpansionModule","MatSidenavModule","MatBottomSheetModule","MatDividerModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatAutocompleteModule","MatCheckboxModule","MatRadioModule","MatDatepickerModule","MatMomentDateModule","MatSliderModule","MatSlideToggleModule","MatListModule","MatTableModule","MatSortModule","MatPaginatorModule","MatGridListModule","MatProgressBarModule","MatProgressSpinnerModule","DragDropModule","MatTooltipModule","QuillModule","forRoot","AbilityModule","FlexLayoutModule","MatToolbarModule","InfiniteScrollModule","exports","providers","provide","useValue","ɵ0","PureAbility","useExisting","ModalUitls","modal","widgetConfig","componentInstance"],"mappings":"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","sourcesContent":["export class BadgeUitls {\n}","export class CollectionUtils {\n\n  static isEmpty(value) {\n    if (value == null || value == undefined || value == \"\" || value.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Button, ButtonGroup, ButtonType, HoverButton, Action, ObjectTree } from '../button/model';\nimport { FormDiaplyMode } from '../form/model';\nimport { CollectionUtils } from './collection.utility';\n\nexport class ButtonUtils {\n    static instanceOfButton(object: any): object is Button {\n        return 'type' in object &&\n//            !('groupIdentifier' in object) &&\n            (object['type'] != ButtonType.CHIP && object['type'] != ButtonType.GROUP && object['type'] != ButtonType.DROPDOWN) &&\n            (object['type'] == ButtonType.FLAT || object['type'] == ButtonType.GHOST || object['type'] == ButtonType.RAISED || object['type'] == ButtonType.FAB || object['type'] == ButtonType.STROKED)\n    }\n\n    static instanceOfChipButton(object: any): object is ButtonGroup {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.CHIP;\n    }\n\n    static instanceOfButtonGroup(object: any): object is ButtonGroup {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.GROUP;\n    }\n\n    static instanceOfHoverButton(object: any): object is HoverButton {\n        return 'type' in object && 'groupIdentifier' in object && object['type'] == ButtonType.DROPDOWN;\n    }\n\n    static instanceOfAnyButtonType(object: any): boolean {\n        let isButton: boolean = false;\n        if (this.instanceOfButton(object) || this.instanceOfChipButton(object) || this.instanceOfButtonGroup(object) || this.instanceOfHoverButton(object)) {\n            isButton = true;\n        }\n\n        return isButton;\n    }\n\n    static hasWidth(buttons: Array<Button>): boolean {\n        let hasButtonWidth: boolean = false;\n\n        if (!CollectionUtils.isEmpty(buttons) && buttons.filter(button => button.width != null && button.width != \"\").length > 0) {\n            hasButtonWidth = true;\n        }\n\n        return hasButtonWidth;\n    }\n\n    static setEqualWidth(buttons: Array<Button>): void {\n        if (!CollectionUtils.isEmpty(buttons)) {\n            let buttonCount = buttons.length;\n            let buttonWidth = 100 / buttonCount;\n\n            buttons.forEach(button => {\n                button.width = \"\" + buttonWidth;\n            });\n        }\n    }\n\n    static getAction(sourceIdentifier: string, sourceIndex: number, widgetArrayIndex: number, identifier: string, parentHierarchy: ObjectTree, event: any, originalData: any, context: any, actionDialog: any): Action {\n        let data = null;\n        if (originalData) {\n            data = { ...originalData, ...context };\n        } else {\n            data = context;\n            originalData = context;\n        }\n        let action: Action = {\n            sourceIdentifier: sourceIdentifier,\n            sourceIndex: sourceIndex,\n            widgetArrayIndex: widgetArrayIndex,\n            action: identifier,\n            actionData: actionDialog,\n            data: data,\n            originalData: originalData,\n            parentHierarchy: parentHierarchy,\n            event: event\n        };\n\n        return action;\n    }\n    \n    static isDisable(displayMode: FormDiaplyMode): boolean {\n        if (displayMode == FormDiaplyMode.BLOCKED || displayMode == FormDiaplyMode.VIEW) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { DependentOnField } from \"../field/model\";\nimport { FormButton, FormButtonLayout, FormField } from \"../form/model\";\nimport { CollectionUtils } from \"./collection.utility\";\n\nexport class DependentUtils {\n  static displayDependencyField(dependentOnFields: Array<DependentOnField>, supportingRecord: any, record: any): boolean {\n    let displayDependencyField: boolean = true;\n    let displaySupportingDependencyField: boolean = true;\n\n    if (dependentOnFields && dependentOnFields.length > 0 && record) {\n      for (let dependentField of dependentOnFields) {\n        let dependencyValue: any = \"\";\n        try {\n          dependencyValue = eval(\"record.\" + dependentField.key);\n        } catch (e) {\n\n        }\n\n        if (dependencyValue != undefined) {\n          if (dependentField.condition instanceof Array) {\n            if (dependencyValue instanceof Array) {\n              let hasMatch: boolean = false;\n              (<Array<any>>dependencyValue).forEach(value => {\n                if ((<Array<string>>dependentField.condition).indexOf(value) > -1) {\n                  hasMatch = true;\n                }\n              });\n              if (hasMatch) {\n                displayDependencyField = false;\n              }\n            } else {\n              if ((<Array<string>>dependentField.condition).indexOf(dependencyValue) <= -1) {\n                displayDependencyField = false;\n              }\n            }\n          } else {\n            if (dependencyValue instanceof Array) {\n              if (dependencyValue.indexOf(dependentField.condition) <= -1) {\n                displayDependencyField = false;\n              }\n            } else {\n              if (dependencyValue != dependentField.condition) {\n                displayDependencyField = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (dependentOnFields && dependentOnFields.length > 0 && supportingRecord) {\n      for (let dependentField of dependentOnFields) {\n        let dependencyValue: any = \"\";\n        try {\n          dependencyValue = eval(\"supportingRecord.\" + dependentField.key);\n        } catch (e) {\n\n        }\n\n        if (dependencyValue != undefined) {\n          if (dependentField.condition instanceof Array) {\n            if (dependencyValue instanceof Array) {\n              let hasMatch = false;\n              (<Array<any>>dependencyValue).forEach(value => {\n                if ((<Array<string>>dependentField.condition).indexOf(value) > -1) {\n                  hasMatch = true;\n                }\n              });\n              if (!hasMatch) {\n                displaySupportingDependencyField = false;\n              }\n            } else {\n              if ((<Array<string>>dependentField.condition).indexOf(dependencyValue) <= -1) {\n                displaySupportingDependencyField = false;\n              }\n            }\n          } else {\n            if (dependencyValue instanceof Array) {\n              if (dependencyValue.indexOf(dependentField.condition) <= -1) {\n                displaySupportingDependencyField = false;\n              }\n            } else {\n              if (dependencyValue != dependentField.condition) {\n                displaySupportingDependencyField = false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return displayDependencyField && displaySupportingDependencyField;\n  }\n\n  static getDependencyTree(formFields: Array<FormField>): any {\n    let dependency: any = {};\n\n    for (let formField of formFields) {\n      if (formField.field.dependentOnFields && formField.field.dependentOnFields.length > 0) {\n        for (let dependentField of formField.field.dependentOnFields) {\n          if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n            dependency[dependentField.key] = new Array<string>();\n          }\n          dependency[dependentField.key].push(formField.field.key);\n        }\n      }\n    }\n\n    return dependency;\n  }\n\n  static getDependencyTreeForButton(buttonLayout: FormButton | FormButtonLayout): any {\n    let dependency: any = {};\n\n    if (buttonLayout && !CollectionUtils.isEmpty((<FormButton>buttonLayout).buttons)) {\n      for (let button of (<FormButton>buttonLayout).buttons) {\n        if (button.dependentOnFields && button.dependentOnFields.length > 0) {\n          for (let dependentField of button.dependentOnFields) {\n            if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n              dependency[dependentField.key] = new Array<string>();\n            }\n            dependency[dependentField.key].push(button.identifier);\n          }\n        }\n      }\n    }\n\n    if (buttonLayout && !CollectionUtils.isEmpty((<FormButtonLayout>buttonLayout).cells)) {\n      for (let cell of (<FormButtonLayout>buttonLayout).cells) {\n        if ((<FormButton>cell.buttons) && !CollectionUtils.isEmpty((<FormButton>cell.buttons).buttons)) {\n          for (let button of (<FormButton>cell.buttons).buttons) {\n            if (button.dependentOnFields && button.dependentOnFields.length > 0) {\n              for (let dependentField of button.dependentOnFields) {\n                if (dependency[dependentField.key] == undefined || dependency[dependentField.key] == null) {\n                  dependency[dependentField.key] = new Array<string>();\n                }\n                dependency[dependentField.key].push(button.identifier);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return dependency;\n  }\n}","import { CollectionUtils } from './collection.utility';\nimport { DropdownOption } from '../field/model';\nimport { MasterData } from '../setting/model';\n\nexport class MasterDataUtils {\n    static getMasterDataFromLocalStore(key: string): MasterData {\n        let masterDataMap: Map<string, MasterData> = JSON.parse(localStorage.getItem(\"masterData\"));\n\n        return masterDataMap[key];\n    }\n\n    static getMasterDataAsOptions(masterDataKey: string): Array<DropdownOption> {\n        let masterData = MasterDataUtils.getMasterDataFromLocalStore(masterDataKey);\n\n        let options: Array<DropdownOption> = new Array<DropdownOption>();\n\n        if (masterData && !CollectionUtils.isEmpty(masterData)) {\n            masterData.items.forEach(record => {\n                options.push({ key: record.key, value: record.label });\n            });\n        }\n\n        return options;\n    }\n}\n","export class StringUtils {\n  static isEmpty(value) {\n    if (value == null || value == undefined || value == \"\" || value.length == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Field, FieldType, TextField, AutocompleteField, CheckboxField, RadioField, DropdownField, DropdownOption, KeyMap, DisplayMode } from '../field/model';\nimport { FormDiaplyMode } from '../form/model';\nimport { MasterDataUtils } from './master-data.utility'; \nimport { StringUtils } from './string.utility';\nimport { CollectionUtils } from './collection.utility';\n\nexport class FieldUtils {\n  static isFormDisable(displayMode: FormDiaplyMode): boolean {\n    if (displayMode == FormDiaplyMode.BLOCKED || displayMode == FormDiaplyMode.VIEW) {\n      return true;\n    } else { \n      return false;\n    }\n  }\n\n  static isFieldDisabled(field: Field, currentDisplayMode: FormDiaplyMode, value: string | Array<string>): boolean {\n    let isDisabled: boolean = false;\n    if (FieldUtils.isFormDisable(currentDisplayMode) || field.displayMode == DisplayMode.DISABLED || field.type == FieldType.HIDDEN || field.isReadOnly || (field.isUnique && currentDisplayMode == FormDiaplyMode.EDIT && !StringUtils.isEmpty(value))) {\n      isDisabled = true;\n    }\n\n    return isDisabled;\n  }\n\n  static displayEllipsis(charLimit: number, value: any): boolean {\n    let showEllipsis: boolean = false;\n\n    let strValue = JSON.stringify(value);\n    if (charLimit && charLimit > 0 && !StringUtils.isEmpty(strValue) && strValue.length > charLimit) {\n      showEllipsis = true;\n    }\n    return showEllipsis;\n  }\n\n  static readOnlyField(): Array<string> {\n    return [FieldType.IMAGE, FieldType.IMAGE_AND_TEXT, FieldType.JSON, FieldType.LABEL, FieldType.BOOLEAN];\n  }\n\n  static isEllipsisField(field: Field) {\n    let hasEllipsis: boolean;\n\n    if ((field.type == FieldType.LABEL || field.type == FieldType.TEXT || field.type == FieldType.TEXTAREA || field.type == FieldType.EMAIL || field.type == FieldType.PASSWORD) && (<TextField>field).ellipsis > 0) {\n      hasEllipsis = true;\n    }\n\n    return hasEllipsis;\n  }\n\n  static setOptionsUsingKey(field: AutocompleteField | CheckboxField | RadioField | DropdownField, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(field)) {\n      let options: Array<DropdownOption> = MasterDataUtils.getMasterDataAsOptions(masterDataKey);\n\n      field.options = options;\n    }\n  }\n\n  static setOptionsUsingValues(field: AutocompleteField | CheckboxField | RadioField | DropdownField, keyMap: KeyMap) {\n    if (!CollectionUtils.isEmpty(field)) {\n      field.options = keyMap.options; \n    }\n  }\n}","export class ObjectUtils {\n    static isEmpty(obj: any) {\n        return obj == undefined || Object.keys(obj).length === 0;\n    }\n\n    static resolve(text: string, obj: any): string {\n        if (!this.isEmpty(obj)) {\n            for (var key in obj) {\n                text = text.replace('{' + key + '}', obj[key]);\n            }\n        }\n\n        return text;\n    }\n\n    static unflatten(_json: any) {\n        function jsonToObj(data: any, result) {\n            return Object.keys(data).reduce((acc, current, index) => {\n                const inlineKeys = current.split('.');\n                let firstProp = inlineKeys.shift();\n                const hasProps = inlineKeys.length >= 1;\n                if (hasProps) {\n                    const parsedKey = parseInt(inlineKeys[0], 10);\n                    const isNextKeyNumber = !isNaN(parsedKey);\n                    let _nextData = {};\n                    if (!acc[firstProp]) {\n                        acc[firstProp] = isNextKeyNumber ? [] : {};\n                    }\n                    if (isNextKeyNumber) {\n                        const _index = parseInt(inlineKeys.shift(), 10);\n                        const isValueInArray = acc[firstProp].length - 1 >= _index;\n                        const currentValueObj = acc[firstProp][_index];\n                        _nextData[inlineKeys.join('.')] = data[current];\n                        acc[firstProp][_index] = isValueInArray\n                            ? Object.assign(currentValueObj, jsonToObj(_nextData, currentValueObj))\n                            : jsonToObj(_nextData, {});\n                    } else {\n                        _nextData[inlineKeys.join('.')] = data[current];\n                        Object.assign(acc[firstProp], jsonToObj(_nextData, acc[firstProp]));\n                    }\n                } else {\n                    acc[firstProp] = data[current];\n                }\n                return acc;\n            }, result);\n        }\n        return jsonToObj(_json, {});\n    };\n}\n","import { FormDiaplyMode, Form, FormField, FormButton } from '../form/model';\nimport { Field, FieldType, AutocompleteField, RadioField, CheckboxField, DropdownField, KeyMap, DependentOnField, CalendarField, ParagraphField } from '../field/model';\nimport { FormGroup, FormControl, ValidatorFn, FormArray } from '@angular/forms';\n//import { isArray } from 'util';\nimport { ObjectUtils } from './object.utility';\nimport { CollectionUtils } from './collection.utility';\nimport { StringUtils } from './string.utility';\nimport { FieldUtils } from './field.utility';\nimport { DependentUtils } from './dependent.utility';\n\nexport class FormUtils {\n  static isFormDisable(displayMode: FormDiaplyMode): boolean {\n    if (displayMode == FormDiaplyMode.BLOCKED || displayMode == FormDiaplyMode.VIEW) {\n      return true;\n    } else { \n      return false;\n    }\n  }\n\n  static disableField(form: FormGroup, field: Field): void {\n    if (form && form.get(field.key)) {\n      form.get(field.key).disable();\n    }\n  }\n\n  static disableFieldControl(fieldControl: FormControl): void {\n    if (fieldControl) {\n      fieldControl.disable();\n    }\n  }\n\n  static checkUniqueIdentifier(forms: Array<Form>) {\n    //  TODO: \n  }\n\n  static getRawValue(form: FormGroup) {\n    let formValue: any = {};\n\n    if (form) {\n      formValue = form.getRawValue();\n    }\n\n    return formValue;\n  }\n\n  static initFormGroup(formFields: Array<FormField>, supportingRecord: any, record: any, displayMode: FormDiaplyMode): FormGroup {\n    let fieldControls = {};\n\n    let isFormDisabled = this.isFormDisable(displayMode);\n\n    for (let formField of formFields) {\n      // if (!CollectionUtils.isEmpty(record)) {\n      FormUtils.initFieldGroup(fieldControls, formField, supportingRecord, record, displayMode);\n      // }\n    }\n\n    return new FormGroup(fieldControls);\n  }\n\n  static getFieldValidation(field: Field): Array<ValidatorFn> {\n    let validations: Array<ValidatorFn> = new Array<ValidatorFn>();\n    if (field.validations && field.validations.length > 0) {\n      for (let val of field.validations) {\n        validations.push(val.type);\n      }\n    }\n\n    return validations;\n  }\n\n  static initFieldGroup(fieldControls: any, formField: FormField, supportingRecord: any, record: any, displayMode: FormDiaplyMode): any {\n    //        field.hide = false;\n    if (!DependentUtils.displayDependencyField(formField.field.dependentOnFields, supportingRecord, record)) {\n      if (record == null) {\n        record = {};\n      }\n      if (formField.addMore) {\n        record[formField.field.key] = [];\n      } else {\n        record[formField.field.key] = null;\n      }\n      //          field.hide = true;\n      return;\n    }\n\n    let validations: Array<ValidatorFn> = this.getFieldValidation(formField.field);\n\n    if (formField.field.type == FieldType.CHECKBOX) {\n      let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n      if (formField.addMore) {\n        let options: Array<any> = record && fieldValue ? fieldValue : new Array<any>();\n\n        fieldControls[formField.field.key] = new FormArray([]);\n        for (let vCnt = 0; vCnt < options.length; vCnt++) {\n          let opts = this.getCheckboxOption(displayMode, formField.field, options[vCnt]);\n          fieldControls[formField.field.key].push(this.setFormGroup(displayMode, formField.field, opts, validations));\n        }\n      } else {\n        let option = record && fieldValue ? fieldValue : null;\n\n        let opts = this.getCheckboxOption(displayMode, formField.field, option);\n        fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, opts, validations);\n      }\n    } else if (formField.field.type == FieldType.CALENDAR && (<CalendarField>formField.field).dateRange) {\n      let controls = {};\n      if (validations && validations.length > 0) {\n        controls['startDate'] = new FormControl('',validations);\n        controls['endDate'] = new FormControl('', validations);\n      } else {\n        controls['startDate'] = new FormControl('');\n        controls['endDate'] = new FormControl('');\n      }\n      fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, controls, validations);\n    } else if (formField.field.type == FieldType.PARAGRAPH && !CollectionUtils.isEmpty((<ParagraphField>formField.field).fieldContexts)) {\n      let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n      let controls = this.getParagraphFields(displayMode, formField.field, fieldValue);\n\n      fieldControls[formField.field.key] = this.setFormGroup(displayMode, formField.field, controls, validations);\n    } else {\n      if (formField.addMore) {\n        let values: Array<any> = this.getFormFieldValue(record, formField);\n\n        fieldControls[formField.field.key] = new FormArray([]);\n        if (CollectionUtils.isEmpty(values)) {\n          fieldControls[formField.field.key].push(this.setFormControl(displayMode, formField.field, \"\", validations));\n        } else {\n          for (let vCnt = 0; vCnt < values.length; vCnt++) {\n            fieldControls[formField.field.key].push(this.setFormControl(displayMode, formField.field, values[vCnt], validations));\n          }\n        }\n      } else {\n        let value: any = this.getFormFieldValue(record, formField)\n\n        fieldControls[formField.field.key] = this.setFormControl(displayMode, formField.field, value, validations);\n      }\n    }\n\n    return fieldControls;\n  }\n\n  static dateRangeValidation(g: FormGroup) : any{\n    return g.get('startDate').value || g.get('endDate').value\n    ? null : {'mismatch': true};\n  }\n  static getCheckboxOption(displayMode: FormDiaplyMode, field: Field, options: Array<string>): any {\n    let opts = {};\n\n    if (field['options'] && field['options'].length > 0) {\n      for (let opt of field['options']) {\n        if (ObjectUtils.isEmpty(options)) {\n          if (opt['selected'])  {\n            opt.checked = true;\n          } else  {\n            opt.checked = false;\n          }\n        } else {\n          let optionSelected: boolean = options.indexOf(opt.key) > -1;\n          if (options && optionSelected) {\n            opt.checked = true;\n          } else {\n            opt.checked = false;\n          }\n        }\n        opts[opt.key] = new FormControl(opt.checked);\n\n        if (FieldUtils.isFieldDisabled(field, displayMode, \"\")) {\n          opts[opt.key].disable();\n        }\n\n      }\n    }\n\n    return opts;\n  }\n\n  static getParagraphFields(displayMode: FormDiaplyMode, field: Field, fieldValues: Map<string, any>): any {\n    let fieldContexts = {};\n\n    if (CollectionUtils.isEmpty(fieldValues)) {\n      fieldValues = new Map<string, any>();\n    }\n\n    if ((<ParagraphField> field).fieldContexts && Object.keys((<ParagraphField> field).fieldContexts).length > 0) {\n      for (let key of Object.keys((<ParagraphField> field).fieldContexts)) {\n        let fieldContextKey = (<ParagraphField> field).fieldContexts[key];\n\n        let validations: Array<ValidatorFn> = this.getFieldValidation(fieldContextKey);\n        fieldContexts[fieldContextKey.key] = new FormControl(fieldValues[fieldContextKey.key], validations);\n\n        if (FieldUtils.isFieldDisabled(field, displayMode, \"\")) {\n          fieldContexts[fieldContextKey.key].disable();\n        }\n      }\n    }\n\n    return fieldContexts;\n  }\n\n  static setFormGroup(displayMode: FormDiaplyMode, field: Field, value: any, validations: Array<ValidatorFn>): FormGroup {\n    let formGroup: FormGroup;\n\n    if (field.validations && field.validations.length > 0) {\n      formGroup = new FormGroup(value, validations);\n    } else {\n      formGroup = new FormGroup(value);\n    }\n\n    if ((FieldUtils.isFieldDisabled(field, displayMode, value) || field.isReadOnly || field.type == FieldType.HIDDEN) && !StringUtils.isEmpty(value)) {\n      formGroup.disable();\n    }\n\n    return formGroup;\n  }\n\n  static setFormControl(displayMode: FormDiaplyMode, field: Field, value: any, validations: Array<ValidatorFn>): FormControl {\n    let formControl: FormControl;\n\n    if (field.validations && field.validations.length > 0) {\n      formControl = new FormControl(value, validations);\n    } else {\n      formControl = new FormControl(value);\n    }\n\n    if (FieldUtils.isFieldDisabled(field, displayMode, value)) {\n      formControl.disable();\n    } else {\n      formControl.enable();\n    }\n\n    return formControl;\n  }\n\n  static getFormFieldValue(record: any, formField: FormField): any {\n    let value: any;\n    let fieldValue = FormUtils.getValueViaEval(record, formField.field.key);\n\n    if (formField.addMore) {\n      let elements: Array<any> = new Array<any>();\n      if (!ObjectUtils.isEmpty(record) && !CollectionUtils.isEmpty(fieldValue) && Array.isArray(fieldValue)) {\n        elements = fieldValue;\n      } else {\n        elements.push(\"\");\n      }\n\n      for (let cnt = 0; cnt < elements.length; cnt++) {\n        elements[cnt] = this.getFieldValue(elements[cnt], formField.field);\n      }\n      value = elements;\n    } else {\n      let recordValue = \"\";\n      if (record && fieldValue) {\n        recordValue = fieldValue;\n      }\n      value = this.getFieldValue(recordValue, formField.field);\n    }\n    return value\n  }\n\n  static getFieldValue(recordValue: any, field: Field): any {\n    let value: any = null;\n\n    if (field.value) {\n      value = field.value;\n    }\n    if (!StringUtils.isEmpty(recordValue)) {\n      value = recordValue;\n    }\n    if (value == undefined || JSON.stringify(value) === '{}') {\n      value = \"\";\n    }\n\n    return value;\n  }\n\n  static reset(form: FormGroup, formConfig?: Form): void {\n    form.reset();\n\n    if (formConfig != null) {\n      for (let field of formConfig.formFields) {\n        if ((<Field>field.field).type == FieldType.AUTOCOMPLETE) {\n          field['default'] = null;\n        }\n      }\n    }\n  }\n\n  static getValueViaEval(record: any, key: string): any {\n    let value = \"\";\n    try {\n      if (StringUtils.isEmpty(value)) {\n        value = record[key];\n      }\n      value = eval(\"record.\" + key);\n    } catch (e) { }\n\n    return value;\n  }\n\n  static setOptionsUsingKey(form: Form, fieldKey: string, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(form.formFields)) {\n      form.formFields.forEach(formField => {\n        if (!CollectionUtils.isEmpty(formField) && !CollectionUtils.isEmpty(formField.field)) {\n          if (formField.field.key == fieldKey && (formField.field.type == FieldType.AUTOCOMPLETE || formField.field.type == FieldType.CHECKBOX || formField.field.type == FieldType.RADIO || formField.field.type == FieldType.DROPDOWN)) {\n            FieldUtils.setOptionsUsingKey(<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field, masterDataKey);\n          }\n        }\n      })\n    }\n  }\n\n  static setOptionsUsingValues(form: Form, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(form.formFields)) {\n      form.formFields.forEach(formField => {\n        if (!CollectionUtils.isEmpty(formField) && !CollectionUtils.isEmpty(formField.field)) {\n          let isMatchingDependendKeyMap: boolean = false;\n          if (!StringUtils.isEmpty((<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field).optionDependsOn)) {\n            //  get optionDependsOn field value\n            let optionDependsOnValue = FormUtils.getValueViaEval(record, (<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field).optionDependsOn);\n\n            if (keyMap.optionDependsOnValue == optionDependsOnValue) {\n              isMatchingDependendKeyMap = true;\n            }\n          } else {\n            isMatchingDependendKeyMap = true;\n          }\n\n          if (formField.field.key == fieldKey && (formField.field.type == FieldType.AUTOCOMPLETE || formField.field.type == FieldType.CHECKBOX || formField.field.type == FieldType.RADIO || formField.field.type == FieldType.DROPDOWN)) {\n            if (isMatchingDependendKeyMap) {//} || relaodAll) {\n              FieldUtils.setOptionsUsingValues(<AutocompleteField | RadioField | CheckboxField | DropdownField>formField.field, keyMap);\n            }\n          }\n        }\n      })\n    }\n  }\n\n  static changeButtonLabelIcon(form: Form, buttonIdentifier: string, label?: string, icon?: string) {\n    if (!CollectionUtils.isEmpty(form) && !CollectionUtils.isEmpty(<FormButton>form.action) && !CollectionUtils.isEmpty((<FormButton>form.action).buttons)) {\n      (<FormButton>form.action).buttons.forEach(button => {\n\n        if (!CollectionUtils.isEmpty(button) && button.identifier == buttonIdentifier) {\n          if (!StringUtils.isEmpty(label)) {\n            button.label = label;\n          }\n          if (!StringUtils.isEmpty(icon)) {\n            button.icon = icon\n          }\n        }\n      })\n    }\n  }\n}","import { Form, FormButton, FormButtonLayout, FormCellControl, FormCellControlType, FormCustomLayout, FormField } from \"../form/model\";\nimport { CollectionUtils } from \"./collection.utility\";\nimport { StringUtils } from \"./string.utility\";\n\n\nexport class FormCustomUtils {\n    static setCustomLayout(formConfig: Form, layout: FormCustomLayout) { \n        if (layout && !CollectionUtils.isEmpty(layout.cells)) {\n            layout.cells.forEach(cell => {\n                if (!CollectionUtils.isEmpty(cell.controls)) {\n                    cell.controls.forEach(control => {\n                        if (CollectionUtils.isEmpty(control.control))   {\n                            let resolvedControl: any = {};\n                            resolvedControl = this.getControl(formConfig, control);\n\n                            control.control = resolvedControl;\n\n                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {\n                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;\n                            // }\n                        }\n                    });\n                }\n            })\n        }\n        console.log(formConfig.layout)\n    }\n\n    static getControl(formConfig: Form, cellControl: FormCellControl): any {\n        let control: any = {};\n\n        if (cellControl.control) {\n            control = cellControl.control;\n        } else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.formFields) && cellControl.type == FormCellControlType.FIELD) {\n            control = this.getFieldControl(formConfig.formFields, cellControl.key);\n        } else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.action) && cellControl.type == FormCellControlType.BUTTON) {\n            control = this.getButtonControl(formConfig.action, cellControl.key);\n        }\n\n        return control;\n    }\n\n    static getFieldControl(formFields: Array<FormField>, controlKey: string): any {\n        let control: any = {};\n\n        formFields.forEach(formField => {\n            if (!CollectionUtils.isEmpty(formField.field) && formField.field.key == controlKey) {\n                control = formField;\n            }\n        })\n\n        return control;\n    }\n\n    static getButtonControl(action: FormButton | FormButtonLayout, controlKey: string): any {\n        let control: any;\n\n        if (StringUtils.isEmpty(action['rowHeight']))   {\n            (<FormButton>action).buttons.forEach(button => {\n                if (button.identifier == controlKey) {\n                    control = button;\n                }\n            });\n        }   else    {\n            (<FormButtonLayout>action).cells.forEach(cell => {\n                cell.buttons.buttons.forEach(button => {\n                    if (button.identifier == controlKey) {\n                        control = button;\n                    }\n                });\n            })\n        }\n\n        return control;\n    }\n}","import { CellControl, CellControllType, Column, List, ListCustomLayout } from '../list/model';\nimport { CollectionUtils } from './collection.utility';\nimport { FormUtils } from './form.utility';\nimport { FieldUtils } from './field.utility';\nimport { StringUtils } from './string.utility';\nimport { FieldType, AutocompleteField, RadioField, CheckboxField, DropdownField, DropdownOption, KeyMap, FieldAppearance, FieldDiaplyType } from '../field/model';\nimport { Button, ButtonType } from '../button/model';\n\nexport class ListUtils {\n    static addColoumn() {\n\n    }\n\n    static hideColoumn() {\n\n    }\n\n    static setOptionsUsingKey(list: List, fieldKey: string, masterDataKey: string) {\n        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {\n            list.columns.forEach(column => {\n                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {\n                    column.fields.forEach(field => {\n                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == FieldType.AUTOCOMPLETE || field.type == FieldType.CHECKBOX || field.type == FieldType.RADIO || field.type == FieldType.DROPDOWN)) {\n                            FieldUtils.setOptionsUsingKey(<AutocompleteField | RadioField | CheckboxField | DropdownField>field, masterDataKey);\n                        }\n                    })\n                }\n            })\n        }\n    }\n\n    static setOptionsUsingValues(list: List, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {\n            list.columns.forEach(column => {\n                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {\n                    column.fields.forEach(field => {\n                        let isMatchingDependendKeyMap: boolean = false;\n                        if (!StringUtils.isEmpty((<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn)) {\n                            //  get optionDependsOn field value\n                            let optionDependsOnValue = FormUtils.getValueViaEval(record, (<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn);\n\n                            if (keyMap.optionDependsOnValue == optionDependsOnValue) {\n                                isMatchingDependendKeyMap = true;\n                            }\n                        } else {\n                            isMatchingDependendKeyMap = true;\n                        }\n\n                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == FieldType.AUTOCOMPLETE || field.type == FieldType.CHECKBOX || field.type == FieldType.RADIO || field.type == FieldType.DROPDOWN)) {\n                            if (isMatchingDependendKeyMap) {//} || relaodAll)   {\n                                FieldUtils.setOptionsUsingValues(<AutocompleteField | RadioField | CheckboxField | DropdownField>field, keyMap);\n                            }\n                        }\n                    })\n                }\n            })\n        }\n    }\n\n\n    static getColumnKey(column: Column): string {\n        let key;\n        if (column.key) {\n            key = column.key;\n        } else {\n            if (column.fields && column.fields.length > 0) {\n                key = column.fields[0].key;\n            }\n        }\n\n        return key;\n    }\n\n\n    static getColumnLabel(column: Column): string {\n        let label;\n        if (column.label) {\n            label = column.label;\n        } else {\n            if (column.fields && column.fields.length > 0) {\n                label = column.fields[0].label;\n            }\n        }\n\n        return label;\n    }\n\n    static getColumnSelectorField(listConfig: List): DropdownField {\n        let options: Array<DropdownOption> = new Array<DropdownOption>();\n\n        let values: Array<string> = new Array<string>();\n        for (let column of listConfig.columns) {\n            let key: string = this.getColumnKey(column);\n            let label: string = this.getColumnLabel(column);\n\n            options.push({\n                key: key,\n                value: label,\n                disabled: false,\n                selected: column.show\n            });\n\n            if (column.show) {\n                values.push(key)\n            }\n        }\n\n        let columnSelectorField: DropdownField = {\n            key: \"columnSelector\",\n            label: \"Display Column\",\n            type: FieldType.DROPDOWN,\n            appearance: FieldAppearance.STANDARD,\n            isReadOnly: false,\n            fieldDisplayType: FieldDiaplyType.INLINE,\n            placeholder: \"Columns to display\",\n            options: options,\n            multiselect: true,\n            value: values\n        };\n\n        return columnSelectorField;\n    }\n\n    static getMobileConfig(listConfig: List) {\n        if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.mobile) && !CollectionUtils.isEmpty(listConfig.mobile.cells)) {\n            this.setCustomLayout(listConfig, listConfig.mobile);\n        }\n    }\n\n    static setCustomLayouts(listConfig: List) {\n        if (this.hasRowHover(listConfig)) {\n            this.setCustomLayout(listConfig, listConfig.row.hover.template.layout);\n        }\n        if (this.hasCustomCellLayout(listConfig)) {\n            listConfig.columns.forEach(column => {\n                if (column.template && column.template.layout)  {\n                    this.setCustomLayout(listConfig, column.template.layout);\n                }\n            })\n        }\n        if (this.hasCustomRowLayout(listConfig)) {\n            this.setCustomLayout(listConfig, listConfig.row.template.layout);\n        }\n    }\n\n    static hasRowHover(listConfig: List): boolean {\n        let hasHoverConfig: boolean = false;\n        \n        if (listConfig && listConfig.row && listConfig.row.hover && listConfig.row.hover.template && listConfig.row.hover.template.layout)  {\n            hasHoverConfig = true;\n        }\n\n        return hasHoverConfig;\n    }\n\n    static hasCustomRowLayout(listConfig: List): boolean {\n        let hasCustomRowLayout: boolean = false;\n        \n        if (listConfig && listConfig.row && listConfig.row.template && listConfig.row.template.layout)  {\n            hasCustomRowLayout = true;\n        }\n        \n        return hasCustomRowLayout;\n    }\n\n    static hasCustomCellLayout(listConfig: List): boolean {\n        let hasCustomCellLayout: boolean = false;\n        \n        if (listConfig && !CollectionUtils.isEmpty(listConfig.columns))  {\n            listConfig.columns.forEach(column => {\n                if (column.template && column.template.layout)  {\n                    hasCustomCellLayout = true;\n                }\n            })\n        }\n        \n        return hasCustomCellLayout;\n    }\n\n    static setCustomLayout(listConfig: List, layout: ListCustomLayout) {\n        if (layout && !CollectionUtils.isEmpty(layout.cells)) {\n            layout.cells.forEach(cell => {\n                if (!CollectionUtils.isEmpty(cell.controls)) {\n                    cell.controls.forEach(control => {\n                        if (CollectionUtils.isEmpty(control.control))   {\n                            let resolvedControl: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n                            resolvedControl = this.getControl(listConfig, control);\n\n                            control.control = resolvedControl.control;\n                            control.colIndex = resolvedControl.colIndex;\n                            control.cControlIndex = resolvedControl.cControlIndex;\n\n                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {\n                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;\n                            // }\n                        }\n                    });\n                }\n            })\n        }\n    }\n\n    static getControl(listConfig: List, cellControl: CellControl): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        if (cellControl.control) {\n            control = { control: cellControl.control, colIndex: 0, cControlIndex: 0 };\n        } else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.columns) && cellControl.type == CellControllType.FIELD) {\n            control = this.getColumnControl(listConfig.columns, cellControl.key);\n        } else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.actions) && cellControl.type == CellControllType.BUTTON) {\n            control.control = this.getButtonControl(listConfig.actions, cellControl.key);\n            control.colIndex = listConfig.columns.length;\n        }\n\n        return control;\n    }\n\n    static getColumnControl(columns: Array<Column>, controlKey: string): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        let colIndex = 0;\n        columns.forEach(column => {\n            if (!CollectionUtils.isEmpty(column.fields) && CollectionUtils.isEmpty(control.control)) {\n                let cControlIndex = 0;\n                column.fields.forEach(field => {\n                    if (CollectionUtils.isEmpty(control.control)) {\n                        control = ListUtils.getFieldControl(field, controlKey, colIndex, cControlIndex);\n                        cControlIndex++;\n                    }\n                })\n            }\n            colIndex++;\n        })\n\n        return control;\n    }\n\n    static getFieldControl(field: any, controlKey: string, colIndex: number, cControlIndex: number): { control?: any, colIndex?: number, cControlIndex?: number } {\n        let control: { control?: any, colIndex?: number, cControlIndex?: number } = {};\n\n        if (field.key == controlKey) {\n            control.control = field;\n            control.colIndex = colIndex;\n            control.cControlIndex = cControlIndex;\n            console.log(\"1111111\");\n            console.log(control);\n        }\n\n        return control;\n    }\n\n    static getButtonControl(buttons: Array<Button>, controlKey: string): any {\n        let control: any;\n\n        buttons.forEach(button => {\n            if (button.identifier == controlKey) {\n                control = button;\n            }\n        })\n\n        return control;\n    }\n}","import { Property } from '../setting/model';\n\nexport class PropertyUtils {\n    static getPropertyFromLocalStore(key: string): Property {\n        let propertiesMap: Map<string, Property> = JSON.parse(localStorage.getItem(\"properties\"));\n\n        return propertiesMap[key];\n    }\n}\n","import * as CryptoJS from 'crypto-js';\n\nexport class SecurityUtils {\n  static encrypt(data: any) {\n    try {\n      // return '';\n           return CryptoJS.AES.encrypt(JSON.stringify(data), 'key').toString();\n    } catch (e) {\n      Error(e);\n    }\n  }\n\n  static decrypt(data: any) {\n    try {\n//      const bytes = '';\n           const bytes = CryptoJS.AES.decrypt(data, 'key');\n      if (bytes.toString()) {\n               return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n        return \"1\";\n      }\n      return data;\n    } catch (e) {\n      Error(e);\n    }\n  }\n}","import { DropdownOption } from '../field/model';\nimport { CollectionUtils } from './collection.utility';\n\nexport class DropdownUtils {\n  static getValue(key: string, options: Array<DropdownOption>): any  {\n    let value: any;\n\n    if (!CollectionUtils.isEmpty(options))  {\n      options.forEach(option => {\n        if (option.key == key)  {\n          value = option.value;\n        }\n      })\n    }\n\n    return value;\n  }\n}\n","import { Form, FormDiaplyMode } from '../form/model';\nimport { CollectionUtils } from './collection.utility';\nimport { Crud, CrudWidgetType, CrudTab } from '../crud/model';\nimport { FormUtils } from './form.utility';\nimport { ListUtils } from './list.utility';\nimport { List } from '../list/model';\nimport { KeyMap } from '../field/model';\n\nexport class CrudUtils {\n  static setOptionsUsingKey(crud: Crud, fieldKey: string, masterDataKey: string) {\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.form) && !CollectionUtils.isEmpty(crud.form.tabs)) {\n      crud.form.tabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.setOptionsUsingKey(<Form>widget.widget, fieldKey, masterDataKey);\n            }\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.LIST) {\n              ListUtils.setOptionsUsingKey(<List>widget.widget, fieldKey, masterDataKey);\n            }\n          })\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.list) && !CollectionUtils.isEmpty(crud.list.lists)) {\n      crud.list.lists.forEach(list => {\n        if (!CollectionUtils.isEmpty(list)) {\n          ListUtils.setOptionsUsingKey(list, fieldKey, masterDataKey);\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.search) && !CollectionUtils.isEmpty(crud.search.form))  {\n      FormUtils.setOptionsUsingKey(crud.search.form, fieldKey, masterDataKey);\n    }\n  }\n\n  static setOptionsUsingValues(crud: Crud, fieldKey: string, keyMap: KeyMap, relaodAll: boolean, record: any) {\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.form) && !CollectionUtils.isEmpty(crud.form.tabs)) {\n      crud.form.tabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.setOptionsUsingValues(<Form>widget.widget, fieldKey, keyMap, relaodAll, record);\n            }\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.LIST) {\n              ListUtils.setOptionsUsingValues(<List>widget.widget, fieldKey, keyMap, relaodAll, record);\n            }\n          })\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.list) && !CollectionUtils.isEmpty(crud.list.lists)) {\n      crud.list.lists.forEach(list => {\n        if (!CollectionUtils.isEmpty(list)) {\n          ListUtils.setOptionsUsingValues(list, fieldKey, keyMap, relaodAll, record);\n        }\n      })\n    }\n\n    if (!CollectionUtils.isEmpty(crud) && !CollectionUtils.isEmpty(crud.search) && !CollectionUtils.isEmpty(crud.search.form))  {\n      FormUtils.setOptionsUsingValues(crud.search.form, fieldKey, keyMap, relaodAll, record);\n    }\n  }\n\n  static setDisplayType(crudTabs: Array<CrudTab>, formDisplayMode: FormDiaplyMode) {\n    if (!CollectionUtils.isEmpty(crudTabs)) {\n      crudTabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              (<Form>widget.widget).displayMode = formDisplayMode;\n            }\n          })\n        }\n      })\n    }\n  }\n\n  static changeButtonLabelIcon(crudTabs: Array<CrudTab>, buttonIdentifier: string, label?: string, icon?: string)  {\n    if (!CollectionUtils.isEmpty(crudTabs)) {\n      crudTabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab) && !CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if (!CollectionUtils.isEmpty(widget) && widget.widgetType == CrudWidgetType.FORM) {\n              FormUtils.changeButtonLabelIcon((<Form>widget.widget), buttonIdentifier, label, icon);\n            }\n          })\n        }\n      })\n    }\n  }\n}","import { KeyMap, KeyMapAssociation, DropdownOption, KeyMapOptionType } from '../field/model';\nimport { CollectionUtils } from './collection.utility';\nimport { FormUtils } from './form.utility';\nimport { ListUtils } from './list.utility';\nimport { CrudUtils } from './crud.utility';\nimport { MasterDataUtils } from './master-data.utility';\nimport { Crud } from '../crud/model';\nimport { Form } from '../form/model';\nimport { List } from '../list/model';\n\nexport class KeyMapUtils {\n  static push(keyMaps: Array<KeyMap>, associations: Array<KeyMapAssociation>, options: Array<DropdownOption> | string, optionType: KeyMapOptionType, optionComponent: Crud | Form | List, optionDependsOnValue?: string, record?: any): Array<KeyMap> {\n    // if (CollectionUtils.isEmpty(keyMaps)) {\n    //   keyMaps = new Array<KeyMap>();\n    // }\n\n    let optionsDD: Array<DropdownOption>;\n    if (!(options instanceof Array)) {\n      optionsDD = MasterDataUtils.getMasterDataAsOptions(<string>options);\n    } else {\n      optionsDD = options;\n    }\n\n    if (!CollectionUtils.isEmpty(associations)) {\n      keyMaps.push(KeyMapUtils.generateKeyMap(associations, options, optionDependsOnValue));\n\n      KeyMapUtils.setOptionssUsingValues(keyMaps, true, optionType, optionComponent, record);\n    }\n\n    return keyMaps;\n  }\n\n  static generateKeyMap(associations: Array<KeyMapAssociation>, options: Array<DropdownOption> | string, optionDependsOnValue?: string): KeyMap {\n    // if (CollectionUtils.isEmpty(keyMaps)) {\n    //   keyMaps = new Array<KeyMap>();\n    // }\n\n    let optionsDD: Array<DropdownOption>;\n    if (!(options instanceof Array)) {\n      optionsDD = MasterDataUtils.getMasterDataAsOptions(<string>options);\n    } else {\n      optionsDD = options;\n    }\n\n    let keyMap: KeyMap;\n    if (!CollectionUtils.isEmpty(associations)) {\n      keyMap = { associations: associations, options: optionsDD, optionDependsOnValue: optionDependsOnValue };\n    }\n\n    return keyMap;\n  }\n\n  static setOptionssUsingValues(keyMaps: Array<KeyMap>, relaodAll: boolean, optionType: KeyMapOptionType, optionComponent: Crud | Form | List, record?: any): void {\n    if (!CollectionUtils.isEmpty(keyMaps)) {\n      keyMaps.forEach(keyMap => {\n        if (!CollectionUtils.isEmpty(keyMap.associations)) {\n          keyMap.associations.forEach(association => {\n            if (optionType != null && KeyMapOptionType.CRUD == optionType) {\n              CrudUtils.setOptionsUsingValues(<Crud>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n            if (KeyMapOptionType.FORM == optionType) {\n              FormUtils.setOptionsUsingValues(<Form>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n            if (KeyMapOptionType.LIST == optionType) {\n              ListUtils.setOptionsUsingValues(<List>optionComponent, association.fieldKey, keyMap, relaodAll, record);\n            }\n          });\n        }\n      })\n    }\n  }\n\n  static getValue(keyMaps: Array<KeyMap>, fieldKey: string, valueAsKey: any): any {\n    let value: any = \"\";\n\n    if (!CollectionUtils.isEmpty(keyMaps)) {\n      keyMaps.forEach(keyMap => {\n        if (!CollectionUtils.isEmpty(keyMap.associations)) {\n          keyMap.associations.forEach(association => {\n            if (association.fieldKey == fieldKey && !CollectionUtils.isEmpty(keyMap.options)) {\n              keyMap.options.forEach(option => {\n                if (option.key == valueAsKey) {\n                  value = option.value;\n                }\n              });\n            }\n          })\n        }\n      });\n    }\n\n    return value;\n  }\n}\n","import { Ability, RawRule } from '@casl/ability';\n\nexport class AbilityUtils {\n    static setAbility(ability: Ability): void {\n        let user: any = JSON.parse(localStorage.getItem(\"user\"));\n\n        if (user && user['permissions']) {\n            let rules: Array<RawRule> = <Array<RawRule>>user['permissions'];\n            ability.update(<any>rules);\n        }\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ObjectUtils, StringUtils } from '../../../utility';\nimport { ConfirmationPopupButton, ConfirmationPopup, ObjectTree } from '../../model';\nimport { FormGroup } from '@angular/forms';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport interface DialogData {\n  form: FormGroup,\n  sourceIdentifier: string,\n  sourceIndex: number,\n  widgetArrayIndex: number,\n  context: any,\n  originalData: any, \n  buttonRoute: Array<string>,\n  parentHierarchy: ObjectTree,\n  confirmationConfig: ConfirmationPopup;\n}\n\n@Component({\n  selector: 'mx-button-delete-confirmation',\n  templateUrl: './button-delete-confirmation.component.html',\n  styleUrls: ['./button-delete-confirmation.component.scss']\n})\nexport class ButtonDeleteConfirmationComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<ButtonDeleteConfirmationComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private ability: Ability) { \n      AbilityUtils.setAbility(this.ability);\n    } \n\n  title: string;\n  message: string;\n\n  ngOnInit(): void {\n    this.title = this.resolve(this.data.confirmationConfig.title);\n    this.message = this.resolve(this.data.confirmationConfig.message);\n  }\n\n  displayOnlyIcon(button: ConfirmationPopupButton): boolean {\n    return button && !StringUtils.isEmpty(button.icon) && StringUtils.isEmpty(button.label) ? true : false;\n  }\n\n  displayIcon(button: ConfirmationPopupButton): boolean {\n    return button && !StringUtils.isEmpty(button.icon) ? true : false;\n  }\n\n  resolve(text: string): string {\n    return ObjectUtils.resolve(text, this.data.originalData);\n  }\n\n  click(event: any) {\n    this.dialogRef.close(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { Button, ObjectTree, ReservedButton, Action, ButtonType, HoverButton, ButtonGroup, IconPosition } from '../../model';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n//import { ButtonDeleteConfirmationComponent } from '../button-delete-confirmation/button-delete-confirmation.component';\nimport { Subscription } from 'rxjs';\nimport { Params, Router, ActivatedRoute } from '@angular/router';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { StringUtils, CollectionUtils, FormUtils, SecurityUtils, ButtonUtils, DependentUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\nimport { ButtonDeleteConfirmationComponent } from '../button-delete-confirmation/button-delete-confirmation.component';\n\n//export { Button, ObjectTree, ReservedButton, Action, ButtonType, HoverButton, ButtonGroup, IconPosition } from '../../model';\n\n@Component({\n  selector: 'mx-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit, OnDestroy {\n  @Input() form: FormGroup;\n  @Input() formDisplayMode: FormDiaplyMode;\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() identifier: string;\n  @Input() context: any;\n  @Input() originalData: any;\n  @Input() label: string;\n  @Input() buttonRoute: Array<string>;\n  @Input() parentHierarchy: ObjectTree;\n  @Input() disabled: boolean;\n  @Output() onClick = new EventEmitter();\n  @Output() onIconClick = new EventEmitter();\n\n  @Input() _button: Button | ButtonGroup | HoverButton;\n  get button(): Button | ButtonGroup | HoverButton {\n    return this._button;\n  }\n  @Input()\n  set button(_button: Button | ButtonGroup | HoverButton) {\n    this._button = _button;\n    if (StringUtils.isEmpty(this.label) || !StringUtils.isEmpty(this._button.label)) {\n      this.label = this._button.label;\n    }\n    if (StringUtils.isEmpty(this._button.width)) {\n      this._button.width = '';\n    } else {\n      this._button.width = this._button.width + '%';\n      document.documentElement.style.setProperty('--width', this._button.width + '%');\n    }\n    if (StringUtils.isEmpty(this._button.iconPosition)) {\n      this._button.iconPosition = IconPosition.LEFT;\n    }\n  }\n\n  routerLink = [];\n\n  displayButton: boolean = true;\n  isButtonDisabled: boolean = false;\n  isDisplayOnlyIcon: boolean = false;\n  hasIconDisplay: boolean = false;\n  isFlatButton: boolean = false;\n  isGhostButton: boolean = false;\n  isRaisedButton: boolean = false;\n  isStrokedButton: boolean = false;\n  isFabButton: boolean = false;\n  isChip: boolean = false;\n  isLink: boolean = false;\n  isGroupButton: boolean = false;\n  isMenuButton: boolean = false;\n  buttonWithoutPadding: boolean = false;\n\n\n  formSubscription: Subscription;\n\n  constructor(\n    public dialog: MatDialog,\n    private router: Router,\n    private route: ActivatedRoute,\n    private ability: Ability\n  ) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    if (this.displayButton) {\n      this.setLabel();\n\n      this.setButtonEnable();\n      if (this.form) {\n        this.formSubscription = this.form.valueChanges.subscribe(obj => {\n          this.setButtonEnable();\n        });\n      }\n\n      this.setButtonDisplay();\n      this.setOnlyIconDisplay();\n      this.setIconDisplay();\n      this.setLink();\n      this.setGroupButton();\n      this.setFlatButton();\n      this.setGhostButton();\n      this.setRaisedButton();\n      this.setStrokedButton();\n      this.setFabButton();\n      this.setChip();\n      this.setButtonWithoutPadding();\n      this.setMenuButton();\n    }\n  }\n\n  setButtonDisplay() {\n    if ((!CollectionUtils.isEmpty(this._button.displayInFormModes) && this._button.displayInFormModes.indexOf(this.formDisplayMode) <= -1) || !DependentUtils.displayDependencyField(this._button.dependentOnFields, null, this.context ? this.context : this.originalData)) {\n      this.displayButton = false;\n    }\n  }\n\n  setButtonWithoutPadding() {\n    if (this._button.identifier == \"fieldTextClearBtn\" || this._button.identifier == \"fieldRouteToBtn\" || this._button.identifier == \"listFieldAsLink\" || this.identifier == \"listFieldAsLink\") {\n      this.buttonWithoutPadding = true;\n    }\n  }\n  setLabel(): void {\n    if (StringUtils.isEmpty(this.label)) {\n      this.label = this._button.label;\n    }\n  }\n\n  state: boolean = true;\n  click(event: any) {\n    if (!CollectionUtils.isEmpty(this._button.confirmationConfiguration)) {\n      this.openDialog(event);\n    } else {\n      this.invokeAction(null, event);\n    }\n  }\n\n  openDialog(event: any): void {\n    const dialogRef = this.dialog.open(ButtonDeleteConfirmationComponent, {\n      width: this._button.confirmationConfiguration.width ? this._button.confirmationConfiguration.width : '250px',\n      data: {\n        form: this.form,\n        sourceIdentifier: this.sourceIdentifier,\n        sourceIndex: this.sourceIndex,\n        widgetArrayIndex: this.widgetArrayIndex,\n        context: this.context,\n        originalData: this.originalData,\n        buttonRoute: this.buttonRoute,\n        parentHierarchy: this.parentHierarchy,\n        confirmationConfig: this._button.confirmationConfiguration,\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.invokeAction(result, event);\n    });\n  }\n\n  invokeAction(actionDialog: any, event: any): void {\n    if (this._button.identifier == \"crudBackButton\" && this.buttonRoute && this.buttonRoute.length > 0) {\n      this.router.navigate(this.buttonRoute, { skipLocationChange: false, replaceUrl: true });\n      return;\n    }\n\n    if (this._button.identifier == ReservedButton.RESET) {\n      FormUtils.reset(this.form);\n      this.context = {};\n    }\n\n    let action: Action = ButtonUtils.getAction(\n                            this.sourceIdentifier, \n                            this.sourceIndex, \n                            this.widgetArrayIndex, \n                            this._button.identifier, \n                            this.parentHierarchy, \n                            event, \n                            this.originalData, \n                            this.context, \n                            actionDialog);\n\n    if (this._button.identifier == ReservedButton.SEARCH || this._button.identifier == ReservedButton.RESET) {\n      this.addSearchParamsInUrl(action.data);\n    } else {\n      this.onClick.emit(action);\n    }\n  }\n\n  iconClick(event: any): void {\n    let action: Action = ButtonUtils.getAction(\n                            this.sourceIdentifier, \n                            this.sourceIndex, \n                            this.widgetArrayIndex, \n                            this._button.identifier, \n                            this.parentHierarchy, \n                            event, \n                            this.originalData, \n                            this.context, \n                            null);\n\n    if (this._button['groupIdentifier'] == ReservedButton.CLEAR_FILTER_FIELD) {\n      delete action.data[action.action];\n      this.addSearchParamsInUrl(action.data);\n    } else  {\n      this.onIconClick.emit(action);\n    }\n  }\n  \n  public addSearchParamsInUrl(filterData: any) {\n    const queryParams: Params = { filter: SecurityUtils.encrypt(filterData) };\n\n    this.router.navigate(\n      [],\n      {\n        relativeTo: this.route,\n        queryParams: queryParams,\n        queryParamsHandling: 'merge', // remove to replace all query params by provided\n        skipLocationChange: false,\n        replaceUrl: true\n      });\n  }\n\n  setButtonEnable(): void {\n    let isButtonDisabled: boolean = false;\n\n    if (this.form) {\n      isButtonDisabled = !this.form.valid;\n    }\n    if (this.form && this.form.disabled) {\n      isButtonDisabled = false;\n    }\n    if (this._button.identifier == ReservedButton.SEARCH || this._button.identifier == ReservedButton.CANCEL || this._button.identifier == ReservedButton.RESET || this._button.identifier == ReservedButton.ADD_FIELD || this._button.identifier == ReservedButton.REMOVE_FIELD || this._button.alwaysEnable == true) {\n      isButtonDisabled = false;\n    }\n    if (this.disabled) {\n      isButtonDisabled = this.disabled;\n    }\n    this.isButtonDisabled = isButtonDisabled;\n  }\n\n  setOnlyIconDisplay(): void {\n    this.isDisplayOnlyIcon = this._button && this._button.onlyIcon && !StringUtils.isEmpty(this._button.icon) ? true : false;\n  }\n\n  setIconDisplay(): void {\n    this.hasIconDisplay = this._button && this._button.icon ? true : false;\n  }\n\n  setFlatButton(): void {\n    this.isFlatButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.FLAT && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setGhostButton(): void {\n    this.isGhostButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.GHOST && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setRaisedButton(): void {\n    this.isRaisedButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.RAISED && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setStrokedButton(): void {\n    this.isStrokedButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.STROKED && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setFabButton(): void {\n    this.isFabButton = this._button && ButtonUtils.instanceOfButton(this._button) ? (<Button>this._button).type == ButtonType.FAB && !this.isGroupButton && !this.isLink : false;\n  }\n\n  setChip(): void {\n    this.isChip = this._button && ButtonUtils.instanceOfChipButton(this._button) && !StringUtils.isEmpty((<ButtonGroup>this._button).groupIdentifier) ? true : false;\n  }\n\n  setLink(): void {\n    this.isLink = this._button && !StringUtils.isEmpty(this.label) ? !CollectionUtils.isEmpty((<Button>this._button).routerLink) : false;\n    this.routerLink = (<Button>this._button).routerLink;\n  }\n\n  setGroupButton(): void {\n    this.isGroupButton = this._button && ButtonUtils.instanceOfButtonGroup(this._button) && !StringUtils.isEmpty((<ButtonGroup>this._button).groupIdentifier) ? true : false;\n  }\n\n  setMenuButton(): void {\n    this.isMenuButton = this._button && ButtonUtils.instanceOfHoverButton(this._button) ? true : false;\n  }\n\n  ngOnDestroy() {\n    if (this.formSubscription) {\n      this.formSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Button, ObjectTree, ButtonGroup, HoverButton, Badge, ButtonType } from '../../model';\nimport { ButtonGroupList, HoverButtonList } from '../../model/button-group.model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { ObjectUtils, ButtonUtils, StringUtils, CollectionUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n//export { Button, ObjectTree, ButtonGroup, HoverButton, Badge, ButtonType } from '../../model';\n\n@Component({\n  selector: 'mx-button-group',\n  templateUrl: './button-group.component.html',\n  styleUrls: ['./button-group.component.scss', '../button/button.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ButtonGroupComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() formDisplayMode: FormDiaplyMode;\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() _buttons: Array<Button | ButtonGroup | HoverButton>;\n\n  get buttons(): Array<Button | ButtonGroup | HoverButton> {\n    return this._buttons;\n  }\n  @Input()\n  set buttons(_buttons: Array<Button | ButtonGroup | HoverButton>) {\n    if (!(_buttons instanceof Array)) {\n      let btns = new Array<Button | ButtonGroup | HoverButton>();\n      btns.push(_buttons);\n      _buttons = btns;\n    }\n    this._buttons = _buttons;\n\n    this.getButtonList();\n    this.getButtonType();\n\n    this.displayDesktopDD = this.hasMobileButton('showOnDesktop');\n    this.displayTabletDD = this.hasMobileButton('showOnTablet');\n    this.displayMobileDD = this.hasMobileButton('showOnMobile');\n\n    if (this.displayDesktopDD || this.displayMobileDD || this.displayTabletDD)  {\n      this.changeButtonTypeToGhost();\n    }\n  }\n\n  @Input() context: any;\n  @Input() originalData: any;\n  @Input() buttonRoute: Array<string>;\n  @Input() parentHierarchy: ObjectTree;\n  @Input() disabled: boolean;\n  @Output() onClick = new EventEmitter();\n  @Output() onIconClick = new EventEmitter();\n\n  buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList> = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n  buttonListsType: Array<string> = new Array<string>();\n\n  displayDesktopDD: boolean = false;\n  displayTabletDD: boolean = false;\n  displayMobileDD: boolean = false;\n  hoverButtonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList> = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n\n  constructor(private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit(): void {\n    // this.getButtonList();\n    // this.getButtonType();\n  }\n\n  hasMobileButton(displayIn: string): boolean {\n    let hasButtonsForDropdown: boolean = false;\n\n    if (!CollectionUtils.isEmpty(this.buttonLists)) {\n      this.buttonLists.forEach(buttons => {\n        if (!CollectionUtils.isEmpty(buttons) && buttons instanceof Array) {\n          (<Array<Button>>buttons).forEach(button => {\n            if (button['showOnDesktop'] == null && button['showOnTablet'] == null && button['showOnMobile'] == null)  {\n              button['showOnDesktop'] = true;\n              button['showOnTablet'] = true;\n              button['showOnMobile'] = true; \n            }\n\n            if (button[displayIn]) {\n              hasButtonsForDropdown = true;\n            }\n          })\n        }\n      });\n    }\n\n    return hasButtonsForDropdown;\n  }\n \n  changeButtonTypeToGhost() {\n    this.hoverButtonLists = JSON.parse(JSON.stringify(this.buttonLists));\n\n    if (!CollectionUtils.isEmpty(this.hoverButtonLists)) {\n      this.hoverButtonLists.forEach(buttons => {\n        if (!CollectionUtils.isEmpty(buttons) && buttons instanceof Array) {\n          (<Array<Button>>buttons).forEach(button => {\n            button.type = ButtonType.GHOST;\n          })\n        }\n      });\n    }\n  }\n\n  getButtonList() {\n    this.buttonLists = new Array<Array<Button> | ButtonGroupList | HoverButtonList>();\n    let buttonArray: Array<Array<Button>> = new Array<Array<Button>>();\n    let buttonArrayIndex: number = 0;\n\n    if (this._buttons) {\n      for (let index = 0; index < this._buttons.length; index++) {\n        if (ButtonUtils.instanceOfButton(this._buttons[index])) {\n          if (ObjectUtils.isEmpty(buttonArray[buttonArrayIndex])) {\n            buttonArray[buttonArrayIndex] = new Array<Button>();\n\n            this.buttonLists.push(buttonArray[buttonArrayIndex]);\n          }\n\n          buttonArray[buttonArrayIndex].push(<Button>this._buttons[index]);\n        }\n        if (ButtonUtils.instanceOfButtonGroup(this._buttons[index]) || ButtonUtils.instanceOfChipButton(this._buttons[index])) {\n          let bgAdded = this.getGroupButton((<ButtonGroup>this._buttons[index]).groupIdentifier, this.buttonLists)\n\n          if (bgAdded) {\n            buttonArrayIndex++;\n          }\n        }\n      }\n\n      let hoverButton: HoverButtonList = this.getHoverButtons();\n      if (hoverButton && hoverButton.hoverButtons && hoverButton.hoverButtons.length > 0) {\n        this.buttonLists.push(hoverButton);\n        buttonArrayIndex++;\n      }\n    }\n  }\n\n  isGroupAdded(groupIdentifier: string, buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList>): boolean {\n    let groupAdded: boolean = false;\n\n    if (buttonLists) {\n      groupAdded = buttonLists.filter(buttonList => buttonList && (<ButtonGroupList>buttonList).groupIdentifier == groupIdentifier).length > 0;\n    }\n\n    return groupAdded;\n  }\n\n  getGroupButton(groupIdentifier: string, buttonLists: Array<Array<Button> | ButtonGroupList | HoverButtonList>): boolean {\n    let bgAdded: boolean = false;\n    let gButtons: Array<ButtonGroup> = new Array<ButtonGroup>();\n\n    if (this._buttons && this.isGroupAdded(groupIdentifier, buttonLists) == false) {\n      gButtons = this._buttons.filter(button => (<ButtonGroup>button).groupIdentifier == groupIdentifier).map(button => {\n        button.width = '100';\n        return <ButtonGroup>button;\n      });\n\n      // To check if any button is fullwidth\n      let width = gButtons.filter(gButton => gButton.fullWidth == true).length > 0 ? '100' : 'auto';\n      let buttonWidth: any = 'auto';\n      if (width != 'auto') {\n        buttonWidth = (+width / gButtons.length);\n      }\n\n      buttonLists.push({\n        groupIdentifier: groupIdentifier,\n        width: width,\n        buttonWidth: buttonWidth,\n        groupButtons: gButtons\n      });\n      bgAdded = true;\n    }\n\n    return bgAdded;\n  }\n\n  getHoverButtons(): HoverButtonList {\n    let hoverButtons: Array<HoverButton> = new Array<HoverButton>();\n    let groupIdentifier: string;\n    let groupLabel: string;\n    let groupIcon: string;\n    let badge: Badge;\n    let width: string = 'auto';\n\n    if (this._buttons) {\n      this._buttons.filter(button => ButtonUtils.instanceOfHoverButton(button)).forEach(button => {\n        if (StringUtils.isEmpty(groupIdentifier)) {\n          groupIdentifier = (<HoverButton>button).groupIdentifier;\n        }\n        if (StringUtils.isEmpty(groupLabel)) {\n          groupLabel = (<HoverButton>button).groupLabel;\n        }\n        if (StringUtils.isEmpty(groupIcon)) {\n          groupIcon = (<HoverButton>button).groupIcon;\n        }\n        if (CollectionUtils.isEmpty(badge)) {\n          badge = (<HoverButton>button).badge;\n        }\n        if ((<HoverButton>button).fullWidth) {\n          width = '100';\n          button.width = '100';\n        }\n\n        hoverButtons.push(<HoverButton>button);\n      });\n    }\n\n    return { groupIdentifier: groupIdentifier, groupLabel: groupLabel, groupIcon: groupIcon, badge: badge, width: width, hoverButtons: hoverButtons };\n  }\n\n  getButtonType(): void {\n    this.buttonListsType = new Array<string>();\n\n    if (this.buttonLists && this.buttonLists.length > 0) {\n      for (let buttonList of this.buttonLists) {\n        let buttonType: string = \"\";\n        if (this.isButtonGroup(buttonList)) {\n          buttonType = 'ButtonGroup';\n        } else if (this.isChipGroup(buttonList)) {\n          buttonType = 'ChipGroup';\n        } else if (this.isButtonHover(buttonList)) {\n          buttonType = 'ButtonHover';\n        } else if (this.isButtonArray(buttonList)) {\n          buttonType = 'ButtonArray';\n        }\n\n        this.buttonListsType.push(buttonType);\n      }\n    }\n  }\n\n  isButtonGroup(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    let isButtonGroup: boolean = false;\n\n    if (buttonList && (<ButtonGroupList>buttonList).groupButtons && (<ButtonGroupList>buttonList).groupButtons.length > 0 && !StringUtils.isEmpty((<ButtonGroupList>buttonList).groupIdentifier)) {\n      isButtonGroup = (<ButtonGroupList>buttonList).groupButtons.filter(button => ButtonUtils.instanceOfButtonGroup(button)).length > 0;\n    }\n\n    return isButtonGroup;\n  }\n\n  isChipGroup(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    let isChipGroup: boolean = false;\n\n    if (buttonList && (<ButtonGroupList>buttonList).groupButtons && (<ButtonGroupList>buttonList).groupButtons.length > 0 && !StringUtils.isEmpty((<ButtonGroupList>buttonList).groupIdentifier)) {\n      isChipGroup = (<ButtonGroupList>buttonList).groupButtons.filter(button => ButtonUtils.instanceOfChipButton(button)).length > 0;\n\n      if (isChipGroup) {\n        (<ButtonGroupList>buttonList).groupButtons.forEach(button => ButtonUtils.instanceOfChipButton(button));\n      }\n    }\n\n    return isChipGroup;\n  }\n\n  isButtonHover(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    return buttonList && (<HoverButtonList>buttonList).hoverButtons && (<HoverButtonList>buttonList).hoverButtons.length > 0\n  }\n\n  isButtonArray(buttonList: Array<Button> | ButtonGroupList | HoverButtonList): boolean {\n    return buttonList instanceof Array;\n  }\n\n  click(event: any) {\n    this.onClick.emit(event);\n  }\n\n  iconClick(event: any) {\n    this.onIconClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { CrudHeader, ActionPage, CrudTab, CrudWidget, CrudWidgetType, CrudFormData, CrudFormTabData, CrudForm, CrudStyle } from '../../model';\nimport { Badge, ButtonGroup, HoverButton, Button, ButtonColor, ButtonType, ButtonSize, Action } from '../../../button/model';\nimport { CollectionUtils, DependentUtils, FormUtils } from '../../../utility';\nimport { Form, FormDiaplyMode } from '../../../form/model';\nimport { Wizard } from '../../../wizard/model';\nimport { List } from '../../../list/model';\nimport { FieldChange, KeyMap } from '../../../field/model';\nimport { Ability } from '@casl/ability';\nimport { AbilityUtils } from '../../../utility/ability.utility';\n\n@Component({\n  selector: 'mx-crud-form',\n  templateUrl: './crud-form.component.html',\n  styleUrls: ['./crud-form.component.scss']\n})\nexport class CrudFormComponent implements OnInit {\n  @Input() identifier: string;\n  @Input() header: CrudHeader;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() actionPages: Array<ActionPage>;\n  @Input() onAction: string;\n  @Input() displayMode: FormDiaplyMode;\n\n  @Input() form: CrudForm;\n\n  @Input() reset: boolean;\n  @Input() configData: CrudFormData;\n  @Input() keyMap: Array<KeyMap>;\n\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onSortClick = new EventEmitter();\n  @Output() onPageClick = new EventEmitter();\n\n  title: string;\n  backButton: Button;\n  formsConfigToDisplay: Array<Form | List | Wizard> = new Array<Form | List | Wizard>();\n  rowsInTab: Array<Array<Array<CrudWidget>>> = new Array<Array<Array<CrudWidget>>>();\n\n  badges: Array<Badge>;\n  pageBackRoute: Array<string>;\n  record: any;\n\n  addWidget: Button;\n  formTabLength: number = 0;\n  filteredTabs: Array<CrudTab> = new Array<CrudTab>();\n\n  constructor(private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    //    this.filterForms();\n\n    this.drawTabs();\n\n    this.setConfigAsPerTab();\n\n    this.setFormTitle();\n\n    this.addWidget = this.addWidgetButton(\"addWidget\", \"Add\", \"add\", ButtonColor.PRIMARY);\n  }\n\n  setFormTitle(): void {\n    if (this.form && !CollectionUtils.isEmpty(this.form.tabs)) {\n      this.form.tabs.forEach(tab => {\n        if (!CollectionUtils.isEmpty(tab.widgets)) {\n          tab.widgets.forEach(widget => {\n            if ((<Form>widget.widget) && (<Form>widget.widget).displayMode) {\n              let displayMode = (<Form>widget.widget).displayMode\n              if (this.displayMode) {\n                displayMode = this.displayMode;\n              }\n\n              this.setFormHeader(this.header, displayMode);\n            }\n          })\n        }\n      });\n    }\n  }\n\n  setFormHeader(header: CrudHeader, displayMode: FormDiaplyMode): void {\n    let title: string = header.title;\n\n    switch (displayMode) {\n      case FormDiaplyMode.SEARCH: {\n        title = header.searchModeTitle ? header.searchModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.ADD: {\n        title = header.addModeTitle ? header.addModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.EDIT: {\n        title = header.editModeTitle ? header.editModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.VIEW: {\n        title = header.viewModeTitle ? header.viewModeTitle : title;\n        break;\n      }\n      default: {\n        title = header.title;\n      }\n    }\n\n    this.title = title;\n  }\n\n  setConfigAsPerTab(tabIdentifier?: string): void {\n    if (this.configData) {\n      this.badges = this.configData.badges;\n      this.pageBackRoute = this.configData.pageBackRoute;\n      this.record = this.configData.record;\n\n      if (this.configData.configPerTabs) {\n        let tabIndex = 0;\n        this.configData.configPerTabs.forEach((tabConfigData: CrudFormTabData, tabKey: string) => {\n          if ((tabKey == tabIdentifier || (tabIndex == 0 && tabIdentifier == null)) && tabConfigData) {\n            if (tabConfigData.badges) {\n              this.badges = tabConfigData.badges;\n            }\n            if (tabConfigData.pageBackRoute) {\n              this.pageBackRoute = tabConfigData.pageBackRoute;\n            }\n            if (tabConfigData.record) {\n              this.record = this.configData.record;\n            }\n          }\n          tabIndex++;\n        })\n      }\n    }\n  }\n\n  getTabIdentifier(tabTitle: string): string {\n    let tabIdentifier = '';\n    if (this.form && this.form.tabs) {\n      for (let tab of this.form.tabs) {\n        if (tab.label == tabTitle) {\n          tabIdentifier = tab.identifier;\n          break;\n        }\n      }\n    }\n\n    return tabIdentifier;\n  }\n\n  drawTabs(): void {\n    if (this.form && this.form.tabs && this.form.tabs.length > 0) {\n      let widgetIdentifiers: Array<string> = null;\n\n      if (!CollectionUtils.isEmpty(this.actionPages)) {\n        for (let actionPage of this.actionPages) {\n          if (actionPage.buttonIdentifier == this.onAction) {\n            widgetIdentifiers = actionPage.associatedWidgetIdentifiers;\n          }\n        }\n      }\n\n      for (let tIndex = 0; tIndex < this.form.tabs.length; tIndex++) {\n        if (\n          this.form.tabs[tIndex] &&\n          (this.form.tabs[tIndex].permission == null || (this.form.tabs[tIndex].permission && (this.ability.can(this.form.tabs[tIndex].permission['action'], this.form.tabs[tIndex].permission['subject']))))\n        ) {\n          let tabRows: Array<Array<CrudWidget>> = this.drawTab(tIndex, widgetIdentifiers);\n          if (!CollectionUtils.isEmpty(tabRows)) {\n            this.rowsInTab.push(tabRows);\n\n            this.formTabLength++;\n            this.filteredTabs.push(this.form.tabs[tIndex]);\n          }\n        }\n      }\n    }\n  }\n\n  drawTab(tabIndex: number, widgetIdentifiers: Array<string>): Array<Array<CrudWidget>> {\n    let rows: Array<Array<CrudWidget>> = new Array<Array<CrudWidget>>();\n    let rIndex = 0;\n\n    if (this.form && this.form.tabs && this.form.tabs.length > 0) {\n      for (let tIndex = 0; tIndex < this.form.tabs.length; tIndex++) {\n        if (this.form.tabs[tIndex].widgets && this.form.tabs[tIndex].widgets.length > 0 && tIndex == tabIndex) {\n          for (let widget of this.form.tabs[tIndex].widgets) {\n            if (\n              widget &&\n              (\n                widget.permission == null ||\n                (\n                  widget.permission && (this.ability.can(widget.permission['action'], widget.permission['subject']))\n                )\n              ) &&\n              (\n                widgetIdentifiers == null ||\n                widgetIdentifiers.includes((<Form>widget.widget).identifier)\n              )) {\n              if (CollectionUtils.isEmpty(rows[rIndex])) {\n                rows[rIndex] = new Array<CrudWidget>();\n              }\n\n              let colCount = 0;\n              rows[rIndex].forEach(row => colCount += row.colSpan);\n\n              if (colCount < 2) {\n                rows[rIndex].push(widget);\n              } else {\n                rIndex++;\n                rows[rIndex] = new Array<CrudWidget>();\n                rows[rIndex].push(widget);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    console.log(rows);\n    return rows;\n  }\n\n  displayWidget(widget: CrudWidget, supportingRecord: any, record: any): boolean {\n    return DependentUtils.displayDependencyField(widget.dependentOnFields, supportingRecord, record);\n  }\n\n  // filterForms() {\n  //   let formIdentifiers: Array<string>;\n  //   //    let mappedFormDisplayMode: FormDiaplyMode;\n\n  //   if (this.actionPages && this.actions) {\n  //     for (let actionPage of this.actionPages) {\n  //       for (let action of this.actions) {\n  //         if (actionPage.buttonIdentifier == action.identifier) {\n  //           formIdentifiers = actionPage.associatedFormIdentifiers;\n  //           //            mappedFormDisplayMode = actionPage.formDisplayMode;\n  //         }\n  //       }\n  //     }\n\n  //     if (this.form && this.form.tabs && !CollectionUtils.isEmpty(formIdentifiers)) {\n  //       for (let tab of this.form.tabs) {\n  //         for (let widget of tab.widgets) {\n  //           if (\n  //             formIdentifiers.indexOf((<Form>widget.widget).identifier) > -1 &&\n  //             (this.displayMode == null || this.displayMode == (<Form>widget.widget).displayMode)\n  //           ) {\n  //             widget.widget['display'] = true;\n  //           }\n  //         }\n  //       }\n  //     } else {\n  //       this.form.tabs.forEach(tab => tab.widgets.forEach(widget => widget.widget['display'] = true));\n  //     }\n  //   } else {\n  //     this.form.tabs.forEach(tab => tab.widgets.forEach(widget => widget.widget['display'] = true));\n  //   }\n\n  //   this.form.tabs.forEach(tab => {\n  //     let display: boolean = false;\n\n  //     tab.widgets.forEach(widget => {\n  //       if (widget.widget['display']) {\n  //         display = true;\n  //       }\n  //       tab['display'] = display;\n  //     });\n\n  //     if (tab['display']) {\n  //       this.formTabLength++;\n  //       this.filteredTabs.push(tab);\n  //     }\n  //   });\n  // }\n\n  addWidgetButton(identifier: string, label: string, icon: string, color: ButtonColor): Button {\n    let buttonConfig: Button = {\n      identifier: identifier,\n      type: ButtonType.GHOST,\n      label: label,\n      color: color,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      onlyIcon: false,\n      alwaysEnable: true\n    }\n\n    return buttonConfig;\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(action: Action) {\n    console.log(action);\n    if (action.action == \"addWidget\") {\n      if (this.record[action.sourceIdentifier] && this.record[action.sourceIdentifier] instanceof Array) {\n        (<Array<any>>this.record[action.sourceIdentifier]).push({});\n      } else {\n        this.record[action.sourceIdentifier] = new Array<any>();\n        this.record[action.sourceIdentifier].push({});\n      }\n    }\n    this.onButtonClick.emit(action);\n  }\n\n  onTabChange(event: any) {\n    console.log(event);\n\n    this.setConfigAsPerTab(this.getTabIdentifier(event.tab.textLabel));\n  }\n\n  onAccordianChange(event) {\n    console.log(event);\n  }\n\n  onSort(event: any) {\n    console.log(event);\n    this.onSortClick.emit(event);\n  }\n\n  onPage(event: any) {\n    console.log(event);\n    this.onPageClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, Inject, OnDestroy } from '@angular/core';\nimport { Record, ListType, ListHeader } from '../../../list/model';\nimport { Button, HoverButton, ButtonGroup, ButtonColor, ButtonType, ButtonSize, Badge, IconPosition, Action, ReservedButton } from '../../../button/model';\nimport { KeyMap, FieldChange } from '../../../field/model';\nimport { Subscription } from 'rxjs';\nimport { Ability, RawRule } from '@casl/ability';\nimport { CrudHeader, CrudList, CrudSearch, SearchDisplayType, ActionPage, CrudListData, CrudListTabData, CrudListDisplayType, CrudStyle } from '../../model';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatBottomSheetRef, MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { AbilityUtils, StringUtils, CollectionUtils } from '../../../utility';\n\n@Component({\n  selector: 'mx-crud-list',\n  templateUrl: './crud-list.component.html',\n  styleUrls: ['./crud-list.component.scss']\n})\nexport class CrudListComponent implements OnInit, OnDestroy {\n  @Input() identifier: string;\n  @Input() header: CrudHeader;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() actionPages: Array<ActionPage>;\n\n  @Input() quickLinks: Array<Button | HoverButton | ButtonGroup>;\n  @Input() searchConfig: CrudSearch;\n  @Input() listConfig: CrudList;\n\n  @Input() formReset: boolean;\n\n  @Input() originalData: any;\n  @Input() _configData: CrudListData;\n  get configData(): CrudListData {\n    return this._configData;\n  }\n  @Input()\n  set configData(_configData: CrudListData) {\n    this._configData = _configData;\n    this.setConfigAsPerTab();\n  }\n\n  @Input() keyMap: Array<KeyMap>;\n\n  @Input() listReset: boolean;\n\n  _expanded: boolean = false;\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  @Input()\n  set expanded(_expanded: boolean) {\n    this._expanded = _expanded;\n  }\n  @Input()\n  expandRowIndex: number;\n\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onButtonIconClick = new EventEmitter();\n\n  @Output() onSortClick = new EventEmitter();\n  @Output() onPageClick = new EventEmitter();\n  @Output() onTabClick = new EventEmitter();\n\n  title: string;\n  showSearchForm: boolean = false;\n  searchButton: Button;\n  searchModalButton: Button;\n  listHeaders: Array<ListHeader> = new Array<ListHeader>();\n\n  badges: Array<Badge>;\n  pageBackRoute: Array<string>;\n  records: Array<Record>;\n  searchData: any;\n  searchOnFieldsCount: number = 0;\n  searchOnFieldsButtons: Array<Button> = new Array<Button>();\n\n  buttonSubscriber: Subscription;\n  fieldSubscriber: Subscription;\n  formSubscriber: Subscription;\n  dialogRefSubscriber: Subscription;\n\n  constructor(private _bottomSheet: MatBottomSheet, private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.searchButton = this.setSearchButton('searchButton', 'Search', 'search');\n    this.searchModalButton = this.setSearchButton('searchCloseButton', 'Close', 'close');\n    this.displaySearchForm();\n\n    this.setListHeaders();\n    this.setCrudHeader();\n\n    if (this.searchConfig && this.searchConfig.displayType != SearchDisplayType.ABOVE_LIST) {\n      this.searchConfig.form.displayInColumns = 1;\n    }\n    this.setConfigAsPerTab(); \n  }\n\n  setConfigAsPerTab(tabIdentifier?: string): void {\n    if (this._configData) {\n      this.badges = this._configData.badges;\n      this.pageBackRoute = this._configData.pageBackRoute;\n\n      this.records = this._configData.records;\n\n      this.searchData = this._configData.searchData;\n\n      this.searchOnFieldsCount = 0;\n      this.searchOnFieldsButtons = new Array<Button | ButtonGroup>();\n      if (this.searchData && !CollectionUtils.isEmpty(this.searchData)) {\n        for (let cnt = 0; cnt < Object.keys(this.searchData).length; cnt++) {\n          if (!StringUtils.isEmpty(this.searchData[Object.keys(this.searchData)[cnt]])) {\n            this.searchOnFieldsCount++; \n\n            let filterButton: Button | ButtonGroup = this.setSelectedFilterButton(Object.keys(this.searchData)[cnt], this.searchData[Object.keys(this.searchData)[cnt]]);\n            this.searchOnFieldsButtons.push(filterButton);\n          }\n        }\n      }\n\n      if (this._configData.configPerTabs) {\n        let tabIndex = 0;\n        this._configData.configPerTabs.forEach((tabConfigData: CrudListTabData, tabKey: string) => {\n          if ((tabKey == tabIdentifier || (tabIndex == 0 && tabIdentifier == null)) && tabConfigData) {\n            if (tabConfigData.badges) {\n              this.badges = tabConfigData.badges;\n            }\n            if (tabConfigData.pageBackRoute) {\n              this.pageBackRoute = tabConfigData.pageBackRoute;\n            }\n            if (tabConfigData.records && tabConfigData.records.length > 0) {\n              this.records = this._configData.records;\n            }\n          }\n          tabIndex++;\n        })\n      }\n    }\n  }\n\n  getTabIdentifier(tabTitle: string): string {\n    let tabIdentifier = '';\n    if (this.listConfig && this.listConfig.displayType == CrudListDisplayType.TAB) {\n      for (let index = 0; index < this.listConfig.lists.length; index++) {\n        if (this.listHeaders[index].title == tabTitle) {\n          tabIdentifier = this.listConfig.lists[index].identifier;\n          break;\n        }\n      }\n    }\n\n    return tabIdentifier;\n  }\n\n  setListHeaders(): void {\n    if (this.listConfig.lists) {\n      for (let index = 0; index < this.listConfig.lists.length; index++) {\n        this.listHeaders.push(this.listConfig.lists[index].header);\n        // this.listConfig.lists[index].header = \"\";\n      }\n    }\n  }\n\n  setCrudHeader(): void {\n    let title = \"\";\n\n    if (this.header) {\n      title = this.header.title;\n    }\n\n    if (this.listConfig.lists && this.listConfig.lists.length == 1 && this.listConfig.lists[0].header && this.listConfig.lists[0].header.title) {\n      title = this.listConfig.lists[0].header.title;\n\n      this.listConfig.lists[0].header.title = \"\";\n    }\n    this.title = title;\n  }\n\n  displaySearchForm(): void {\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists.length > 0) {\n      for (let lConfig of this.listConfig.lists) {\n        if (lConfig.listType == ListType.DYNAMIC && this.searchConfig) {\n          this.showSearchForm = true;\n          break;\n        }\n      }\n    }\n  }\n\n  setSearchButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n    };\n  }\n\n  setSelectedFilterButton(identifier: string, label: string): Button | ButtonGroup {\n    return {\n      identifier: identifier,\n      groupIdentifier: ReservedButton.CLEAR_FILTER_FIELD,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.TINY,\n      icon: \"close\",\n      iconPosition: IconPosition.RIGHT,\n      type: ButtonType.STROKED,\n    };\n  }\n\n  @ViewChild('sidenav') sidenav: MatSidenav;\n  close() {\n    this.sidenav.close();\n  }\n\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n\n  buttonIconClick(event: any)  {\n    this.onButtonIconClick.emit(event);\n  }\n\n  onSort(event: any) {\n    console.log(event);\n    this.onSortClick.emit(event);\n  }\n\n  onPage(event: any) {\n    console.log(event);\n    this.onPageClick.emit(event);\n  }\n\n  onAccordianChange(event) {\n    console.log(event);\n  }\n\n  onTabChange(event: any) {\n    console.log(event);\n\n    this.setConfigAsPerTab(this.getTabIdentifier(event.tab.textLabel));\n  }\n\n  openBottomSheet(): void {\n    let dialogRef = this._bottomSheet.open(BottomSearchSheet, {\n      data: { searchConfig: this.searchConfig, searchData: this.searchData, reset: this.formReset },\n    });\n\n    this.buttonSubscriber = dialogRef.instance.onButtonClick.subscribe(event => this.buttonClick(event));\n    this.fieldSubscriber = dialogRef.instance.onFieldChange.subscribe(event => this.fieldChange(event));\n    this.formSubscriber = dialogRef.instance.onFormChange.subscribe(event => this.formChange(event));\n\n    this.dialogRefSubscriber = dialogRef.afterDismissed().subscribe(() => {\n      this.bottomUnsubscribe();\n    });\n  }\n\n  ngOnDestroy() {\n    this.bottomUnsubscribe();\n    if (this.dialogRefSubscriber) {\n      this.dialogRefSubscriber.unsubscribe();\n    }\n  }\n\n  bottomUnsubscribe() {\n    if (this.buttonSubscriber) {\n      this.buttonSubscriber.unsubscribe();\n    }\n    if (this.fieldSubscriber) {\n      this.fieldSubscriber.unsubscribe();\n    }\n    if (this.formSubscriber) {\n      this.formSubscriber.unsubscribe();\n    }\n  }\n}\n\n@Component({\n  selector: 'bottom-search-sheet',\n  templateUrl: 'bottom-search-sheet.html',\n  styleUrls: ['./bottom-search-sheet.scss']\n})\nexport class BottomSearchSheet {\n  onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  constructor(private _bottomSheetRef: MatBottomSheetRef<BottomSearchSheet>, @Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {\n    console.log(this.data)\n  }\n\n  openLink(event: MouseEvent): void {\n    this._bottomSheetRef.dismiss();\n    event.preventDefault();\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n\n}","import { HttpClient } from '@angular/common/http';\nimport { Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { DisplayMode, FileField, UploadDeleteFunc, UploadFile, UploadFileType, UploadFunc } from '../../model';\n\n@Component({\n    selector: 'mx-file-uploader',\n    templateUrl: './file-uploader.component.html',\n    styleUrls: ['./file-uploader.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FileUploaderComponent implements OnInit {\n    @Input() field: FileField = null;\n    @Input() isFieldDisabled: boolean = false;\n    @ViewChild(\"fileInput\", { static: false }) fileInput: ElementRef;\n    @Input() disabled: boolean;\n    param = 'file';\n    fileList: Array<UploadFile> = [];\n\n    multiple: boolean = false;\n\n    showLess: number;\n\n    browseButtonText: string;\n    uploadButtonText: string;\n\n    fileType: string = \"*.*\";\n    fileIcon: string = \"\"; \n\n    hideDownloadButton: boolean = false;\n    hideDeleteFileButton: boolean = false;\n    hideUploadButton: boolean = false;\n    hideFileIconButton: boolean = false;\n    hideDeleteAllButton: boolean = false;\n    hideActionStrip: boolean = false;\n\n    isUploaded: boolean = false;\n    isUploadingInProgress: boolean = false;\n    isFileImageType: boolean = false;\n\n    constructor(private _http: HttpClient) { }\n\n    ngOnInit() {\n        var defaultUploadBtnText = this.field.multiple ? \"Upload Files\" : \"Upload File\";\n        this.multiple = this.field.multiple;\n        this.uploadButtonText = this.field.uploadButtonText || defaultUploadBtnText;\n        this.setFileTypeAndIcon(this.field.fileType);\n        this.fileList = (<Array<UploadFile>>this.field.value) || [];\n\n        if (this.field.displayMode == DisplayMode.LABEL) {\n            this.hideDeleteFileButton = true;\n            this.hideUploadButton = true;\n            this.hideFileIconButton = true;\n            } else {\n            this.hideDeleteFileButton = this.field.hideDeleteFileButton !== undefined ? this.field.hideDeleteFileButton : false;\n            this.hideUploadButton = this.field.hideUploadButton !== undefined ? this.field.hideUploadButton : false;\n            this.hideFileIconButton = this.field.hideFileIconButton !== undefined ? this.field.hideFileIconButton : false;\n        }\n\n        this.hideDownloadButton = this.field.hideDownloadButton !== undefined ? this.field.hideDownloadButton : false;\n        this.showLess = this.field.showLess || this.fileList.length;\n        this.setFieldDisabled();\n        this.setHideDeleteAllButton();\n        this.setHideActionStrip();\n    }\n\n    private setFieldDisabled() {\n        if (this.isFieldDisabled) {\n            this.hideDeleteAllButton = true;\n            this.hideDeleteFileButton = true;\n            this.hideUploadButton = true;\n        }\n    }\n\n    private setHideDeleteAllButton() {\n        if (this.field.hideDeleteAllButton === undefined) {\n            this.hideDeleteAllButton = false;\n        }\n        if (this.fileList.length <= 1 || this.field.displayMode == DisplayMode.LABEL) {\n            this.hideDeleteAllButton = true;\n        }\n    }\n\n    private setHideActionStrip() {\n        if (this.hideDeleteAllButton && this.hideUploadButton && this.showLess <= this.fileList.length) {\n            this.hideActionStrip = true;\n        }\n    }\n\n    private setFileTypeAndIcon = (type: UploadFileType): void => {\n        switch (type) {\n            case UploadFileType.PDF:\n                this.fileType = \".pdf\";\n                this.fileIcon = \"picture_as_pdf\";\n                break;\n            case UploadFileType.WORD:\n                this.fileType = \".doc, .docx\";\n                this.fileIcon = \"attach_file\";\n                break;\n            case UploadFileType.IMAGE:\n                this.fileType = this.getImageFileType();\n                this.fileIcon = \"image\";\n                this.isFileImageType = true;\n                break;\n            case UploadFileType.VIDEO:\n                this.fileType = \"video/*\";\n                this.fileIcon = \"video_call\";\n                break;\n            case UploadFileType.EXCEL:\n                this.fileType = \".xlsx, .xls, .csv\";\n                this.fileIcon = \"attach_file\";\n                break;\n            default:\n                this.fileType = \".*\";\n                this.fileIcon = \"attach_file\";\n                break;\n        }\n    }\n\n    onUploadClick = (): void => {\n        const fileInput = this.fileInput.nativeElement;\n        fileInput.onchange = () => {\n            this.fileList = [];\n            this.isUploadingInProgress = true;\n            console.log(fileInput.files);\n            for (let index = 0; index < fileInput.files.length; index++) {\n                const file = fileInput.files[index];\n                this.fileList.push(<UploadFile>{\n                    data: file,\n                    size: file.size,\n                    name: file.name\n                });\n            }\n            this.field.onUploadClick(this.fileList).subscribe(result => {\n                this.isUploadingInProgress = false;\n                this.fileList = result;\n            });\n        };\n        fileInput.click();\n    }\n\n    onDeleteAllClick = (): void => {\n        if (this.isFunctionDefined(this.field.onDeleteAllClick)) {\n            this.isUploadingInProgress = true;\n            this.field.onDeleteAllClick(this.fileList).subscribe(result => {\n                this.isUploadingInProgress = false;\n                if (result) {\n                    this.fileList = [];\n                }\n            });\n        }\n    }\n\n    onDeleteFileClick = (delFile: UploadFile): void => {\n        if (this.isFunctionDefined(this.field.onDeleteFileClick)) {\n            this.isUploadingInProgress = true;\n            this.field.onDeleteFileClick(delFile).subscribe(result => {\n                this.isUploadingInProgress = false;\n                if (result) {\n                    this.fileList = this.fileList.filter(file => file !== delFile);\n                }\n            });\n        }\n    }\n\n    onShowAllItems = () => {\n        this.showLess = this.fileList.length\n    }\n\n    isFunctionDefined = (func: UploadFunc | UploadDeleteFunc) => {\n        return typeof func == 'function';\n    }\n\n    private getImageFileType = (): string => {\n        if (this.field.subFileType) {\n            return this.field.subFileType.map(x => 'image/' + x.toLowerCase()).join(',');\n        } else {\n            return \"image/*\";\n        }\n    }\n}","export const quillConfiguration = {\n    formula: true,\n    toolbar: [\n//      [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      [{ 'font': [] }],\n      \n      ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n      ['blockquote'],\n//      ['blockquote', 'code-block'],\n//      [{ 'header': 1 }, { 'header': 2 }],               // custom button values\n      [{ 'align': [] }, { 'indent': '-1'}], \n      [{ 'indent': '+1' }],          // outdent/indent\n      [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n      [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n      [{ 'script': 'sub'}, { 'script': 'super' }, 'formula'],      // superscript/subscript\n//      ['formula'],\n//      [{ 'direction': 'rtl' }],                         // text direction\n      ['link', 'image', 'video']                         // link and image, video\n      \n    ]\n  };\n  ","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, FormGroupDirective, NgForm, ValidatorFn, FormArray } from '@angular/forms';\n\n\nimport { Field, KeyMap, AutocompleteField, DropdownOption, DropdownField, FieldType, HtmlEditorField, TextField, InputField, ImageField, CalendarField, CheckboxField, FileField, RadioField, ToggleField, SliderField, FieldChange, LabelField, LabelTextAlign, OptionDisplayTemplate } from '../../model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { StringUtils, FieldUtils, CollectionUtils, FormUtils } from '../../../utility';\n\nimport { startWith, switchMap, tap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Router } from '@angular/router';\nimport { Action, ButtonColor, ButtonSize, ButtonType, Button, ReservedButton } from '../../../button/model';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { quillConfiguration } from './html.editor.configuration';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { Permission } from '../../../privilege/model';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport class FieldErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    //    console.log(\"111\");\n    return !!(control && control.invalid && (control.dirty || control.touched));\n  }\n}\n\n@Component({\n  selector: 'mx-field',\n  templateUrl: './field.component.html',\n  styleUrls: ['./field.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FieldComponent implements OnInit {\n  @Input() sourceType: string;\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() form: FormGroup;\n  @Input() fieldControl: FormControl | FormGroup;\n  @Input() fieldIndex: number;\n  @Input() field: Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField;\n  @Input() originalData: any;\n  @Input() _displayMode: FormDiaplyMode;\n  get displayMode(): FormDiaplyMode {\n    return this._displayMode;\n  }\n  @Input()\n  set displayMode(_displayMode: FormDiaplyMode) {\n    this._displayMode = _displayMode;\n    this.isFieldDisabled = this.fieldDisabled();\n  }\n\n  @Input() hideLabel: boolean;\n  @Input() value: any;\n  @Input() isAddMore: boolean;\n  @Input() addMorePermission: Permission;\n\n  @Input() device: string;\n  @Input() displayInColumns: number;\n  addMoreFieldDisplayInColumns: number;\n  addMoreButtonDisplayInColumns: number;\n\n  @Input() dependencies: any;\n  @Input() row: any;\n  @Input() keyMap: Array<KeyMap>;\n  @Output() onDependentFieldChange: EventEmitter<any> = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onFormChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  charLimit: number;\n  ellipsisRequired: boolean = false;\n  resolvedValue: any;\n\n  matcher: ErrorStateMatcher;\n  isRequired: boolean;\n  isFieldDisabled: boolean;\n  hasFieldNavigate: boolean;\n  hasHintIcon: boolean;\n  maxLength: number;\n  min: number;\n  max: number;\n  imgURL: any;\n  imagePath: string;\n  appearance: string;\n  hasClear: boolean;\n  textClearButton: Button;\n  routeToButton: Button;\n  helpModalButton: Button;\n  rows: number;\n  height: number;\n\n  asBubble: boolean;\n  bubbleColor: ButtonColor;\n  textAlign: LabelTextAlign;\n\n  plusButton: Button;\n  minusButton: Button;\n\n  editorOptions = quillConfiguration;\n\n  onListSelectionFuc: Function = null;\n  listOptions: Array<DropdownOption> = null;\n  enableMultiSelection: boolean;\n  autoCompleteOptions: Observable<DropdownOption[]>;\n  autoCompleteResultCount: number;\n  dateRange: boolean = false;\n\n  minLengthForTrigger: number = 3;\n  highlightAutoCompleteText: string = '';\n\n  showLess: number;\n\n  isEditorErrorState(): boolean {\n    return !!(this.fieldControl && this.fieldControl.invalid && (this.fieldControl.dirty || this.fieldControl.touched));\n  }\n  @ViewChild('listView') listView: MatSelectionList;\n\n  constructor(public router: Router, public ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    if ((<TextField>this.field).placeholder == undefined) {\n      (<TextField>this.field).placeholder = \"\";\n    }\n    if ((<TextField>this.field).ellipsis && (<TextField>this.field).ellipsis > 0) {\n      this.charLimit = (<TextField>this.field).ellipsis;\n    }\n\n    this.matcher = new FieldErrorStateMatcher();\n    this.getValue(this.field, this.value);\n    this.isRequired = this.required();\n    this.isFieldDisabled = this.fieldDisabled();\n    this.hasFieldNavigate = this.fieldNavigate();\n    this.hasHintIcon = this.displayHintIcon();\n    this.setMaxLength();\n    this.setNumberMinMax();\n    this.setAppearance();\n    this.setOptionInDisplay();\n    this.getImagePath(this.field);\n    this.setRows();\n    this.setHeight();\n    this.setClear();\n    this.setAsBubble();\n    this.setTextAlign();\n    this.setAddMoreDisplayInColumn();\n    this.setMinLengthForTrigger();\n    //    this.autocompleteInit();\n    this.setDisplayTemplate();\n    this.setCalendar();\n    this.setShowLess();\n    this.textClearButton = this.setTextClearButton('fieldTextClearBtn', \"Clear Text\", \"cancel\", null);\n    if (this.field.navigate) {\n      this.routeToButton = this.setTextClearButton('fieldRouteToBtn', this.field.navigate.text, this.field.navigate.icon ? this.field.navigate.icon : \"call_made\", this.field.navigate.routeTo);\n    }\n    this.helpModalButton = this.setHelpButton('helpCloseButton', 'Close', 'close');\n\n    this.plusButton = this.addRemoveButton(ReservedButton.ADD_FIELD, \"Add\", \"add\");\n    this.minusButton = this.addRemoveButton(ReservedButton.REMOVE_FIELD, \"Minus\", \"remove\");\n  }\n\n  setDisplayTemplate(): void {\n    if ((this.field.type == FieldType.RADIO || this.field.type == FieldType.CHECKBOX) && StringUtils.isEmpty((<RadioField | CheckboxField>this.field).displayTemplate)) {\n      (<RadioField | CheckboxField>this.field).displayTemplate = OptionDisplayTemplate.CLASSIC;\n    }\n  }\n\n  setAddMoreDisplayInColumn(): void {\n    if (this.isAddMore) {\n      if (this.device == 'desktop') {\n        if (this.displayInColumns < 6) {\n          this.addMoreFieldDisplayInColumns = 10;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 11;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n      if (this.device == 'tablet') {\n        if (this.displayInColumns < 6) {\n          this.addMoreFieldDisplayInColumns = 6;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 7;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n      if (this.device == 'mobile') {\n        if (this.displayInColumns < 3) {\n          this.addMoreFieldDisplayInColumns = 3;\n          this.addMoreButtonDisplayInColumns = 2;\n        } else {\n          this.addMoreFieldDisplayInColumns = 3;\n          this.addMoreButtonDisplayInColumns = 1;\n        }\n      }\n\n    }\n  }\n\n  setMinLengthForTrigger(): void {\n    this.minLengthForTrigger = (<AutocompleteField>this.field).minLengthForTrigger ? (<AutocompleteField>this.field).minLengthForTrigger : 3;\n  }\n\n  setRows(): void {\n    this.rows = (<TextField>this.field).rows ? (<TextField>this.field).rows : 1;\n  }\n\n  setHeight(): void {\n    this.height = (<HtmlEditorField>this.field).height ? (<HtmlEditorField>this.field).height : 300;\n  }\n\n  setAppearance(): void {\n    this.appearance = (<TextField | InputField>this.field).appearance ? (<TextField | InputField>this.field).appearance : 'standard';\n  }\n\n  setAsBubble(): void {\n    this.asBubble = (<LabelField>this.field).asBubble ? (<LabelField>this.field).asBubble : false;\n    this.bubbleColor = (<LabelField>this.field).bubbleColor ? (<LabelField>this.field).bubbleColor : ButtonColor.DEFAULT;\n  }\n\n  setTextAlign(): void {\n    this.textAlign = (<LabelField>this.field).textAlign ? (<LabelField>this.field).textAlign : LabelTextAlign.LEFT;\n  }\n\n  setMaxLength(): void {\n    this.maxLength = (<TextField>this.field).maxLength ? (<TextField>this.field).maxLength : 1000000;\n  }\n\n  setNumberMinMax(): void {\n    this.min = (<InputField>this.field).min ? (<InputField>this.field).min : null;\n    this.max = (<InputField>this.field).max ? (<InputField>this.field).max : null;\n  }\n\n  displayHintIcon(): boolean {\n    return this.field.help && this.field.help.icon ? true : false;\n  }\n\n  @ViewChild('sidenav') sidenav: MatSidenav;\n  close() {\n    this.sidenav.close();\n  }\n  open() {\n    this.sidenav.open();\n  }\n\n  setHelpButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n    };\n  }\n\n  required(): boolean {\n    let isRequired: boolean = false;\n    if (this.field.validations && this.field.validations.length > 0) {\n      for (let validation of this.field.validations) {\n        if (validation.message.key == \"required\") {\n          isRequired = true;\n        }\n      }\n    }\n\n    if (StringUtils.isEmpty(this.field.label)) {\n      isRequired = false;\n    }\n\n    return isRequired;\n  }\n\n  fieldNavigate(): boolean {\n    let hasFieldNavigate: boolean = false;\n\n    if (\n      this.field.navigate &&\n      (!StringUtils.isEmpty(this.field.navigate.icon) || !StringUtils.isEmpty(this.field.navigate.text)) &&\n      !CollectionUtils.isEmpty(this.field.navigate.routeTo)\n    ) {\n      hasFieldNavigate = true;\n    }\n\n    return hasFieldNavigate;\n  }\n\n  fieldDisabled(): boolean {\n    let isDisabled: boolean = false;\n\n    if (this.field.alwaysEnable) {} else {\n      isDisabled = FieldUtils.isFieldDisabled(this.field, this._displayMode, this.resolvedValue);\n      if (isDisabled) {\n        FormUtils.disableFieldControl(<FormControl>this.fieldControl);\n      }\n    }\n\n    return isDisabled;\n  }\n\n  getValue(field: Field, txt: any): any {\n    let value: string = \"\";\n    let initialLength = 0;\n    let finalLength = 0;\n\n    if (this.fieldControl != undefined) {\n      value = this.fieldControl.value;\n    } else {\n      value = txt;\n    }\n\n    if (field.type != FieldType.DROPDOWN) {\n      if (this.keyMap && this.keyMap.length > 0) {\n        this.keyMap\n          .filter(objs => {\n            let hasAssociation: boolean = false;\n            if (!CollectionUtils.isEmpty(objs) && !CollectionUtils.isEmpty(objs.associations)) {\n              objs.associations.forEach(element => {\n                if (element.fieldKey == field.key && element.componentIdentifier == this.sourceIdentifier) {\n                  hasAssociation = true;\n                }\n              });\n            }\n            return hasAssociation;\n          })\n          .forEach(field => {\n            if (field['options'] && field['options'].length > 0) {\n              for (let index = 0; index < field['options'].length; index++) {\n                if (field['options'][index].key == value) {\n                  value = field['options'][index].value;\n                  break;\n                }\n              }\n            }\n          });\n      }\n    }\n\n    this.resolvedValue = value;\n\n    if (FieldUtils.isEllipsisField(this.field) && FieldUtils.displayEllipsis(this.charLimit, this.resolvedValue)) {\n      value = JSON.stringify(value);\n      initialLength = value.length;\n\n      value = value.substr(0, (<TextField>this.field).ellipsis);\n      finalLength = value.length;\n\n      value += \"...\";\n\n      if (initialLength > finalLength) {\n        this.ellipsisRequired = true;\n      }\n    }\n\n    return value;\n  }\n\n  displayFullText() {\n    let resolvedValueStr = JSON.stringify(this.resolvedValue);\n    if (!StringUtils.isEmpty(resolvedValueStr)) {\n      this.charLimit = resolvedValueStr.length;\n    }\n  }\n\n  displayShortText() {\n    if ((<TextField>this.field).ellipsis && (<TextField>this.field).ellipsis > 0) {\n      this.charLimit = (<TextField>this.field).ellipsis;\n      this.displayEllipsis();\n    }\n  }\n\n  displayEllipsis(): boolean {\n    return FieldUtils.displayEllipsis(this.charLimit, this.resolvedValue);\n  }\n\n  setCalendar() {\n    if (this.field.type === FieldType.CALENDAR) {\n      this.dateRange = (<CalendarField>this.field).dateRange;\n    }\n  }\n\n  ///////////////////////////// AUTOCOMPLETE - START ///////////////////////////\n  private invokeOnChangeOnField(value: string, input: any): boolean {\n    let invokeOnChange: boolean = false;\n\n    if (this.field.type == FieldType.AUTOCOMPLETE) {\n      this.autoCompleteInputHasValue = !!value;\n\n      if (value.length >= this.minLengthForTrigger) {\n        this.autoCompleteInputHasValue = !!value;\n        this.highlightAutoCompleteText = value;\n      } else {\n        this.autoCompleteInputHasValue = false;\n        this.highlightAutoCompleteText = '';\n      }\n      invokeOnChange = true;\n    } else {\n      invokeOnChange = true;\n    }\n\n    return invokeOnChange;\n  }\n\n  autocompleteDisplayFn(option: DropdownOption | any): string {\n    let value: string;\n    if (option != null && option.key != null) {\n      value = option.value;\n    } else {\n      value = option;\n    }\n\n    return value;\n  }\n\n  private _filter(value: string): Array<DropdownOption> {\n    const filterValue = value.toLowerCase();\n    var result = (<AutocompleteField>this.field).options.filter(option => option.value.toLowerCase().includes(filterValue));\n    this.autoCompleteResultCount = result.length;\n    return result;\n  }\n  ///////////////////////////// AUTOCOMPLETE - END ///////////////////////////\n\n  ///////////////////////////// DROPDOWN OPTION - START ///////////////////////////\n  setOptionInDisplay(): void {\n    if (this.field['options'] && this.fieldControl) {\n      let key: any = this.fieldControl.value;\n\n      for (let cnt = 0; cnt < (this.field['options'] as Array<DropdownOption>).length; cnt++) {\n        if (this.field['options'][cnt].key === key) {\n          this.field['options'][cnt].checked = true;\n        }\n      }\n    }\n  }\n\n\n  setClear() {\n    let hasClear = false;\n    if (this.resolvedValue && (<TextField>this.field).hasClear && (\n      this.field.type == FieldType.TEXT ||\n      this.field.type == FieldType.TEXTAREA ||\n      this.field.type == FieldType.EMAIL ||\n      this.field.type == FieldType.PASSWORD ||\n      this.field.type == FieldType.COLOR ||\n      this.field.type == FieldType.MONTH ||\n      this.field.type == FieldType.WEEK ||\n      this.field.type == FieldType.NUMBER ||\n      this.field.type == FieldType.DROPDOWN ||\n      this.field.type == FieldType.AUTOCOMPLETE ||\n      this.field.type == FieldType.CHIPS ||\n      this.field.type == FieldType.TIME ||\n      this.field.type == FieldType.CALENDAR\n    )) {\n      hasClear = true;\n    }\n\n    this.hasClear = hasClear;\n  }\n\n  cleanValue() {\n    this.resolvedValue = \"\";\n    this.fieldControl.setValue(\"\");\n    this.setClear();\n  }\n\n  getResolveTextWithKey(field: any) {\n    let value: string = \"\";\n\n    if (this.row != undefined) {\n      if (this.row[field['resolveOptionWithKey']]) {\n        value = this.row[field['resolveOptionWithKey']];\n      }\n    }\n\n    return value;\n  }\n\n  getDropdownValue(field: Field, txt: any): any {\n    let value: any = \"\";\n\n    if (this.fieldControl != undefined) {\n      if (this.fieldControl.value) {\n        value = this.fieldControl.value;\n      }\n    } else {\n      value = txt;\n    }\n\n    if (field['options'] && field['options'].length > 0) {\n      for (let index = 0; index < field['options'].length; index++) {\n        let isSelected: boolean = false;\n        if (value instanceof Array) {\n          if (value.indexOf(field['options'][index].key) > -1) {\n            isSelected = true;\n          }\n        } else if (value instanceof String) {\n          if (field['options'][index].key == value) {\n            isSelected = true;\n          }\n        } else if (value instanceof Object) {\n          if (value[field['options'][index].key]) {\n            isSelected = true;\n          }\n        }\n\n        if (isSelected) {\n          value = field['options'][index].value;\n          break;\n        }\n      }\n    }\n\n\n    return value;\n  }\n  ///////////////////////////// DROPDOWN OPTION - END ///////////////////////////\n\n  ///////////////////////////// UPLOAD - START ///////////////////////////\n  // imgURL: any;\n  // onUpload(event) {\n  //   let file: File = {\n  //     'source': this.sourceIdentifier,\n  //     'index': this.index,\n  //     'field': this.field.key,\n  //     'files': event.target.files\n  //   };\n  //   this.field['onUpload'](file);\n\n\n  //   var reader = new FileReader();\n  //   reader.readAsDataURL(file.files[0]);\n  //   reader.onload = (_event) => {\n  //     this.imgURL = reader.result;\n  //   }\n  // }\n  ///////////////////////////// UPLOAD - END ///////////////////////////\n\n  ///////////////////////////// IMAGE - START ///////////////////////////\n  getImagePath(field: Field): void {\n    //    console.log(path);\n    if (!StringUtils.isEmpty(this.resolvedValue) && this.resolvedValue instanceof String && this.resolvedValue.indexOf(\"http://\") <= -1) {\n      // if (this.resolvedValue.startsWith(\"/\")) {\n      //   this.resolvedValue = Properties.contentUrl + this.resolvedValue;\n      // } else {\n      //   this.resolvedValue = Properties.contentUrl + \"/\" + this.resolvedValue;\n      // }\n    }\n\n    this.imagePath = this.resolvedValue;\n  }\n  ///////////////////////////// IMAGE - END ///////////////////////////\n\n  ///////////////////////////// SLIDER - START ///////////////////////////\n  //   getSliderTickInterval(): number | 'auto' {\n  // //    if ((<SliderField>this.field)..showTicks) {\n  //       return (<SliderField>this.field).autoTicks ? 'auto' : this.tickInterval;\n  // //    }\n\n  //     return 0;\n  //   }\n  ///////////////////////////// SLIDER - END ///////////////////////////\n\n  ///////////////////////////// EVENTS - START ///////////////////////////\n  onAutocompleteChange(autocomplate: any) {\n    let value = autocomplate.option.value;\n    // console.log(value);\n\n    this.onChangeEvent(this.field.key, value, autocomplate);\n  }\n\n  onToggleChange(toggle: any) {\n    console.log(toggle);\n    let value = toggle.checked;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, toggle);\n  }\n\n  onSliderChange(slider: any) {\n    //    console.log(slider);\n    let value = slider.value;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, slider);\n  }\n\n  onRadioChange(radio: any) {\n    //    console.log(radio);\n    let value = radio.value;\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, value, radio);\n  }\n\n  onCheckboxChange(option: any, checkbox: any) {\n    let key = option.key;\n    let value = checkbox.checked;\n    // console.log(key + \": \" + value);\n    this.onChangeEvent(key, value, checkbox);\n  }\n\n  setShowLess() {\n    if (this.field.type === FieldType.RADIO || this.field.type === FieldType.CHECKBOX) {\n      this.showLess = (<CheckboxField | RadioField>this.field).showLess || (<CheckboxField | RadioField>this.field).options.length;\n    }\n  }\n\n  onShowAllOptions = () => {\n    this.showLess = (<CheckboxField | RadioField>this.field).options.length;\n  }\n\n  onOptionChange(options: MatSelectionListChange) {\n    let value = this.listView.selectedOptions.selected.map(x => x.value);\n\n    if (this.field.type == 'CHECKBOX') {\n      let selectedOptions = options.source._value;\n      let currentOptions = <Map<any, boolean>>this.fieldControl.value;\n\n      for (let key in currentOptions) {\n        if (selectedOptions.indexOf(key) > -1) {\n          currentOptions[key] = true;\n        } else {\n          currentOptions[key] = false;\n        }\n      }\n\n      (<FormGroup>this.fieldControl).setValue(currentOptions);\n    } else if (this.field.type == 'RADIO') {\n      let selectedOptions = options.source._value;\n\n      if (CollectionUtils.isEmpty(selectedOptions)) {\n        (<FormControl>this.fieldControl).setValue(null);\n        value = null;\n      } else {\n        (<FormControl>this.fieldControl).setValue(selectedOptions[0]);\n        value = value[0];\n      }\n    }\n    this.onChangeEvent(this.field.key, value, options);\n  }\n\n  onHtmlEditorChange($event: any) {\n    // console.log($event);\n    //    console.log(value);\n    this.onChangeEvent(this.field.key, $event.html, $event);\n  }\n\n  onChipsListChange($event: any) {\n    this.onChangeEvent(this.field.key, $event.values, $event);\n  }\n\n  autoCompleteInputHasValue: boolean = false;\n  onInputChange(input: any) {\n    console.log(input);\n    let value = input.target.value;\n    //    console.log(value);\n\n    if (this.invokeOnChangeOnField(value, input)) {\n      this.onChangeEvent(this.field.key, value, input);\n    }\n  }\n\n  onDateChange(date: MatDatepickerInputEvent<Date>, type: string) {\n    let key: string = this.field.key;\n    if (!StringUtils.isEmpty(type)) {\n      key = this.field.key + \".\" + type;\n    }\n\n    //    console.log(date.value);\n    let value = date.value;\n    //    console.log(value);\n    this.onChangeEvent(key, value, date);\n  }\n\n  onChange(dropdown: any) {\n    //    console.log(dropdown.value);\n    let value = dropdown.value;\n\n    this.onChangeEvent(this.field.key, value, dropdown);\n  }\n\n  onFileChange(event: any) {\n    // console.log(event);\n\n    this.onChangeEvent(this.field.key, event, event);\n\n    var reader = new FileReader();\n    reader.readAsDataURL(event[0]);\n    reader.onload = (_event) => {\n      this.imgURL = reader.result;\n    }\n  }\n\n  onParagraphChange(event: any) {\n    //    console.log(event); \n    this.onChangeEvent(this.field.key, event, event);\n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n\n  onChangeEvent(key: string, value: any, event: any) {\n    this.resolvedValue = value;\n    this.setClear();\n    setTimeout(() => {\n      //      if ((this.dependencies && this.dependencies[this.field.key]) || this.field.type == FieldType.CHECKBOX || this.field.type == FieldType.DROPDOWN) {\n      if ((this.dependencies && this.dependencies[this.field.key])) {\n        let action: Action = {\n          sourceIdentifier: this.sourceIdentifier,\n          sourceIndex: this.sourceIndex,\n          widgetArrayIndex: this.widgetArrayIndex,\n          fieldIndex: this.fieldIndex,\n          action: this.field.key,\n          data: this.form.getRawValue(),\n          parentHierarchy: null,\n          event: event\n        };\n        this.onDependentFieldChange.emit(action);\n      }\n    }, 200);\n\n    let fieldChange: FieldChange = {\n      sourceIdentifier: this.sourceIdentifier,\n      sourceIndex: this.sourceIndex,\n      widgetArrayIndex: this.widgetArrayIndex,\n      fieldIndex: this.fieldIndex,\n      fieldKey: key,\n      value: value,\n      event: event\n    }\n\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  // onChangeSearch(val: string) {\n  //   console.log(\"onChangeSearch\");\n  //   let autocomplete: Autocomplete = {\n  //     'source': this.sourceIdentifier,\n  //     'index': this.index,\n  //     'field': this.field.key,\n  //     'searchText': val\n  //   };\n\n  //   this.autocompleteService.invoke(autocomplete);\n  // }\n  ///////////////////////////// EVENTS - END ///////////////////////////\n\n  ///////////////////////////// ERROR - START ///////////////////////////\n  errors(): Array<{ error: string, message: string }> {\n    let errors: Array<{ error: string, message: string }> = [];\n    if (this.fieldControl != undefined) {\n      if (this.fieldControl && this.fieldControl.errors) {\n        Object.keys(this.fieldControl.errors).forEach(keyError => {\n          if (this.field.validations) {\n            for (let validation of this.field.validations) {\n              if (keyError === validation.message.key) {\n                errors[errors.length] = { error: keyError, message: validation.message.message };\n              } else {\n                //errors[errors.length] = {error: keyError, message: this.fieldControl.errors[keyError]};\n              }\n            }\n          }\n        });\n      } else if (this.fieldControl instanceof FormGroup) {\n        if (this.fieldControl.controls && this.fieldControl.controls['startDate'] && this.fieldControl.controls['startDate'].errors) {\n          Object.keys(this.fieldControl.controls['startDate'].errors).forEach(keyError => {\n            if (this.field.validations) {\n              for (let validation of this.field.validations) {\n                if (keyError === validation.message.key) {\n                  errors[errors.length] = { error: keyError, message: validation.message.message };\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n\n    return errors;\n  }\n\n  ///////////////////////////// ERROR - END ///////////////////////////\n  setTextClearButton(identifier: string, label: string, icon: string, routeTo: Array<string>): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.GHOST,\n      onlyIcon: true,\n      routerLink: routeTo\n    };\n  }\n\n  addField(field: Field) {\n    let validations: Array<ValidatorFn> = FormUtils.getFieldValidation(field);\n\n    (<FormArray>this.form.controls[field.key]).push(FormUtils.setFormControl(this.displayMode, field, null, validations));\n\n    this.onFormChange.emit(this.form);\n  }\n\n  removeField(field: Field, index: number) {\n    (<FormArray>this.form.controls[field.key]).controls.splice(index, 1);\n\n    this.onFormChange.emit(this.form);\n  }\n\n  addRemoveButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.FLAT,\n      onlyIcon: true\n    };\n  }\n\n  onFileComplete(data: any) {\n    // console.log(data); // We just print out data bubbled up from event emitter.\n  }\n\n  onListImageLoadError = ($event): void => {\n    $event.target.src = (<RadioField | CheckboxField>this.field).defaultImageUrl;\n  }\n}\n","import { Component, OnInit, OnDestroy, Input, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\n\nimport { List, Record, PaginationType, CellColor, Column, ChildListType, CustomLayoutCell, CellControllType, CellControl } from '../model';\nimport { ObjectTree, Button, ButtonType, ButtonColor, ButtonSize, Action, ReservedButton } from '../../button/model';\nimport { KeyMap, FieldType, FieldAppearance, FieldDiaplyType, TextField, DropdownOption, DropdownField, FieldChange, KeyMapOptionType, AutocompleteField, RadioField, CheckboxField } from '../../field/model';\nimport { FormDiaplyMode, FormField, FormTitleIconPosition } from '../../form/model';\nimport { FormGroup } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FieldUtils, FormUtils, CollectionUtils, StringUtils, KeyMapUtils, ListUtils } from '../../utility';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Ability } from '@casl/ability';\nimport { AbilityUtils, ButtonUtils } from '../../utility';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'mx-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ListComponent implements OnInit, OnDestroy {\n  @Input() _listConfig: List;\n  get listConfig(): List {\n    return this._listConfig;\n  }\n  @Input()\n  set listConfig(_listConfig: List) {\n    this._listConfig = _listConfig;\n    this.setColumnNames();\n    this.setDetailColumnCount();\n    this.setCardVisibility();\n  }\n\n  @Input() _record: Record;\n  get record(): Record {\n    return this._record;\n  }\n  @Input()\n  set record(_record: Record) {\n    // console.log(\"-------------->\")\n    // console.log(_record);\n    // console.log(this._record);\n    // console.log(\"<--------------\")\n    if (!this.parent || (this.parent && JSON.stringify(_record) != JSON.stringify(this._record))) {\n      this._record = _record;\n\n      this.init();\n      this.setCardVisibility();\n      this.showRowEditable();\n    }\n  }\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() parent: ObjectTree;\n  @Input() _listReset: boolean;\n  get listReset(): boolean {\n    return this._listReset;\n  }\n  @Input()\n  set listReset(_listReset: boolean) {\n    this._listReset = _listReset;\n\n    if (this._listReset) {\n      this.resetInlineEditButton('inlineEditButton', 'Edit', 'edit');\n    }\n  }\n\n  @Input() disabled: boolean;\n  @Input() keyMap: Array<KeyMap>;\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n  @Output() onPageChange = new EventEmitter();\n  @Output() onSortChange = new EventEmitter();\n\n  _expanded: boolean = false;\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  @Input()\n  set expanded(_expanded: boolean) {\n    this._expanded = _expanded;\n  }\n\n  @Input()\n  expandRowIndex: number;\n\n  dataSource: MatTableDataSource<any> = new MatTableDataSource();\n\n  @ViewChild(MatPaginator, { static: false }) set contentPage(pagination: MatPaginator) {\n    this.dataSource.paginator = pagination;\n  }\n\n\n  @ViewChild(MatSort, { static: false }) set contentSort(sort: MatSort) {\n    this.dataSource.sort = sort;\n  }\n\n  cellCount: number = 12;\n  isCustomTemplate: boolean = false;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  displayVertical: boolean = false;\n\n  form: FormGroup;\n  commonListForm: FormGroup;\n  formIndex: number = -1;\n\n  inlineEditButtons: Array<Button> = new Array<Button>();\n  hasDisplayActions: boolean = false;\n  isInlineEditable: boolean = false;\n  inlineButtonSize: ButtonSize = ButtonSize.DEFAULT;\n  childRows: Map<number, Record> = new Map<number, Record>();\n  childColumnCount: number;\n\n  displayModes: Array<FormDiaplyMode> = new Array<FormDiaplyMode>();\n  columnNames: Array<string> = new Array<string>();\n  columnConfigs: Array<Column> = new Array<Column>();\n  totalDispalyableWidth: number;\n\n  selection = new SelectionModel<any>(true, []);\n  hideCard: boolean = false;\n  hideHeader: boolean = false;\n  hideFooter: boolean = false;\n\n  pageSizeOptions: Array<number> = [5, 10, 25, 100];\n  rowCount: number = 0;\n  limit: number = 0;\n  expandedRow: any | null;\n  rowColors: Array<CellColor> = new Array<CellColor>();\n  cellColors: Array<Array<CellColor>> = new Array<Array<CellColor>>();\n  hoverRowData: any;\n  hoverRowIndex: number;\n\n  showCard = false;\n  iconPosition: FormTitleIconPosition;\n  selectableAdded: boolean = false;\n\n  breakpointSubscription: Subscription;\n\n  constructor(public ability: Ability, public breakpointObserver: BreakpointObserver) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n  }\n\n  init() {\n    this.getLayout();\n\n    this.setPageSize();\n    if (this._record === undefined) {\n      this._record = { total: 10, pageNo: 1, rows: [] };\n    }\n\n    if (this._record && this._record.rows) {\n      if (this._record.rows.length != this.rowCount || this._record.rows.length == 0) {\n        this._record.rows = [...this._record.rows];\n\n        this.dataSource.data = this._record.rows;\n      }\n    }\n\n    this.resetInlineEditButton('inlineEditButton', 'Edit', 'edit');\n    this.populateAllChilds();\n\n    this.showRowEditable();\n    this.initCommonFormGroup();\n    this.setColors();\n    this.setIconPosition();\n    this.setFilterBar();\n    this.setCustomTemplate();\n\n    ListUtils.setCustomLayouts(this.listConfig);\n  }\n\n  setCustomTemplate() {\n    // let hasCustomColumn: boolean = false;\n    //  check if we have column template\n    // if (!CollectionUtils.isEmpty(this._listConfig?.columns))  {\n    //   this._listConfig?.columns.forEach(column => {\n    //     if (column.template && column.template.layout) {\n    //       hasCustomColumn = true;\n    //     }\n    //   });\n    // }\n\n    if (this._listConfig?.row?.template?.layout && !(this.isMobile && this._listConfig.mobile && this._listConfig.mobile.rowHeight)) {\n      this.isCustomTemplate = true;\n    }\n  }\n\n  sortDirection: 'asc' | 'desc' | '' = 'asc';\n  sticky() {\n    let header1 = document.querySelectorAll(\".mat-toolbar\");\n    let header = document.getElementById(\"mxMobileSearchStrip\");\n    if (header) {\n      let sticky = header.offsetTop;\n      if (window.pageYOffset > sticky) {\n        header.classList.add(\"sticky\");\n\n        header1.forEach((el) => {\n          el.classList.add(\"sticky-header\");\n        });\n      } else {\n        header.classList.remove(\"sticky\");\n        header1.forEach((el) => {\n          el.classList.remove(\"sticky-header\");\n        });\n      }\n    }\n  }\n\n  onScrolled(event) {\n  }\n\n\n  contentFilterColumnSpan: number;\n  columnSelectionColumnSpan: number;\n\n  setFilterBar() {\n    if (!this._listConfig.staticList) {\n      this._listConfig.staticList = {};\n    }\n    if (this._listConfig.staticList.hasOnPageFilter && !this._listConfig.hasColumnSelection) {\n      this.contentFilterColumnSpan = 12;\n    }\n    if (!this._listConfig.staticList.hasOnPageFilter && this._listConfig.hasColumnSelection) {\n      this.columnSelectionColumnSpan = 12;\n    }\n  }\n\n  setPageSize() {\n    if (this._listConfig.pagination == PaginationType.ALL) {\n      this.limit = this._record && this._record.rows ? this._record.rows.length : 10;\n    } else {\n      if (this._listConfig.pageSize) {\n        this.limit = this._listConfig.pageSize;\n      }\n    }\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this._listConfig.header && this._listConfig.header.icon && this._listConfig.header.icon.position) {\n      this.iconPosition = this._listConfig.header.icon.position;\n    }\n  }\n\n  filterField: TextField;\n  getFilterField(): TextField {\n    this.filterField = {\n      key: \"pageFilter\",\n      label: \"Filter\",\n      type: FieldType.TEXT,\n      icon: \"search\",\n      appearance: FieldAppearance.STANDARD,\n      isReadOnly: false,\n      fieldDisplayType: FieldDiaplyType.INLINE,\n      placeholder: \"Type to display filtered list\",\n      value: \"\"\n    };\n\n    return this.filterField;\n  }\n\n  columnSelectorField: DropdownField;\n  getColumnSelectorField(): DropdownField {\n    this.columnSelectorField = ListUtils.getColumnSelectorField(this._listConfig);\n\n    return this.columnSelectorField;\n  }\n\n  updateColumnDisplay(event: any) {\n    console.log(event);\n    for (let column of this._listConfig.columns) {\n      if (event.value.indexOf(ListUtils.getColumnKey(column)) > -1) {\n        column.show = true;\n      } else {\n        column.show = false;\n      }\n    }\n\n    this.setColumnNames();\n    this.setDetailColumnCount();\n  }\n\n  inlinEditButton(identifier: string, label: string, icon: string): Button {\n    let buttonConfig: Button = {\n      identifier: identifier,\n      type: ButtonType.FLAT,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      onlyIcon: false\n    }\n\n    return buttonConfig;\n  }\n\n  getColumnLabel(column: Column): string {\n    return ListUtils.getColumnLabel(column);\n  }\n\n  getColumnKey(column: Column): string {\n    return ListUtils.getColumnKey(column);\n  }\n\n  resetInlineEditButton(identifier: string, label: string, icon: string) {\n    for (let cIndex = 0; cIndex < this.columnConfigs.length; cIndex++) {\n\n      if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n        for (let action of this._listConfig.actions) {\n          if (action.permission == null || (this.ability.can(action.permission['action'], action.permission['subject']))) {\n            this.hasDisplayActions = true;\n            break;\n          }\n        }\n      }\n\n      if (this.hasDisplayActions) {\n        for (let field of this.columnConfigs[cIndex].fields) {\n          if (FieldUtils.readOnlyField().indexOf(field.type) > -1) { } else {\n            this.isInlineEditable = true;\n            break;\n          }\n        }\n      }\n    }\n\n    this.inlineEditButtons = new Array<Button>();\n\n    if (this._record && this._record.rows) {\n      for (let index = 0; index < this._record.rows.length; index++) {\n        this.inlineEditButtons.push(this.inlinEditButton(identifier, label, icon));\n\n        this.displayModes[index] = FormDiaplyMode.VIEW;\n      }\n    }\n    this.formIndex = -1;\n\n    this.setColumnNames();\n  }\n\n  showRowEditable() {\n    if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n      this.inlineButtonSize = this._listConfig.actions[0].size\n    }\n\n    if (this._record && this._record.rows) {\n      for (let index = 0; index < this._record.rows.length; index++) {\n        if (this._record.rows[index]['showRowEditable']) {\n          this.setRowEditablity(index);\n        }\n      }\n    }\n  }\n\n  setRowEditablity(index: number): void {\n    if (this.formIndex != -1 && this.formIndex != index) {\n      this.inlineEditButtons[this.formIndex].identifier = 'inlineEditButton';\n      this.inlineEditButtons[this.formIndex].label = 'Edit';\n      this.inlineEditButtons[this.formIndex].icon = 'edit';\n      this.inlineEditButtons[this.formIndex].size = this.inlineButtonSize;\n      this.formIndex = -1;\n    }\n    if (this.inlineEditButtons[index] && this.inlineEditButtons[index].label == 'Edit') {\n      this.inlineEditButtons[index].identifier = 'cancelInlineStaticList';\n      this.inlineEditButtons[index].label = 'Cancel';\n      this.inlineEditButtons[index].icon = 'close';\n      this.inlineEditButtons[index].size = this.inlineButtonSize;\n\n      if (this._record && this._record.rows) {\n        for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n          this.displayModes[rIndex] = FormDiaplyMode.VIEW;\n\n          if (rIndex != index) {\n            this.inlineEditButtons[rIndex].identifier = 'inlineEditButton';\n            this.inlineEditButtons[rIndex].label = 'Edit';\n            this.inlineEditButtons[rIndex].icon = 'edit';\n            this.inlineEditButtons[rIndex].size = this.inlineButtonSize;\n          }\n        }\n\n        if (this._record.rows[index]['formDisplayMode']) {\n          this.displayModes[index] = this._record.rows[index]['formDisplayMode'];\n        } else {\n          this.displayModes[index] = FormDiaplyMode.EDIT;\n        }\n      }\n\n      this.initFormGroup(index);\n      this.formIndex = index;\n      this._listReset = false;\n    } else {\n      this.inlineEditButtons[index].identifier = 'inlineEditButton';\n      this.inlineEditButtons[index].label = 'Edit';\n      this.inlineEditButtons[index].icon = 'edit';\n      this.inlineEditButtons[index].size = this.inlineButtonSize;\n      this.formIndex = -1;\n    }\n\n    let inlineButtonTemp = this.inlineEditButtons[index];\n    this.inlineEditButtons[index] = undefined;\n    setTimeout(() => this.inlineEditButtons[index] = inlineButtonTemp, 100);\n  }\n\n  populateAllChilds(): void {\n    if (this._record && this._record.rows && this._record.rows.length > 0) {\n      for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n        this.childRows[rIndex] = this.getChildRows(this._record.rows[rIndex]);\n      }\n    }\n  }\n\n  getChildRows(row: any): any {\n    if (this._listConfig && this._listConfig.child && row) {\n      let data: Array<any> | any = this._listConfig.child.recordIdentifier ? row[this._listConfig.child.recordIdentifier] : row;\n\n      if (this._listConfig.child.type == ChildListType.LIST) {\n        if (data) {\n          let childData: any;\n          if (data instanceof Array) {\n            childData = data;\n          } else {\n            childData = new Array<any>();\n            childData.push(data);\n          }\n\n          let record: Record = {\n            pageNo: 1,\n            total: childData.length,\n            rows: childData\n          };\n\n          return record;\n        }\n      } else {\n        return data;\n      }\n    }\n  }\n\n  getValue(colIndex: number, cFieldIndex: number, row: any, value: any): any {\n    try {\n      value = eval(\"row.\" + this.columnConfigs[colIndex].fields[cFieldIndex].key);\n    } catch (e) { }\n\n    return value;\n  }\n\n  updateFilter(field) {\n    const filterValue = field.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  initFormGroup(cnt: number): void {\n    let fieldControls = {};\n\n    let row = this.getCurrentRecord(cnt);\n\n    KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.LIST, this._listConfig, row);\n\n    for (let column of this.columnConfigs) {\n      for (let field of column.fields) {\n        let formField: FormField = { field: field, addMore: false };\n\n        if (this._listConfig.uniqueKeys && this._listConfig.uniqueKeys.indexOf(formField.field.key) > -1) {\n          formField.field.isUnique = true;\n        }\n        FormUtils.initFieldGroup(fieldControls, formField, null, row, this.displayModes[cnt]);\n      }\n    }\n\n    this.form = new FormGroup(fieldControls);\n    this.formIndex = cnt;\n  }\n\n  initCommonFormGroup(): void {\n    let commonFieldControls = {};\n\n    FormUtils.initFieldGroup(commonFieldControls, { field: this.getFilterField(), addMore: false }, {}, {}, FormDiaplyMode.EDIT);\n    FormUtils.initFieldGroup(commonFieldControls, { field: this.getColumnSelectorField(), addMore: false }, {}, {}, FormDiaplyMode.EDIT);\n\n    this.commonListForm = new FormGroup(commonFieldControls);\n  }\n\n  getCurrentRecord(cnt: number): any {\n    let record: any = {};\n\n    if (this.dataSource && this.dataSource['_renderData'] && this.dataSource['_renderData']['_value'] && this.dataSource['_renderData']['_value'][cnt]) {\n      record = this.dataSource['_renderData']['_value'][cnt];\n    } else if (this._record && this._record['rows'] && this._record['rows'][cnt]) {\n      record = this._record['rows'][cnt];\n    }\n\n    return record;\n  }\n\n  getObjectTree(currentRow: any): ObjectTree {\n    if (this._listConfig && this._listConfig.uniqueKeys && this._listConfig.uniqueKeys.length > 0) {\n      let keys = this._listConfig.uniqueKeys;\n\n      let values: Array<string> = new Array<string>();\n      keys.forEach(key => values.push(currentRow[key]));\n\n      let objectTree: ObjectTree = {\n        parent: {\n          key: values\n        }\n      };\n\n      if (this.parent) {\n        objectTree.hierarchyUp = JSON.parse(JSON.stringify(this.parent));\n      }\n      return objectTree;\n    } else {\n      return null;\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n  setCardVisibility(): void {\n    this.hideCard = false;\n    if (this._listConfig.hideCard || (this._listConfig.hideHeader && this._listConfig.hideFooter)) {\n      this.hideCard = true;\n    }\n\n    if (this.hideCard == false) {\n      if (this._record && this._record.rows && this._record.rows.length == this._record.total && (StringUtils.isEmpty(this._listConfig.header) && !this._listConfig.description)) {\n        this.hideCard = true;\n      }\n    }\n\n    this.hideHeader = false;\n    if (((this._listConfig.header && StringUtils.isEmpty(this._listConfig.header.title)) && StringUtils.isEmpty(this._listConfig.description)) || this._listConfig.hideHeader) {\n      this.hideHeader = true;\n    }\n\n    this.hideFooter = false;\n    if ((this._record && this._record.rows && this._record.rows.length == this._record.total) || this._listConfig.hideFooter) {\n      this.hideFooter = true;\n    }\n  }\n\n  setColumnNames(): void {\n    this.columnNames = new Array<string>();\n    this.columnConfigs = new Array<Column>();\n\n    this.totalDispalyableWidth = 0;\n\n    if (this._listConfig.selectable) {\n      this.columnNames.push('select');\n\n      if (!this._listConfig.header) {\n        this._listConfig.header = { title: \"\" };\n      }\n\n      if (!this._listConfig.header || CollectionUtils.isEmpty(this._listConfig.header.actions)) {\n        this._listConfig.header.actions = new Array<Button>();\n      }\n\n      let selectableExist = false;\n      // for (let button of this._listConfig.header.actions) { \n      //   if ((<Button>button).identifier == \"listCrudSelectionButton\") {\n      //     selectableExist = true;\n      //   }\n      // }\n\n      // if (!selectableExist) {\n      //   this._listConfig.header.actions.unshift(this.selectableButton(\"listCrudSelectionButton\", this._listConfig.selectable.label, this._listConfig.selectable.icon))\n      // } \n\n      if (!this.selectableAdded) {\n        this._listConfig.header.actions.unshift(...this._listConfig.selectable);\n        this.selectableAdded = true;\n      }\n    }\n\n    if (this._listConfig.columns && this._listConfig.columns.length > 0) {\n      this._listConfig.columns.filter(column => column.show == true).forEach(column => {\n        let hasDisplayableField = false;\n        for (let field of column.fields) {\n          if (field.permission == null || this.ability.can(field.permission['action'], field.permission['subject'])) {\n            hasDisplayableField = true;\n          }\n        }\n\n        if (hasDisplayableField) {\n          this.columnNames.push(ListUtils.getColumnKey(column));\n          this.columnConfigs.push(column);\n\n          this.totalDispalyableWidth += column.width;\n        }\n      });\n    }\n\n    if (this.hasDisplayActions) {\n      this.columnNames.push('action');\n\n      this.totalDispalyableWidth += this._listConfig.actionWidth;\n    }\n  }\n\n  setDetailColumnCount(): void {\n    this.childColumnCount = this.columnConfigs.length + (this._listConfig.actions && this._listConfig.actions.length > 0 ? 1 : 0) + (this._listConfig.selectable ? 1 : 0);\n  }\n\n  setColors(): void {\n    if (this._record && this._record.rows) {\n      for (let rIndex = 0; rIndex < this._record.rows.length; rIndex++) {\n        if (CollectionUtils.isEmpty(this.rowColors[rIndex])) {\n          this.rowColors.push({ bgColor: \"\", textColor: \"\" });\n        }\n        let rowColor: CellColor = this.rowColors[rIndex];\n        if (this._listConfig.rowBgColor) {\n          rowColor.bgColor = this._listConfig.rowBgColor(this._record.rows[rIndex]);\n        }\n        if (this._listConfig.rowTextColor) {\n          rowColor.textColor = this._listConfig.rowTextColor(this._record.rows[rIndex]);\n        }\n\n        for (let cIndex = 0; cIndex < this.columnConfigs.length; cIndex++) {\n          if (CollectionUtils.isEmpty(this.cellColors[rIndex])) {\n            this.cellColors.push(new Array<CellColor>());\n          }\n          if (CollectionUtils.isEmpty(this.cellColors[rIndex][cIndex])) {\n            this.cellColors[rIndex][cIndex] = { bgColor: \"\", textColor: \"\" };\n          }\n\n          let cellColor: CellColor = this.cellColors[rIndex][cIndex];\n          if (StringUtils.isEmpty(cellColor.bgColor)) {\n            cellColor.bgColor = rowColor.bgColor;\n          }\n          if (this.columnConfigs[cIndex].bgColor) {\n            cellColor.bgColor = this.columnConfigs[cIndex].bgColor(this._record.rows[rIndex]);\n          }\n\n          if (StringUtils.isEmpty(cellColor.textColor)) {\n            cellColor.textColor = rowColor.textColor;\n          }\n          if (this.columnConfigs[cIndex].textColor) {\n            cellColor.textColor = this.columnConfigs[cIndex].textColor(this._record.rows[rIndex]);\n          }\n        }\n      }\n    }\n  }\n\n  selectableButton(identifier: string, label: string, icon: string): Button {\n    return {\n      identifier: identifier,\n      label: label,\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: icon,\n      type: ButtonType.FLAT,\n      onlyIcon: false\n    };\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n\n    this.onFieldChange.emit(fieldChange);\n    this.formChange(this.form);\n\n    //  if a field options are dependent on me, then reload its options \n    fieldChange.fieldKey;\n    this._listConfig.columns.forEach(column => {\n      column.fields.forEach(field => {\n        if ((<AutocompleteField | RadioField | CheckboxField | DropdownField>field).optionDependsOn == fieldChange.fieldKey) {\n          let row = FormUtils.getRawValue(this.form);\n          //let row = this.getCurrentRecord(fieldChange.sourceIndex);\n          KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.LIST, this._listConfig, row);\n        }\n      })\n    })\n  }\n\n  formChange(form: FormGroup) {\n    console.log(form);\n\n    if (form == undefined) {\n      this.onFormChange.emit(this.form);\n    } else {\n      this.onFormChange.emit(form);\n    }\n  }\n\n  buttonClick(action: Action) {\n    console.log(action);\n\n    if (!CollectionUtils.isEmpty(this._listConfig.selectable)) {\n      this._listConfig.selectable.forEach(selectButton => {\n        if (action.action == selectButton.identifier) {\n          action.data = this.selection.selected;\n        }\n      });\n    }\n\n    if (action.action == ReservedButton.ROW_EXPAND || action.action == ReservedButton.ROW_COLLAPSE) {\n    } else {\n      action.event.stopPropagation();\n    }\n\n    this.onButtonClick.emit(action);\n  }\n\n  getLayout(): void {\n    this.breakpointSubscription = this.breakpointObserver.observe([\n      Breakpoints.XSmall,\n      Breakpoints.Small,\n      Breakpoints.Medium,\n      Breakpoints.Large,\n      Breakpoints.XLarge\n    ]).subscribe((state: BreakpointState) => {\n      if (state.breakpoints[Breakpoints.XSmall]) {\n        this.isMobile = true;\n        this.cellCount = this.listConfig.mobile && this.listConfig.mobile.cellCount ? this.listConfig.mobile.cellCount : 4;\n        this.hideCard = true;\n        ListUtils.getMobileConfig(this.listConfig);\n\n        console.log('Matches XSmall viewport');\n      }\n      if (state.breakpoints[Breakpoints.Small]) {\n        this.isTablet = true;\n        console.log('Matches Small viewport');\n      }\n      if (state.breakpoints[Breakpoints.Medium]) {\n        this.isDesktop = true;\n        console.log('Matches Medium  viewport');\n      }\n      if (state.breakpoints[Breakpoints.Large]) {\n        this.isDesktop = true;\n        console.log('Matches Large viewport');\n      }\n      if (state.breakpoints[Breakpoints.XLarge]) {\n        this.isDesktop = true;\n        console.log('Matches XLarge viewport');\n      }\n\n      this.setCustomTemplate();\n      this.resetVerticalDisplay();\n    });\n  }\n\n  rowClick(row: any, rowIndex: any, context: any, event: any) {\n    console.log(row);\n    console.log(rowIndex);\n    console.log(context);\n\n    let actionButton: Button = null;\n    if (!CollectionUtils.isEmpty(this._listConfig.actions)) {\n      this._listConfig.actions.forEach(action => {\n        if (action.identifier == this._listConfig.rowAction) {\n          actionButton = action;\n        }\n      })\n\n      if (actionButton != null) {\n        let actionObj: Action = ButtonUtils.getAction(\n          this._listConfig.identifier,\n          rowIndex,\n          this.widgetArrayIndex,\n          actionButton.identifier,\n          this.parent,\n          event,\n          row,\n          context,\n          null);\n\n        this.onButtonClick.emit(actionObj);\n      }\n    }\n  }\n\n  resetVerticalDisplay(): void {\n    // if (!this.isCustomTemplate && !(this.isMobile && this._listConfig.mobile && this._listConfig.mobile.rowHeight)) {\n    if (this.isMobile && !(this._listConfig.mobile && this._listConfig.mobile.rowHeight) && !this.isCustomTemplate) {\n      this.displayVertical = true;\n    }\n  }\n\n  getButton(cell: CustomLayoutCell) {\n    let buttons: Array<CellControl> = new Array<CellControl>();\n    if (!CollectionUtils.isEmpty(cell) && !CollectionUtils.isEmpty(cell.controls)) {\n      buttons = cell.controls.filter(control => control.type == CellControllType.BUTTON).map(control => control.control);\n    }\n\n    return buttons;\n  }\n\n  tooltipPosition = { 'top': 0, 'left': 0 };\n  onHover(event, rowIndex, row) {\n    this.hoverRowData = row;\n    this.hoverRowIndex = rowIndex;\n\n    this.tooltipPosition.top = event.y;\n    this.tooltipPosition.left = event.x;\n  }\n\n  ngOnDestroy(): void {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\n\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nimport { ListComponent } from '../list.component';\nimport { ListType, Pagination } from '../../model';\nimport { Params } from '@angular/router';\nimport { Action } from '../../../button/model';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'mx-static-list', \n  templateUrl: './static-list.component.html',\n  styleUrls: ['./static-list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ], \n  encapsulation: ViewEncapsulation.None\n})\nexport class StaticListComponent extends ListComponent implements OnInit {\n  constructor(public ability: Ability, public breakpointObserver: BreakpointObserver) {\n    super(ability, breakpointObserver);\n    window.onscroll = ()=> {this.sticky()};\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  isList(): boolean {\n    return this.listConfig.listType == ListType.STATIC;\n  }\n\n  onSort(event) {\n    const queryParams: Params = { sorton: event['active'], sortdir: event['direction'] };\n\n    this.expandedRow = null;\n    \n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: queryParams,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: event\n    }\n\n    console.log(action);\n    this.onSortChange.emit(action);\n  }\n\n  onPage(pageInfo: Pagination) {\n    console.log(\"scrolled:-\",pageInfo)\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: pageInfo,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: pageInfo\n    };\n\n    console.log(action);\n    this.onPageChange.emit(action);\n  }\n\n  ngOnDestroy() {\n  }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nimport { ListComponent } from '../list.component';\nimport { ListType, Pagination } from '../../model';\nimport { Params } from '@angular/router';\nimport { Action } from '../../../button/model';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'mx-dynamic-list',\n  templateUrl: '../static-list/static-list.component.html',\n  styleUrls: ['../static-list/static-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class DynamicListComponent extends ListComponent implements OnInit {\n\n  constructor(\n    public ability: Ability,\n    public breakpointObserver: BreakpointObserver\n  ) {\n    super(ability, breakpointObserver);\n    window.onscroll = ()=> {this.sticky()};\n  }\n \n  ngOnInit() {\n    this.init();\n  }\n\n  isList(): boolean {\n    return this._listConfig.listType == ListType.DYNAMIC;\n  }\n\n  onSort(event) {\n    const queryParams: Params = { sorton: event['active'], sortdir: event['direction'] };\n\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: queryParams,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: event\n    };\n\n    console.log(action);\n    this.onSortChange.emit(action);\n  }\n\n  onPage(pageInfo: Pagination) {\n    console.log(pageInfo);\n    let action: Action = {\n      sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,\n      sourceIndex: this.sourceIndex ? this.sourceIndex : 0,\n      widgetArrayIndex: this.widgetArrayIndex,\n      action: this._listConfig.identifier,\n      actionData: pageInfo,\n      data: this.record,\n      originalData: this.record,\n      parentHierarchy: this.parent,\n      event: pageInfo\n    };\n\n    console.log(action);\n    this.onPageChange.emit(action);\n  }\n}\n","import { Component, OnInit, Inject, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { Form } from '../../../form/model';\nimport { List } from '../../../list/model';\nimport { KeyMap, FieldChange } from '../../../field/model';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\nexport interface DialogData {\n  type: string,\n  widgetConfig: Form | List,\n  sourceIndex: number,\n  context: any,\n  originalData: any,\n  keyMap: Array<KeyMap>,\n  reset: boolean,\n  currentInstance: any\n}\n\n@Component({\n  selector: 'mx-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit {\n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  constructor(public dialogRef: MatDialogRef<ModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private ability: Ability) { \n      AbilityUtils.setAbility(this.ability);\n    }\n\n  ngOnInit(): void {\n  }\n\n  click(event: any) {\n    this.dialogRef.close(event);\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    console.log(fieldChange);\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  formChange(form: any) {\n    this.onFormChange.emit(form);\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'app-admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.scss']\n})\nexport class AdminLayoutComponent implements OnInit {\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Button, ButtonColor, ButtonType, Badge, BadgeColor, ButtonGroup, HoverButton, ButtonSize } from '../../../button/model';\nimport { CollectionUtils } from '../../../utility';\nimport { CrudDescription, CrudHeaderIcon, CrudStyle } from '../../model';\nimport { FormDiaplyMode, FormTitleIconPosition } from '../../../form/model';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'mx-crud-header',\n  templateUrl: './crud-header.component.html',\n  styleUrls: ['./crud-header.component.scss']\n})\nexport class CrudHeaderComponent implements OnInit {\n  @Input() identifier: string;\n  @Input() title: string; \n  @Input() subtitle: string; \n  @Input() description: CrudDescription;\n  @Input() badges: Array<Badge>;\n  @Input() icon: CrudHeaderIcon;\n  @Input() style: CrudStyle;\n\n  @Input() _pageBackRoute: Array<string>;\n  get pageBackRoute(): Array<string> {\n    return this._pageBackRoute;\n  }\n  @Input()\n  set pageBackRoute(_pageBackRoute: Array<string>) {\n    this._pageBackRoute = _pageBackRoute;\n    this.addBackButton();\n  } \n\n  @Input() formDisplayMode: FormDiaplyMode;\n  @Input() actions: Array<Button | HoverButton | ButtonGroup>;\n  @Input() showHeader: boolean;\n  @Input() originalData: any;\n  @Input() context: any;\n  @Output() onButtonClick = new EventEmitter();\n\n  iconPosition: FormTitleIconPosition;\n  badgeButtons: Array<ButtonGroup> = new Array<ButtonGroup>();\n\n  constructor(private ability: Ability) { \n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.setIconPosition();\n    this.addBackButton();\n    this.transformBadgeButtons();\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this.icon && this.icon.position)  {\n      this.iconPosition = this.icon.position;\n    }\n  }\n\n  transformBadgeButtons(): void {\n    if (this.badges && this.badges.length > 0) {\n      let index: number = 0;\n      for (let badge of this.badges) {\n        this.badgeButtons.push({\n          identifier: 'crudHeaderBadge-' + index,\n          type: ButtonType.CHIP,\n          label: badge.content,\n          color: this.badgeColorToButtonColor(badge.color),\n          size: ButtonSize.MICRO,\n          groupIdentifier: \"crudHeaderGroup\",\n        });\n      }\n    }\n  }\n\n  badgeColorToButtonColor(color: BadgeColor): ButtonColor {\n    let buttonColor: ButtonColor;\n    if (color == BadgeColor.ASCENT) {\n      buttonColor = ButtonColor.ASCENT;\n    } else if (color == BadgeColor.PRIMARY) {\n      buttonColor = ButtonColor.PRIMARY;\n    } else if (color == BadgeColor.WARN) {\n      buttonColor = ButtonColor.WARN;\n    }\n\n    return buttonColor;\n  }\n\n  addBackButton(): void {\n    if (!this._pageBackRoute || CollectionUtils.isEmpty(this._pageBackRoute)) {\n      return;\n    }\n\n    let backButton: Button;\n\n    if (CollectionUtils.isEmpty(this.actions)) {\n      this.actions = new Array<Button | HoverButton | ButtonGroup>();\n    }\n\n    backButton = {\n      identifier: \"crudBackButton\",\n      label: \"Back\",\n      color: ButtonColor.PRIMARY,\n      size: ButtonSize.SMALL,\n      icon: \"keyboard_return\",\n      type: ButtonType.GHOST,\n      onlyIcon: false,\n      routerLink: this._pageBackRoute,\n      displayInFormModes: [\n        FormDiaplyMode.CRUD_FORM\n      ]\n    };\n\n    let backAlreadyAdded = false;\n    for (let action of this.actions) {\n      if (action.identifier == \"crudBackButton\") {\n        backAlreadyAdded = true;\n      }\n    }\n\n    if (!backAlreadyAdded) {\n      this.actions.unshift(backButton);\n\n      this.actions = JSON.parse(JSON.stringify(this.actions));\n    }\n  }\n\n  buttonClick(event: any) {\n    console.log(event);\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { FormDiaplyMode, FormHeader, FormField, FormDescription, FormTitleIconPosition, FormHelp } from '../../model';\nimport { Field, TextField, InputField, DropdownField, ImageField, CalendarField, AutocompleteField, CheckboxField, FileField, RadioField, SliderField, ToggleField, FieldChange, HtmlEditorField, LabelField } from '../../../field/model';\nimport { Button } from '../../../button/model';\nimport { FormGroup } from '@angular/forms';\nimport { CollectionUtils, ButtonUtils, FormUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\n\n@Component({\n  selector: 'mx-form-header',\n  templateUrl: './form-header.component.html',\n  styleUrls: ['./form-header.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormHeaderComponent implements OnInit {\n  @Input() form: FormGroup;\n  @Input() formHeaderConfig: FormHeader;\n  @Input() description: FormDescription;\n  @Input() help: FormHelp;\n  @Input() _formDisplayMode: FormDiaplyMode;\n  get formDisplayMode(): any {\n    return this._formDisplayMode;\n  }\n  @Input()\n  set formDisplayMode(_formDisplayMode: any) {\n    while (1) {\n      if (this.formInitialized) {\n        if (_formDisplayMode != this._formDisplayMode) {\n          this._formDisplayMode = _formDisplayMode;\n          this.init();\n        }\n        break;\n      }\n    }\n  }\n\n  @Input() formIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() context: any;\n  @Input() formActions: Array<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField | Button>;\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  title: string;\n  subtitle: string;\n  iconPosition: FormTitleIconPosition;\n  fields: Array<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField> = new Array<Field | TextField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField>();\n  buttons: Array<Button> = new Array<Button>();\n\n  formInitialized: boolean = true;\n\n  constructor(private ability: Ability) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.formInitialized = true;\n  }\n\n  init() {\n    this.getFormHeader();\n    this.setIconPosition();\n    this.saperateFormActions();\n  }\n\n  getFormHeader(): void {\n    let title: string = this.formHeaderConfig.title;\n    this.subtitle = this.formHeaderConfig.subtitle;\n\n    switch (this._formDisplayMode) {\n      case FormDiaplyMode.SEARCH: {\n        title = this.formHeaderConfig.searchModeTitle ? this.formHeaderConfig.searchModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.ADD: {\n        title = this.formHeaderConfig.addModeTitle ? this.formHeaderConfig.addModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.EDIT: {\n        title = this.formHeaderConfig.editModeTitle ? this.formHeaderConfig.editModeTitle : title;\n        break;\n      }\n      case FormDiaplyMode.VIEW: {\n        title = this.formHeaderConfig.viewModeTitle ? this.formHeaderConfig.viewModeTitle : title;\n        break;\n      }\n      default: {\n        title = this.formHeaderConfig.title;\n      }\n    }\n\n    if (this.widgetArrayIndex != null) {\n      title += \" - \" + (this.widgetArrayIndex + 1);\n    }\n\n    this.title = title;\n  }\n\n  setIconPosition() {\n    this.iconPosition = FormTitleIconPosition.BEFORE_TITLE;\n    if (this.formHeaderConfig.icon && this.formHeaderConfig.icon.position) {\n      this.iconPosition = this.formHeaderConfig.icon.position;\n    }\n  }\n\n  saperateFormActions() {\n    console.log(\"1\");\n    if (!CollectionUtils.isEmpty(this.formActions)) {\n      this.buttons = [];\n      this.fields = [];\n      \n      this.formActions.forEach(formAction => {\n        if (ButtonUtils.instanceOfAnyButtonType(formAction)) {\n          this.buttons.push(<Button>formAction);\n        } else {\n          this.fields.push(<Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField>formAction);\n        }\n      })\n\n      this.initFormGroup();\n    }\n  }\n\n  initFormGroup(): void {\n    if (this.fields && this.fields.length > 0) {\n      let formFields: Array<FormField> = new Array<FormField>();\n      this.fields.map(field => {\n        field.alwaysEnable = true;\n        formFields.push({ 'field': field, 'addMore': false })\n      });\n\n      this.form = FormUtils.initFormGroup(formFields, {}, {}, FormDiaplyMode.ADD);\n    }\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    //    console.log(fieldChange);\n\n    this.onFieldChange.emit(fieldChange);\n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n}\n","import { Component, OnInit, OnDestroy, Input, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\n\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\n\nimport { Form, FormDiaplyMode, FormField, FormLayout, FormLayoutRow, FormSectionExpand, FormButton, FormButtonLayout } from '../../model';\nimport { Field, FieldChange, KeyMap, KeyMapOptionType } from '../../../field/model';\nimport { FormGroup } from '@angular/forms';\nimport { Action } from '../../../button/model';\nimport { FormUtils, ObjectUtils, KeyMapUtils, ButtonUtils, CollectionUtils, FormCustomUtils, DependentUtils } from '../../../utility';\nimport { AbilityUtils } from '../../../utility/ability.utility';\nimport { Ability } from '@casl/ability';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'mx-form', \n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FormComponent implements OnInit, OnDestroy {\n  @Input() _formConfig: Form;\n  get formConfig(): any {\n    return this._formConfig;\n  }\n  @Input()\n  set formConfig(_formConfig: any) {\n    this._formConfig = _formConfig;\n    // this.headerReload = false;\n\n    while(1)  {\n      if (this.formInitialized) {\n        // setTimeout(() => {this.headerReload = true;}, 20);\n        console.log(\"1\");\n        this.init();\n        break;\n      }\n    }\n  }\n\n  @Input() sourceIdentifier: string;\n  @Input() sourceIndex: number;\n  @Input() widgetArrayIndex: number;\n  @Input() originalData: any;\n  @Input() keyMap: Array<KeyMap>; \n  @Output() onFormChange = new EventEmitter();\n  @Output() onFieldChange = new EventEmitter();\n  @Output() onButtonClick = new EventEmitter();\n\n  formFields: Array<FormField> = new Array<FormField>();\n  dependencies: any;\n\n  cellCount: number = 12;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  showButtons: boolean = true;\n\n  private _supportingRecord: any;\n  get supportingRecord(): any {\n    return this._supportingRecord;\n  }\n  @Input()\n  set supportingRecord(_supportingRecord: any) {\n    this._supportingRecord = _supportingRecord;\n\n    this.initFormGroup();\n  }\n\n  private _record: any;\n  get record(): any {\n    return this._record;\n  }\n  @Input()\n  set record(_record: any) {\n    this._record = _record;\n\n    if (this.originalData) { } else  {\n      this.originalData = this._record;\n    }\n    this.initFormGroup();\n  }\n\n  private _reset: boolean;\n  get reset(): boolean {\n    return this._reset;\n  }\n  @Input()\n  set reset(_reset: boolean) {\n    this._reset = _reset;\n\n    if (this._reset == true) {\n      FormUtils.reset(this.form, this.formConfig);\n    }\n  }\n\n  @Input()\n  form: FormGroup;\n  formLayouts: Array<FormLayout> = new Array<FormLayout>();\n\n  formButton: FormButton;\n  formButtonLayout: FormButtonLayout;\n  breakpointSubscription: Subscription;\n\n  formInitialized: boolean = true;\n  // headerReload: boolean = false;\n\n  //  unflatten = require('flat').unflatten;\n\n  constructor(private ability: Ability, private breakpointObserver: BreakpointObserver) {\n    AbilityUtils.setAbility(this.ability);\n  }\n\n  ngOnInit() {\n    this.formInitialized = true;\n  }\n\n  init()  {\n    this.getLayout();\n    this.getActions();\n    //    this.fieldDefaultSetting();\n    this.dependencies = { ...DependentUtils.getDependencyTree(this.formConfig.formFields), ...DependentUtils.getDependencyTreeForButton(this.formConfig.action) };\n\n    this.getCustomLayout();\n  }\n\n  getCustomLayout(): void {\n    if (this.formConfig.showCustomLayout) {\n      FormCustomUtils.setCustomLayout(this.formConfig, this.formConfig.layout);  \n    } else  {\n      this.formConfig.showCustomLayout = false;\n    }\n  }\n\n  getActions(): void {\n    if (this.formConfig && this.formConfig.action && (<FormButton>this.formConfig.action).align && (<FormButton>this.formConfig.action).buttons && (<FormButton>this.formConfig.action).buttons.length > 0) {\n      this.formButton = (<FormButton>this.formConfig.action);\n    }\n\n    if (this.formConfig && this.formConfig.action && (<FormButtonLayout>this.formConfig.action).cells && (<FormButtonLayout>this.formConfig.action).cells.length > 0) {\n      this.formButtonLayout = (<FormButtonLayout>this.formConfig.action);\n    }\n  }\n\n  dependentFieldChange(action: Action) {\n    if (this.formConfig.identifier == action.sourceIdentifier) {\n      let newRecord = ObjectUtils.unflatten(this.form.getRawValue());\n      this.record = { ...this.record, ...newRecord };\n      console.log(this.record);\n      this.initFormGroup();\n\n      this.showButtons = false;\n      setTimeout(() => {\n        this.showButtons = true;\n      }, 50);\n    }\n  }\n\n  fieldChange(fieldChange: FieldChange) {\n    this.onFieldChange.emit(fieldChange);\n    this.onFormChange.emit(this.form);\n  }\n\n  buttonClick(event: any) {\n    this.onButtonClick.emit(event);\n  }\n\n  fieldDefaultSetting(): void {\n    if (this.formConfig) {\n      for (let formField of this.formConfig.formFields) {\n        if (!(<Field>formField.field).fieldDisplayType) {\n          (<Field>formField.field).fieldDisplayType = this.formConfig.displayType;\n        }\n      }\n\n      if (!this.formConfig.displayInColumns) {\n        this.formConfig.displayInColumns = 1;\n      }\n    }\n\n    this.setTitle();\n  }\n\n  setTitle() {\n    if (this.formConfig.header) {\n      let title = this.formConfig.header.title;\n      switch (this.formConfig.displayMode) {\n        case FormDiaplyMode.ADD:\n          if (this.formConfig.header.addModeTitle) {\n            title = this.formConfig.header.addModeTitle;\n          }\n          break;\n        case FormDiaplyMode.EDIT:\n          if (this.formConfig.header.editModeTitle) {\n            title = this.formConfig.header.editModeTitle;\n          }\n          break;\n        case FormDiaplyMode.VIEW:\n          if (this.formConfig.header.viewModeTitle) {\n            title = this.formConfig.header.viewModeTitle;\n          }\n          break;\n        case FormDiaplyMode.BLOCKED:\n          if (this.formConfig.header.viewModeTitle) {\n            title = this.formConfig.header.viewModeTitle;\n          }\n          break;\n      }\n      this.formConfig.header.title = title;\n    }\n  }\n\n  initFormGroup(): void {\n    KeyMapUtils.setOptionssUsingValues(this.keyMap, false, KeyMapOptionType.FORM, this.formConfig, this._record);\n\n    this.form = FormUtils.initFormGroup(this.formConfig.formFields, this._supportingRecord, this._record, this.formConfig.displayMode);\n\n    this.onFormChange.emit(this.form);\n\n    if (this.isMobile || this.isTablet || this.isDesktop) {\n      this.resetDisplayInColumn();\n    }\n  }\n\n  // isValidButton(button: Button): boolean {\n  //   let isValid: boolean = false;\n\n  //   if (button.displayInFormModes.indexOf(this.formConfig.displayMode) > -1) {\n  //     isValid = true;\n  //   }\n  //   return isValid;\n  // }\n\n  // isNewRow(index: number): string {\n  //   let displayRow: string = \"\";\n  //   if (index % this.formConfig.displayInColumns == 0) {\n  //     displayRow = \"row\";\n  //   }\n\n  //   return displayRow;\n  // }\n\n  getFormValue(): any {\n    return FormUtils.getRawValue(this.form);\n  }\n\n  transformRows(): void {\n    let sectionLabel: string = \"\";\n    let formLayouts: Array<FormLayout> = new Array<FormLayout>();\n    let index: number = -1;\n\n    let displayInColumns = this.formConfig.displayInColumns;\n\n    if (this.formConfig.formFields && this.form) {\n      for (let formField of this.formConfig.formFields) { \n        if (this.form.controls[formField.field.key] && DependentUtils.displayDependencyField(formField.field.dependentOnFields, this._supportingRecord, this._record)) {\n          if (formField.separator || sectionLabel == \"\") {\n            formLayouts.push({\n              sectionLabel: formField && formField.separator && formField.separator.label ? formField.separator.label : \"\",\n              sectionIcon: formField && formField.separator && formField.separator.icon ? formField.separator.icon : \"\",\n              sectionExpandable: formField && formField.separator && formField.separator.expandable ? formField.separator.expandable : null,\n              rows: new Array<FormLayoutRow>()\n            });\n            sectionLabel = \"-\";\n            index++;\n          }\n\n          if (formLayouts[index]) {\n            let rLength = formLayouts[index].rows.length;\n\n            if (formLayouts[index].rows.length == 0) {\n              formLayouts[index].rows.push({ columns: new Array<FormField>() });\n              formLayouts[index].rows[0].columns = new Array<FormField>();\n            }\n\n            let cLength = this.formFieldRowColumnCount(formLayouts, index);\n\n            if (cLength >= displayInColumns) {\n              formLayouts[index].rows[rLength] = { columns: new Array<FormField>() };\n            }\n\n            formLayouts[index].rows[formLayouts[index].rows.length - 1].columns.push(formField);\n          }\n        }\n      }\n    }\n\n    this.formLayouts = formLayouts;\n  }\n\n  private formFieldRowColumnCount(formLayouts: Array<FormLayout>, index: number): number {\n    let colCount = 0;\n\n    for (let cCnt = 0; cCnt < formLayouts[index].rows[formLayouts[index].rows.length - 1].columns.length; cCnt++) {\n      if (formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns) {\n        colCount += formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns;\n      } else {\n        colCount += 1;\n        formLayouts[index].rows[formLayouts[index].rows.length - 1].columns[cCnt].displayInColumns = 1;\n      }\n    }\n\n    return colCount;\n  }\n\n  toggleList(formLayout: FormLayout): void {\n    if (formLayout.sectionExpandable && formLayout.sectionExpandable.allowed) {\n      if (formLayout.sectionExpandable.default == FormSectionExpand.EXPAND) {\n        formLayout.sectionExpandable.default = FormSectionExpand.COLLAPSE;\n      } else {\n        formLayout.sectionExpandable.default = FormSectionExpand.EXPAND;\n      }\n    }\n  }\n\n  getLayout(): void {\n    this.breakpointSubscription = this.breakpointObserver.observe([\n      Breakpoints.XSmall,\n      Breakpoints.Small,\n      Breakpoints.Medium,\n      Breakpoints.Large,\n      Breakpoints.XLarge\n    ]).subscribe((state: BreakpointState) => {\n      if (state.breakpoints[Breakpoints.XSmall]) {\n        this.isMobile = true;\n        console.log('Matches XSmall viewport');\n      }\n      if (state.breakpoints[Breakpoints.Small]) {\n        this.isTablet = true;\n        console.log('Matches Small viewport');\n      }\n      if (state.breakpoints[Breakpoints.Medium]) {\n        this.isDesktop = true;\n        console.log('Matches Medium  viewport');\n      }\n      if (state.breakpoints[Breakpoints.Large]) {\n        this.isDesktop = true;\n        console.log('Matches Large viewport');\n      }\n      if (state.breakpoints[Breakpoints.XLarge]) {\n        this.isDesktop = true;\n        console.log('Matches XLarge viewport');\n      }\n\n      this.resetButtonDisplay();\n      this.resetDisplayInColumn();\n    });\n  }\n\n  resetButtonDisplay(): void {\n    if (this.formConfig && this.formConfig.action && !CollectionUtils.isEmpty((<FormButton>this.formConfig.action).buttons)) {\n      if ((this.isMobile || this.isTablet) && !ButtonUtils.hasWidth((<FormButton>this.formConfig.action).buttons)) {\n        ButtonUtils.setEqualWidth((<FormButton>this.formConfig.action).buttons);\n      }\n    } \n  }\n\n  resetDisplayInColumn(): void {\n    if (this.formConfig && this.formConfig.displayInColumns) {\n      if (this.isMobile) {\n        this.cellCount = 4;\n        this.formConfig.displayInColumns = this.getNewDisplayInColumn(\"mobile\", this.formConfig.displayInColumns);\n      }\n      if (this.isTablet) {\n        this.cellCount = 8;\n        this.formConfig.displayInColumns = this.getNewDisplayInColumn(\"tablet\", this.formConfig.displayInColumns);\n      }\n    }\n\n    if (this.formConfig && !CollectionUtils.isEmpty(this.formConfig.formFields)) {\n      this.formConfig.formFields.forEach(formField => {\n        if (formField.displayInColumns) {\n          if (this.isMobile) {\n            this.cellCount = 4;\n            formField.displayInColumns = this.getNewDisplayInColumn(\"mobile\", formField.displayInColumns);\n          }\n          if (this.isTablet) {\n            this.cellCount = 8;\n            formField.displayInColumns = this.getNewDisplayInColumn(\"tablet\", formField.displayInColumns);\n          }\n        } else  { \n          formField.displayInColumns = 1;\n        }\n      })\n    }\n\n    this.fieldDefaultSetting();\n    this.transformRows();\n  }\n\n  getNewDisplayInColumn(device: string, displayInColumn: number): number {\n    let displayInColumnMap: Map<string, Map<number, number>> = new Map<string, Map<number, number>>();\n\n    let mobileMap: Map<number, number> = new Map<number, number>();\n    mobileMap.set(12, 1);\n    mobileMap.set(11, 1);\n    mobileMap.set(10, 1);\n    mobileMap.set(9, 1);\n    mobileMap.set(8, 1);\n    mobileMap.set(7, 1);\n    mobileMap.set(6, 1);\n    mobileMap.set(5, 1);\n    mobileMap.set(4, 1);\n    mobileMap.set(3, 1);\n    mobileMap.set(2, 1);\n    mobileMap.set(1, 1);\n    displayInColumnMap.set(\"mobile\", mobileMap);\n\n    let tabletMap: Map<number, number> = new Map<number, number>();\n    tabletMap.set(12, 2);\n    tabletMap.set(11, 2);\n    tabletMap.set(10, 2);\n    tabletMap.set(9, 2);\n    tabletMap.set(8, 2);\n    tabletMap.set(7, 2);\n    tabletMap.set(6, 2);\n    tabletMap.set(5, 2);\n    tabletMap.set(4, 2);\n    tabletMap.set(3, 2);\n    tabletMap.set(2, 2);\n    tabletMap.set(1, 1);\n    displayInColumnMap.set(\"tablet\", tabletMap);\n\n    return displayInColumnMap.get(device).get(displayInColumn);\n  }\n\n  ngOnDestroy(): void {\n    if (this.breakpointSubscription) {\n      this.breakpointSubscription.unsubscribe();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CrudHeader, ActionPage, CrudList, CrudListData, Crud, CrudSearch, CrudTab } from '../../model';\nimport { Button, Badge, Action } from '../../../button/model';\nimport { KeyMap } from '../../../field/model';\nimport { List } from '../../../list/model';\nimport { CollectionUtils, SecurityUtils, CrudUtils } from '../../../utility';\nimport { FormDiaplyMode } from '../../../form/model';\n\n//extends ModalInterfaceComponent\n@Component({\n  selector: 'mx-crud-list-interface',\n  templateUrl: './crud-list.component.html',\n  styleUrls: ['./crud-list.component.scss']\n})\nexport class CrudListComponentInterface  implements OnInit {\n  //  Common Config \n  identifier: string;\n  header: CrudHeader;\n  actions: Array<Button>;\n  actionPages: Array<ActionPage>;\n  formReset: boolean;\n  listReset: boolean;\n  keyMap: Array<KeyMap> = new Array<KeyMap>();\n\n  //  List Config\n  quickLinks: Array<Button>;\n  searchConfig: CrudSearch;\n  searchData: any;\n  listConfig: CrudList;\n  listPageBackRoute: Array<string>;\n\n  expandRowIndex: number;\n  \n  configListData: CrudListData; \n  originalData: any;\n\n  constructor() { \n    // super();\n  }\n\n  ngOnInit(): void {\n    this.setCommonConfig();\n    this.setListConfig();\n  }\n\n  setCommonConfig(): void {\n\n  }\n  setListConfig(): void{\n\n  }\n  setBadges(): Array<Badge>{\n    return null;\n  }\n\n  setCommonConfigUsingCrud(crud: Crud): void {\n    //  Config\n    this.identifier = crud.identifier\n    this.header = crud.header;\n    \n    //  Tab wise data/setting\n    //this.keyMap = {};\n    this.listReset = true;\n  }\n\n  setListConfigUsingCrud(crud: Crud): void {\n    //  Config\n    this.quickLinks = crud.quickLinks;\n    this.searchConfig = crud.search;\n    this.listConfig = crud.list;\n    this.actions = crud.actions;\n\n    this.setConfigListData([], []);\n  }\n \n  loadFilterParams(filterStr: string) {\n    if (filterStr != null) {\n      const filter = SecurityUtils.decrypt(filterStr);\n\n      this.configListData.searchData = filter;\n    } else {\n    }\n    this.configListData.pageNo = 1;\n  }\n  \n  setConfigListData(records: Array<any>, badges: Array<Badge>, route?: Array<string>): void {\n    let configListDataNew = {\n      pageBackRoute: route, \n      badges: badges,\n      records: records,\n      originalData: this.originalData\n    }\n\n    this.configListData = { ...this.configListData, ...configListDataNew };    \n  }\n\n  getRowKey(lIndex: number): Array<string> {\n    let keys: Array<string>;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex]) {\n      keys = this.listConfig.lists[lIndex].uniqueKeys;\n    } else {\n      keys = new Array<string>();\n    }\n\n    return keys;\n  }\n\n  getChildRowKey(lIndex: number): Array<string> {\n    let keys: Array<string>;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child && this.listConfig.lists[lIndex].child.record && (<List>this.listConfig.lists[lIndex].child.record).uniqueKeys) {\n      keys = (<List>this.listConfig.lists[lIndex].child.record).uniqueKeys;\n    } else {\n      keys = new Array<string>();\n    }\n\n    return keys;\n  }\n\n  getChildRecordIdentifier(lIndex: number): string {\n    let childRecordIdentifier: string;\n\n    if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child) {\n      childRecordIdentifier = this.listConfig.lists[lIndex].child.recordIdentifier;\n    } else {\n      childRecordIdentifier = \"\";\n    }\n\n    return childRecordIdentifier;\n  }\n\n  beforeChangeMerge(action: Action, sourceIdentifier: string): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if (this.configListData.records[lIndex].rows[rIndex][key] != action.originalData[key]) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              this.configListData.records[lIndex].rows[rIndex] = { ...action.originalData, ...action.data };\n\n              rows = this.configListData.records[lIndex].rows;\n              rowIndex = rIndex;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  addRow(action: Action, sourceIdentifier: string, data?: any): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1; \n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          if (CollectionUtils.isEmpty(data))  {\n            this.configListData.records[lIndex].rows.push({});\n          } else  {\n            this.configListData.records[lIndex].rows.push(data);\n          }\n\n          rows = this.configListData.records[lIndex].rows;\n          rowIndex = this.configListData.records[lIndex].rows.length - 1;\n          break;\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  afterChangeMerge() {\n    this.configListData = JSON.parse(JSON.stringify(this.configListData));\n    this.listReset = true;\n  }\n\n\n  beforeChildChangeMerge(action: Action, sourceIdentifier: string): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if ((<Array<string>>action.parentHierarchy.parent['key']).indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);\n\n              for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {\n                let keys = this.getChildRowKey(lIndex);\n\n                let isChildMatchingRow = true;\n                for (let key of keys) {\n                  if (this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex][key] != action.originalData[key]) {\n                    isChildMatchingRow = false;\n                  }\n                }\n\n                if (isChildMatchingRow) {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex] = { ...action.originalData, ...action.data };\n\n                  rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];\n                  rowIndex = cIndex;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  addChildRow(action: Action, sourceIdentifier: string, data?: any): { rows: Array<any>, rowIndex: number } {\n    let rows: Array<any>;\n    let rowIndex: number = -1;\n\n    if (this.configListData && this.configListData.records) {\n      for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {\n        if (this.listConfig.lists[lIndex].identifier == action.sourceIdentifier) {\n          for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {\n            let keys = this.getRowKey(lIndex);\n\n            let isMatchingRow = true;\n            for (let key of keys) {\n              if ((<Array<string>>action.originalData[key]).indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {\n                isMatchingRow = false;\n              }\n            }\n\n            if (isMatchingRow) {\n              let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);\n\n              for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {\n                if (CollectionUtils.isEmpty(data))  {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push({});\n                } else  {\n                  this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push(data);\n                }\n\n                rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];\n                rowIndex = cIndex;\n                break;\n              }\n            }\n          } \n        }\n      }\n    }\n\n    return { rows: rows, rowIndex: rowIndex };\n  }\n\n  setTabDisplayMode(crudTabs: Array<CrudTab>, formDisplayMode: FormDiaplyMode) {\n    CrudUtils.setDisplayType(crudTabs, formDisplayMode);\n  }\n\n  afterChildChangeMerge() {\n    this.afterChangeMerge();\n  }\n\n  setHeaderTitle(title: string)  {\n    this.header.title = title;\n  }\n\n  setHeaderDescription(description: string)  {\n    this.header.description.text = description;\n  }\n}\n","import { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl, NgControl } from '@angular/forms';\nimport { MatAutocomplete, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { ChipField, Chip, ChipItemChangedEvent, ChipOrientation, RemoveFunc } from '../../model/chips.model';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { DropdownOption } from '../../model';\nimport { FieldComponent } from '../field/field.component';\nimport { Ability } from '@casl/ability';\nimport { Router } from '@angular/router';\nimport { CollectionUtils, FieldUtils } from '../../../utility';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'mx-chips',\n    templateUrl: './chips.component.html',\n    styleUrls: ['./chips.component.scss'],\n    // providers: [\n    //     { provide: MatFormFieldControl, useExisting: ChipsComponent }\n    // ]\n})\nexport class ChipsComponent extends FieldComponent implements OnInit {\n    @Input() field: ChipField = null;\n    @Input() disabled: boolean;\n    @Input() formControl: FormControl;\n\n    @Input() errorMatcher: ErrorStateMatcher;\n\n    @ViewChild('input') input: ElementRef<HTMLInputElement>;\n    @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n    @Output() onListChange: EventEmitter<ChipItemChangedEvent> = new EventEmitter();;\n\n    placeholder: string = '';\n    separatorKeysCodes: number[] = [ENTER];//SPACE\n    enableDragAndDrop: boolean;\n    orientation: ChipOrientation;\n    chips: Chip[] = [];\n    options: Array<DropdownOption>;\n    addOnBlur: boolean = true;\n    removable: boolean;\n\n    constructor(public router: Router, public ability: Ability) {\n        super(router, ability);\n    }\n    stateChanges: Observable<void>;\n    id: string;\n    ngControl: NgControl;\n    focused: boolean;\n    empty: boolean;\n    shouldLabelFloat: boolean;\n    errorState: boolean;\n    controlType?: string;\n    autofilled?: boolean;\n    userAriaDescribedBy?: string;\n    setDescribedByIds(ids: string[]): void {\n        throw new Error('Method not implemented.');\n    }\n    onContainerClick(event: MouseEvent): void {\n        throw new Error('Method not implemented.');\n    }\n\n    ngOnInit() {\n        this.placeholder = this.field.placeholder || '';\n        this.orientation = this.field.orientation || ChipOrientation.HORIZONTAL;\n        this.options = this.field.options || [];\n\n        this.setChips();\n    }\n\n    setChips() {\n        let values: Array<string> = this.formControl.value;\n        let isReadOnly: boolean = FieldUtils.isFieldDisabled(this.field, this.displayMode, values);\n\n        if (!CollectionUtils.isEmpty(values)) {\n            values.forEach(value => {\n                if (!CollectionUtils.isEmpty(this.field.options)) {\n                    let optionMatch: DropdownOption = null;\n                    this.field.options.forEach(option => {\n                        if (option.key == value) {\n                            optionMatch = option;\n                        }\n                    });\n\n                    if (optionMatch != null) {\n                        this.chips.push({\n                            key: optionMatch.key,\n                            value: optionMatch.value,\n                            disabled: isReadOnly,\n                            removable: true\n                        });\n                    } else {\n                        this.chips.push({\n                            key: value,\n                            value: value,\n                            disabled: isReadOnly,\n                            removable: true\n                        });\n                    }\n                } else {\n                    this.chips.push({\n                        key: value,\n                        value: value,\n                        disabled: isReadOnly,\n                        removable: true\n                    });\n                }\n            });\n        } else {\n            this.chips = [];\n        }\n    }\n\n    addItem = ($event: MatChipInputEvent): void => {\n        const input = $event.input;\n        const value = $event.value;\n\n        let keyExists = this.keyExists(value.trim());\n\n        // Add our item\n        if ((value || '').trim() && !keyExists) {\n            this.chips.push({\n                key: value.trim(),\n                value: value.trim(),\n                disabled: false,\n                removable: this.removable || true\n            });\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n        this.triggerChangedEvent($event as any);\n    }\n\n    keyExists(value: string): boolean {\n        let keyExists = false;\n        this.chips.forEach(chip => {\n            if (chip.key == value) {\n                keyExists = true;\n            }\n        });\n\n        return keyExists;\n    }\n\n    removeItem = ($event: Event, item: Chip, index: number) => {\n        this.chips.splice(index, 1);\n        // if (this.isFunctionDefined(this.field.onRemoveItem)) {\n        //     this.field.onRemoveItem(item.value).subscribe(result => {\n        //         if (result) {\n        //             this.chips.splice(index, 1);\n        //             this.triggerChangedEvent($event);\n        //         }\n        //     });\n        // }\n    }\n\n    drop = ($event: CdkDragDrop<Chip[]>) => {\n        moveItemInArray(this.chips, $event.previousIndex, $event.currentIndex);\n        this.triggerChangedEvent($event as any);\n    }\n\n    triggerChangedEvent = ($event: Event | MatAutocompleteSelectedEvent) => {\n        let values: Array<string> = this.chips.map(x => x.key);\n        this.formControl.setValue(values);\n        this.onListChange.emit(<ChipItemChangedEvent>{\n            values: values,\n            event: $event\n        });\n    }\n\n    onSelected = (event: MatAutocompleteSelectedEvent): void => {\n        let keyExists = this.keyExists(event.option.value['key']);\n\n        if (!keyExists) {\n            this.chips.push({\n                key: event.option.value['key'],\n                value: event.option.value['value'],\n                removable: true,\n                disabled: false\n            });\n            this.input.nativeElement.value = '';\n            this.triggerChangedEvent(event);\n        }\n    }\n\n    isFunctionDefined = (func: RemoveFunc) => {\n        return typeof func == 'function';\n    }\n\n    errors(): Array<{ error: string, message: string }> {\n        let errors: Array<{ error: string, message: string }> = [];\n        if (this.formControl != undefined) {\n            if (this.formControl && this.formControl.errors) {\n\n                Object.keys(this.formControl.errors).forEach(keyError => {\n                    if (this.field.validations) {\n                        for (let validation of this.field.validations) {\n                            if (keyError === validation.message.key) {\n                                errors[errors.length] = { error: keyError, message: validation.message.message };\n                            }\n                        }\n                    }\n                });\n            }\n        }\n        return errors;\n    }\n}\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ToolbarField, MenuItem } from '../../model/toolbar.model';\n\n@Component({\n    selector: 'mx-toolbar',\n    templateUrl: './toolbar.component.html',\n    styleUrls: ['./toolbar.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ToolbarComponent implements OnInit {\n    @Input() field: ToolbarField = null;\n    title: string;\n    menuItems: MenuItem[];\n\n    constructor() { }\n\n    ngOnInit() {\n         this.title = this.field.title;\n         this.menuItems = this.field.menuItems;\n    }\n\n    onMenuClick = (item: MenuItem)=> {\n        item.onClick(item);\n    }\n    \n}\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MultiImage, MultiImageField } from '../../model/multi-image-field.model';\n\n@Component({\n    selector: 'mx-multi-image',\n    templateUrl: './multi-image.component.html',\n    styleUrls: ['./multi-image.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MultiImageComponent implements OnInit {\n    @Input() field: MultiImageField = null;\n    @Input() control: FormControl;\n    @Input() disabled: boolean;\n\n    radius: number;\n    count: number;\n    showCount: boolean;\n    showAll: boolean;\n    images: MultiImage[] | string[];\n    lastItemLabel: string;\n    showLastItem: boolean;\n    hideTooltip: boolean;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.radius = (this.field.radius || 5) * 10;\n\n        this.showCount = this.field.showCount || false;\n        this.showAll = this.field.showAll || false;\n        this.images = this.field.images;\n        this.images = this.images ? this.images : <Array<string> | Array<MultiImage>>this.field.value;\n        this.count = this.field.count || (this.images ? this.images.length : 0);\n        \n        if (this.showCount && (this.showAll || !this.showAll)) {\n            this.lastItemLabel = '+' + (this.images.length - this.count);\n        } else if (this.showAll && !this.showCount) {\n            this.lastItemLabel = '>';\n        }\n\n        this.hideTooltip = this.images && this.images.length > 0 && (typeof this.images[0] == 'string');\n    }\n\n    onShowAllClick = () => {\n        this.count = this.images.length;\n    }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Form, FormDiaplyMode } from '../../../form/model';\nimport { DisplayMode, FieldChange, KeyMap } from '../../model';\nimport { FieldComponent } from '../field/field.component';\nimport { ParagraphField, TokenType } from '../../model/paragraph.model';\nimport { Ability } from '@casl/ability';\nimport { FormUtils, ButtonUtils } from '../../../utility';\n\n@Component({\n    selector: 'mx-paragraph',\n    templateUrl: './paragraph.component.html',\n    styleUrls: ['./paragraph.component.scss'],\n    encapsulation: ViewEncapsulation.None\n}) \nexport class ParagraphComponent extends FieldComponent implements OnInit {\n    tokens: Array<TokenType> = new Array<TokenType>();\n    paragraphField: ParagraphField;\n    @Output() onButtonClick = new EventEmitter();\n\n    constructor(public router: Router, public ability: Ability) {\n        super(router, ability);\n    }\n\n    ngOnInit() {\n        this.paragraphField = (<ParagraphField>this.field);\n        let words = this.paragraphField.template.split(' ');\n\n        if (words && words.length > 0) {\n            words.map(word => {\n                var key = word.slice(1, -1);\n\n                if (word.indexOf('{') == -1) {\n                    this.tokens.push({ type: 'LABEL', value: word });\n                } else if (word.indexOf('{') != -1 && this.paragraphField.fieldContexts[key] != undefined) {\n                    this.tokens.push({ type: 'FIELD', field: this.paragraphField.fieldContexts[key] });\n                    if (this.paragraphField.isReadOnly) {\n                        this.paragraphField.fieldContexts[key]['isReadOnly'] = this.paragraphField.isReadOnly;\n                    }\n                    if (this.paragraphField.displayMode == DisplayMode.LABEL) {\n                        this.paragraphField.fieldContexts[key]['displayMode'] = DisplayMode.LABEL;\n                    }\n                } else if (word.indexOf('{') != -1 && this.paragraphField.buttonContexts[key] != undefined) {\n                    this.tokens.push({ type: 'BUTTON', button: this.paragraphField.buttonContexts[key] });\n                    // if (this.paragraphField.isReadOnly) {\n                    //     this.paragraphField.buttonContexts[key]['displayMode'] = DisplayMode.DISABLED;\n                    // }\n                }\n            })\n        }\n    }\n\n    fieldChange(fieldChange: FieldChange) {\n        this.onFieldChange.emit(fieldChange);\n    }\n\n    isButtonDisable()   {\n        return ButtonUtils.isDisable(this.displayMode) || this.paragraphField.isReadOnly;\n    }\n\n    getFormValue(): any {\n        return FormUtils.getRawValue(this.form);\n    }\n\n    buttonClick(event: any) {\n        console.log(event);\n        this.onButtonClick.emit(event);\n    }\n}\n","\n\nimport { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({ name: 'highlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, search): string {\n    const pattern = search\n      .replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n      .split(' ')\n      .filter(t => t.length > 0)\n      .join('|');\n    const regex = new RegExp(pattern, 'gi');\n\n    return search ? text.replace(regex, match => `<b>${match}</b>`) : text;\n  }\n}","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { CollectionUtils, StringUtils } from '../../../utility';\nimport { Field, HelpTextOrientation } from '../../model';\n\n@Component({\n    selector: 'mx-tooltip',\n    templateUrl: './tooltip.component.html',\n    styleUrls: ['./tooltip.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TooltipComponent implements OnInit {\n    @Input() field: Field = null;\n    @Input() control: FormControl;\n    hasFieldNavigate: boolean;\n    placement: string;\n    constructor() { }\n\n    ngOnInit() {\n        this.hasFieldNavigate = this.fieldNavigate();\n        if(this.field.help && this.field.help.orientation) {\n            this.placement = this.field.help.orientation.toLowerCase();\n        } else {\n            this.placement ='bottom'\n        };\n    }\n\n    fieldNavigate(): boolean {\n        let hasFieldNavigate: boolean = false;\n        if (this.field.navigate && (!StringUtils.isEmpty(this.field.navigate.icon) || !StringUtils.isEmpty(this.field.navigate.text)) && !CollectionUtils.isEmpty(this.field.navigate.routeTo)) {\n            hasFieldNavigate = true;\n        }\n        return hasFieldNavigate;\n    }\n\n}\n","import { Directive, Input, Output,EventEmitter } from '@angular/core';\n\n\n@Directive({\n  selector: '[ngInit]'\n}) \nexport class NgInit {\n  @Output()\n    ngInit: EventEmitter<any> = new EventEmitter();\n\n    ngOnInit() {\n        this.ngInit.emit();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(protected sanitizer: DomSanitizer) {\n  }\n\n  transform(value: any, args?: any): SafeHtml {\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n\n}","import {\n  Directive,\n  Input,\n  OnChanges,\n  ComponentRef,\n  ViewContainerRef,\n  Compiler,\n  ModuleWithComponentFactories,\n  Component,\n  NgModule,\n  Type\n} from '@angular/core';\nimport { CommonModule } from '@angular/common'\n//import { MaterialWidgetModule } from '../../ngx-material-widget.module';\n\n@Directive({\n  selector: '[cfTemplate]'\n})\nexport class cfTemplateDirective implements OnChanges {\n  @Input() cfTemplate: string;\n  @Input() cfTemplateContext: any;\n  @Input() currentComponent: any;\n\n  componentRef: ComponentRef<any>;\n\n  constructor(private vcRef: ViewContainerRef, private compiler: Compiler) { }\n\n  ngOnChanges() {\n    if (!this.cfTemplate) {\n      if (this.componentRef) {\n        this.updateProperties();\n        return;\n      }\n      throw Error('You must provide template.');\n    }\n\n    this.vcRef.clear();\n    this.componentRef = null;\n\n    const component = this.createDynamicComponent(this.cfTemplate);\n    const module = this.createDynamicModule(component);\n\n    this.compiler.compileModuleAndAllComponentsAsync(module)\n      .then((moduleWithFactories: ModuleWithComponentFactories<any>) => {\n        let componentFactory = moduleWithFactories.componentFactories.find(x => x.componentType === component);\n\n        this.componentRef = this.vcRef.createComponent(componentFactory);\n        this.updateProperties();\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  updateProperties() {\n    for (var prop in this.cfTemplateContext) {\n      this.componentRef.instance[prop] = this.cfTemplateContext[prop];\n    }\n  }\n\n  private createDynamicComponent(template: string) {\n    @Component({\n      selector: 'mx-dynamic-component',\n      template: template\n    })\n    class CustomDynamicComponent { }\n    return CustomDynamicComponent;\n  }\n\n  private createDynamicModule(component: Type<any>) {\n    @NgModule({\n      // Every element you might need must be known for this module\n//      imports: [CommonModule, MaterialWidgetModule],\n      imports: [CommonModule],\n      declarations: [component]\n    })\n    class CfDynamicModule { }\n    return CfDynamicModule;\n  }\n}","import { BreakpointObserver, Breakpoints } from \"@angular/cdk/layout\";\nimport {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { MatSidenav } from \"@angular/material/sidenav\";\nimport { Navigation, NavigationPannel } from \"../../model\";\n\n@Component({\n  selector: \"admin-navigation\",\n  templateUrl: \"./navigation.component.html\",\n  styleUrls: [\"./navigation.component.scss\"],\n})\nexport class NavigationComponent implements OnInit {\n  @ViewChild(\"sidenav\") sidenav: MatSidenav;\n  @Input() isExpanded = true;\n  @Input() navigationPanel: NavigationPannel;\n  @Input() navigation: Array<Navigation>;\n  @Output() logout = new EventEmitter<any>();\n  showSubmenu: Array<boolean> = [false];\n  isShowing = false;\n  showSubSubMenu: Array<any> = [[false, false], false];\n\n  constructor(\n    public breakpointObserver: BreakpointObserver,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  ngAfterViewChecked(): void {\n    //Called after every check of the component's view. Applies to components only.\n    //Add 'implements AfterViewChecked' to the class.\n    this.ref.detectChanges();\n  }\n\n  mouseenter() {\n    if (!this.isExpanded) {\n      this.isShowing = true;\n    }\n  }\n\n  mouseleave() {\n    if (!this.isExpanded) {\n      this.isShowing = false;\n    }\n  }\n\n  logoutEvent() {\n    this.logout.emit();\n  }\n\n  ngOnInit() {}\n\n  ngAfterViewInit(): void {\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\n    //Add 'implements AfterViewInit' to the class.\n    this.navigation = this.navigationPanel.navigations;\n    this.isExpanded = (!this.navigationPanel.defaultCollapse);\n    this.breakpointObserver\n      .observe([Breakpoints.HandsetLandscape, Breakpoints.HandsetPortrait])\n      .subscribe((result) => {\n        if (result.matches) {\n          this.isExpanded = false;\n        }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n//import { BrowserModule } from '@angular/platform-browser';\n//import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n//import { NoopAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet'\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\n// import { MatNativeDateModule } from '@angular/material/core';\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n//import { MatFileUploadModule } from 'mat-file-upload';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n//import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\n//import { EditorModule } from '@progress/kendo-angular-editor';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AbilityModule } from '@casl/angular';\nimport { Ability, PureAbility } from '@casl/ability';\n\nimport { TooltipModule } from 'ng2-tooltip-directive';\n\n//import { ButtonModule } from './button/button.module';\nimport { ButtonComponent } from './button/component/button/button.component'; \nimport { ButtonGroupComponent } from './button/component/button-group/button-group.component';\nimport { CrudFormComponent } from './crud/component/crud-form/crud-form.component';\nimport { CrudListComponent, BottomSearchSheet } from './crud/component/crud-list/crud-list.component';\nimport { FileUploaderComponent } from './field/component/file-uploader/file-uploader.component';\nimport { FieldComponent } from './field/component';\nimport { StaticListComponent } from './list/component/static-list/static-list.component';\nimport { DynamicListComponent } from './list/component/dynamic-list/dynamic-list.component';\nimport { ModalComponent } from './modal/component/modal/modal.component';\nimport { ButtonDeleteConfirmationComponent } from './button/component/button-delete-confirmation/button-delete-confirmation.component';\nimport { AdminLayoutComponent } from './page/component/admin-layout/admin-layout.component';\nimport { ListComponent } from './list/component/list.component'; \nimport { CrudHeaderComponent } from './crud/component/crud-header/crud-header.component';\nimport { FormComponent, FormHeaderComponent } from './form/component';\nimport { CrudListComponentInterface } from './crud/interface/crud-list/crud-list-interface.component';\nimport { QuillModule } from 'ngx-quill';\nimport { ChipsComponent } from './field/component/chips/chips.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ToolbarComponent } from './field/component/toolbar/toolbar.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport { MultiImageComponent } from './field/component/multi-image/multi-image.component';\nimport { ParagraphComponent } from './field/component/paragraph/paragraph.component';\nimport { HighlightPipe } from './field/pipes/highlightPipe';\n//import { DynamicModule } from 'ng-dynamic-component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { MdePopoverModule } from '@material-extended/mde';\nimport { TooltipComponent } from './field/component/tooltip/tooltip.component';\nimport { NgInit } from './list/directives/ngInit.directive';\nimport { SafeHtmlPipe } from './list/pipes/safeHtml.pipe';\nimport { cfTemplateDirective } from './list/directives/compile.directive';\nimport { NavigationComponent } from './navigation/component/navigation/navigation.component';\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    ButtonDeleteConfirmationComponent,\n    CrudHeaderComponent,\n    CrudFormComponent,\n    CrudListComponent,\n    CrudListComponentInterface,\n    BottomSearchSheet,\n    FileUploaderComponent,\n    FieldComponent,\n    // FieldHorizontalLayoutComponent,\n    // FieldVerticalLayoutComponent,\n    // FieldInlineLayoutComponent,\n    // FieldLayoutComponent,\n    FormHeaderComponent,\n    FormComponent,\n    AdminLayoutComponent, \n    ListComponent,\n    StaticListComponent,\n    DynamicListComponent,\n    ModalComponent,\n    ChipsComponent,\n    ToolbarComponent,\n    MultiImageComponent,\n    ParagraphComponent,\n    HighlightPipe,\n    TooltipComponent,\n    NgInit,\n    SafeHtmlPipe,\n    cfTemplateDirective,\n    NavigationComponent\n  ], \n  imports: [\n    // ButtonModule,\n    // CrudModule,\n    // FieldModule,\n    // ListModule,\n    // ModalModule,\n    // NavigationModule,\n    // PageModule,\n    // PrivilegeModule, \n    // SettingModule\n    CommonModule,\n//    BrowserModule,\n//    BrowserAnimationsModule,\n//    NoopAnimationsModule,\n    HttpClientModule,\n    RouterModule,\n//    DynamicModule,\n    MdePopoverModule,\n    ReactiveFormsModule,\n    TooltipModule,\n    LayoutModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatIconModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatCardModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatSidenavModule,\n    MatBottomSheetModule,\n    MatDividerModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatMomentDateModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatListModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    DragDropModule,\n    // FroalaEditorModule.forRoot(), \n    // FroalaViewModule.forRoot(),\n    //    MatFileUploadModule,\n    // ReactiveFormsModule,\n\n    // EditorModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatSidenavModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatDividerModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    QuillModule.forRoot(),\n    AbilityModule,\n    FlexLayoutModule,\n    MatToolbarModule,\n    InfiniteScrollModule\n  ],\n  exports: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    CrudListComponentInterface,\n    CrudFormComponent,\n    CrudListComponent,\n    FileUploaderComponent,\n    FieldComponent,\n    // FieldHorizontalLayoutComponent,\n    // FieldVerticalLayoutComponent,\n    // FieldInlineLayoutComponent,\n    // FieldLayoutComponent,\n    FormComponent,\n    FormHeaderComponent,\n    StaticListComponent,\n    DynamicListComponent,\n    ModalComponent,\n//    DynamicModule,\n    MdePopoverModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatIconModule,\n    MatBadgeModule,\n    MatDialogModule,\n    MatCardModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatSidenavModule,\n    MatBottomSheetModule,\n    MatDividerModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatMomentDateModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatListModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatGridListModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n\n    // FroalaEditorModule.forRoot(), \n    // FroalaViewModule.forRoot(),\n    //    MatFileUploadModule,\n    // ReactiveFormsModule,\n\n    // EditorModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatSidenavModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatDividerModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatCheckboxModule,\n    MatDialogModule,\n    InfiniteScrollModule,\n    // AdminLayoutComponent\n    NgInit,\n    SafeHtmlPipe,\n    cfTemplateDirective,\n    NavigationComponent\n  ],\n  providers: [\n    { provide: Ability, useValue: new Ability() },\n    { provide: PureAbility, useExisting: Ability },\n  ]\n})\nexport class MaterialWidgetModule { }\n","import { Modal } from '../model';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\nimport { ModalComponent } from '../component/modal/modal.component';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FieldChange } from '../../field/model';\n\nexport class ModalUitls {\n  //    static dialogRef: MatDialogRef<any, any>;\n\n  static openDialog(modal: Modal, component?: ComponentType<any> | TemplateRef<any>): void {\n    let dialogRef: MatDialogRef<any, any>;\n    dialogRef = modal.dialog.open(component ? component : ModalComponent, {\n      width: modal.widgetConfig.modal && modal.widgetConfig.modal.width ? modal.widgetConfig.modal.width + 'px' : '250px',\n      data: {\n        type: modal.type,\n        widgetConfig: modal.widgetConfig,\n        sourceIndex: modal.sourceIndex,\n        context: modal.context,\n        originalData: modal.originalData,\n        keyMap: modal.keyMap,\n        reset: modal.reset\n      }\n    });\n\n    if (dialogRef.componentInstance.onButtonClick) {\n      dialogRef.componentInstance.onButtonClick.subscribe(event => {\n        console.log(event);\n\n        if (eval(\"this.buttonClick\")) {\n          eval(\"this.buttonClick(event)\");\n        }\n      })\n    }\n\n    if (dialogRef.componentInstance.onFieldChange) {\n      dialogRef.componentInstance.onFieldChange.subscribe((event: FieldChange) => {\n        console.log(event);\n\n        if (eval(\"this.fieldChange\")) {\n          eval(\"this.fieldChange(event)\");\n        }\n      }, this)\n    }\n\n    if (dialogRef.componentInstance.onFormChange) {\n      dialogRef.componentInstance.onFormChange.subscribe(event => {\n        console.log(event);\n\n        if (eval(\"this.formChange\")) {\n          eval(\"this.formChange(event)\");\n        }\n      })\n    }\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      //          this.invokeAction(result, event);\n    });\n  }\n}"]}