import { OnInit, EventEmitter } from '@angular/core';
import { FormGroup, FormControl, FormGroupDirective, NgForm } from '@angular/forms';
import { Field, KeyMap, AutocompleteField, DropdownOption, DropdownField, HtmlEditorField, TextField, InputField, ImageField, CalendarField, CheckboxField, FileField, RadioField, ToggleField, SliderField, LabelField, LabelTextAlign } from '../../model';
import { FormDiaplyMode } from '../../../form/model';
import { Observable } from 'rxjs';
import { ErrorStateMatcher } from '@angular/material/core';
import { Router } from '@angular/router';
import { ButtonColor, Button } from '../../../button/model';
import { MatDatepickerInputEvent } from '@angular/material/datepicker';
import { MatSidenav } from '@angular/material/sidenav';
import { MatSelectionList, MatSelectionListChange } from '@angular/material/list';
import { Permission } from '../../../privilege/model';
import { Ability } from '@casl/ability';
export declare class FieldErrorStateMatcher implements ErrorStateMatcher {
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
}
export declare class FieldComponent implements OnInit {
    router: Router;
    ability: Ability;
    sourceType: string;
    sourceIdentifier: string;
    sourceIndex: number;
    widgetArrayIndex: number;
    form: FormGroup;
    fieldControl: FormControl | FormGroup;
    fieldIndex: number;
    field: Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField;
    originalData: any;
    _displayMode: FormDiaplyMode;
    get displayMode(): FormDiaplyMode;
    set displayMode(_displayMode: FormDiaplyMode);
    hideLabel: boolean;
    value: any;
    isAddMore: boolean;
    addMorePermission: Permission;
    device: string;
    displayInColumns: number;
    addMoreFieldDisplayInColumns: number;
    addMoreButtonDisplayInColumns: number;
    dependencies: any;
    row: any;
    keyMap: Array<KeyMap>;
    onDependentFieldChange: EventEmitter<any>;
    onFieldChange: EventEmitter<any>;
    onFormChange: EventEmitter<any>;
    onButtonClick: EventEmitter<any>;
    charLimit: number;
    ellipsisRequired: boolean;
    resolvedValue: any;
    matcher: ErrorStateMatcher;
    isRequired: boolean;
    isFieldDisabled: boolean;
    hasFieldNavigate: boolean;
    hasHintIcon: boolean;
    maxLength: number;
    min: number;
    max: number;
    imgURL: any;
    imagePath: string;
    appearance: string;
    hasClear: boolean;
    textClearButton: Button;
    routeToButton: Button;
    helpModalButton: Button;
    rows: number;
    height: number;
    asBubble: boolean;
    bubbleColor: ButtonColor;
    textAlign: LabelTextAlign;
    plusButton: Button;
    minusButton: Button;
    editorOptions: {
        formula: boolean;
        toolbar: ({
            header: (number | boolean)[];
        }[] | {
            font: any[];
        }[] | ({
            align: any[];
            indent?: undefined;
        } | {
            indent: string;
            align?: undefined;
        })[] | ({
            color: any[];
            background?: undefined;
        } | {
            background: any[];
            color?: undefined;
        })[] | {
            list: string;
        }[] | (string | {
            script: string;
        })[])[];
    };
    onListSelectionFuc: Function;
    listOptions: Array<DropdownOption>;
    enableMultiSelection: boolean;
    autoCompleteOptions: Observable<DropdownOption[]>;
    autoCompleteResultCount: number;
    dateRange: boolean;
    minLengthForTrigger: number;
    highlightAutoCompleteText: string;
    showLess: number;
    isEditorErrorState(): boolean;
    listView: MatSelectionList;
    constructor(router: Router, ability: Ability);
    ngOnInit(): void;
    setDisplayTemplate(): void;
    setAddMoreDisplayInColumn(): void;
    setMinLengthForTrigger(): void;
    setRows(): void;
    setHeight(): void;
    setAppearance(): void;
    setAsBubble(): void;
    setTextAlign(): void;
    setMaxLength(): void;
    setNumberMinMax(): void;
    displayHintIcon(): boolean;
    sidenav: MatSidenav;
    close(): void;
    open(): void;
    setHelpButton(identifier: string, label: string, icon: string): Button;
    required(): boolean;
    fieldNavigate(): boolean;
    fieldDisabled(): boolean;
    getValue(field: Field, txt: any): any;
    displayFullText(): void;
    displayShortText(): void;
    displayEllipsis(): boolean;
    setCalendar(): void;
    private invokeOnChangeOnField;
    autocompleteDisplayFn(option: DropdownOption | any): string;
    private _filter;
    setOptionInDisplay(): void;
    setClear(): void;
    cleanValue(): void;
    getResolveTextWithKey(field: any): string;
    getDropdownValue(field: Field, txt: any): any;
    getImagePath(field: Field): void;
    onAutocompleteChange(autocomplate: any): void;
    onToggleChange(toggle: any): void;
    onSliderChange(slider: any): void;
    onRadioChange(radio: any): void;
    onCheckboxChange(option: any, checkbox: any): void;
    setShowLess(): void;
    onShowAllOptions: () => void;
    onOptionChange(options: MatSelectionListChange): void;
    onHtmlEditorChange($event: any): void;
    onChipsListChange($event: any): void;
    autoCompleteInputHasValue: boolean;
    onInputChange(input: any): void;
    onDateChange(date: MatDatepickerInputEvent<Date>, type: string): void;
    onChange(dropdown: any): void;
    onFileChange(event: any): void;
    onParagraphChange(event: any): void;
    buttonClick(event: any): void;
    onChangeEvent(key: string, value: any, event: any): void;
    errors(): Array<{
        error: string;
        message: string;
    }>;
    setTextClearButton(identifier: string, label: string, icon: string, routeTo: Array<string>): Button;
    addField(field: Field): void;
    removeField(field: Field, index: number): void;
    addRemoveButton(identifier: string, label: string, icon: string): Button;
    onFileComplete(data: any): void;
    onListImageLoadError: ($event: any) => void;
}
