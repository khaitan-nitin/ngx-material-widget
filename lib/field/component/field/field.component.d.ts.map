{"version":3,"file":"field.component.d.ts","sources":["field.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { Field, KeyMap, AutocompleteField, DropdownOption, DropdownField, HtmlEditorField, TextField, InputField, ImageField, CalendarField, CheckboxField, FileField, RadioField, ToggleField, SliderField, LabelField, LabelTextAlign } from '../../model';\nimport { FormDiaplyMode } from '../../../form/model';\nimport { Observable } from 'rxjs';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Router } from '@angular/router';\nimport { ButtonColor, Button } from '../../../button/model';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { MatSelectionList, MatSelectionListChange } from '@angular/material/list';\nimport { Permission } from '../../../privilege/model';\nimport { Ability } from '@casl/ability';\nexport declare class FieldErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\nexport declare class FieldComponent implements OnInit {\n    router: Router;\n    ability: Ability;\n    sourceType: string;\n    sourceIdentifier: string;\n    sourceIndex: number;\n    widgetArrayIndex: number;\n    form: FormGroup;\n    fieldControl: FormControl | FormGroup;\n    fieldIndex: number;\n    field: Field | TextField | LabelField | InputField | DropdownField | HtmlEditorField | ImageField | CalendarField | AutocompleteField | CheckboxField | FileField | RadioField | SliderField | ToggleField;\n    originalData: any;\n    _displayMode: FormDiaplyMode;\n    get displayMode(): FormDiaplyMode;\n    set displayMode(_displayMode: FormDiaplyMode);\n    hideLabel: boolean;\n    value: any;\n    isAddMore: boolean;\n    addMorePermission: Permission;\n    device: string;\n    displayInColumns: number;\n    addMoreFieldDisplayInColumns: number;\n    addMoreButtonDisplayInColumns: number;\n    dependencies: any;\n    row: any;\n    keyMap: Array<KeyMap>;\n    onDependentFieldChange: EventEmitter<any>;\n    onFieldChange: EventEmitter<any>;\n    onFormChange: EventEmitter<any>;\n    onButtonClick: EventEmitter<any>;\n    charLimit: number;\n    ellipsisRequired: boolean;\n    resolvedValue: any;\n    matcher: ErrorStateMatcher;\n    isRequired: boolean;\n    isFieldDisabled: boolean;\n    hasFieldNavigate: boolean;\n    hasHintIcon: boolean;\n    maxLength: number;\n    min: number;\n    max: number;\n    imgURL: any;\n    imagePath: string;\n    appearance: string;\n    hasClear: boolean;\n    textClearButton: Button;\n    routeToButton: Button;\n    helpModalButton: Button;\n    rows: number;\n    height: number;\n    asBubble: boolean;\n    bubbleColor: ButtonColor;\n    textAlign: LabelTextAlign;\n    plusButton: Button;\n    minusButton: Button;\n    editorOptions: {\n        formula: boolean;\n        toolbar: ({\n            header: (number | boolean)[];\n        }[] | {\n            font: any[];\n        }[] | ({\n            align: any[];\n            indent?: undefined;\n        } | {\n            indent: string;\n            align?: undefined;\n        })[] | ({\n            color: any[];\n            background?: undefined;\n        } | {\n            background: any[];\n            color?: undefined;\n        })[] | {\n            list: string;\n        }[] | (string | {\n            script: string;\n        })[])[];\n    };\n    onListSelectionFuc: Function;\n    listOptions: Array<DropdownOption>;\n    enableMultiSelection: boolean;\n    autoCompleteOptions: Observable<DropdownOption[]>;\n    autoCompleteResultCount: number;\n    dateRange: boolean;\n    minLengthForTrigger: number;\n    highlightAutoCompleteText: string;\n    showLess: number;\n    isEditorErrorState(): boolean;\n    listView: MatSelectionList;\n    constructor(router: Router, ability: Ability);\n    ngOnInit(): void;\n    setDisplayTemplate(): void;\n    setAddMoreDisplayInColumn(): void;\n    setMinLengthForTrigger(): void;\n    setRows(): void;\n    setHeight(): void;\n    setAppearance(): void;\n    setAsBubble(): void;\n    setTextAlign(): void;\n    setMaxLength(): void;\n    setNumberMinMax(): void;\n    displayHintIcon(): boolean;\n    sidenav: MatSidenav;\n    close(): void;\n    open(): void;\n    setHelpButton(identifier: string, label: string, icon: string): Button;\n    required(): boolean;\n    fieldNavigate(): boolean;\n    fieldDisabled(): boolean;\n    getValue(field: Field, txt: any): any;\n    displayFullText(): void;\n    displayShortText(): void;\n    displayEllipsis(): boolean;\n    setCalendar(): void;\n    private invokeOnChangeOnField;\n    autocompleteDisplayFn(option: DropdownOption | any): string;\n    private _filter;\n    setOptionInDisplay(): void;\n    setClear(): void;\n    cleanValue(): void;\n    getResolveTextWithKey(field: any): string;\n    getDropdownValue(field: Field, txt: any): any;\n    getImagePath(field: Field): void;\n    onAutocompleteChange(autocomplate: any): void;\n    onToggleChange(toggle: any): void;\n    onSliderChange(slider: any): void;\n    onRadioChange(radio: any): void;\n    onCheckboxChange(option: any, checkbox: any): void;\n    setShowLess(): void;\n    onShowAllOptions: () => void;\n    onOptionChange(options: MatSelectionListChange): void;\n    onHtmlEditorChange($event: any): void;\n    onChipsListChange($event: any): void;\n    autoCompleteInputHasValue: boolean;\n    onInputChange(input: any): void;\n    onDateChange(date: MatDatepickerInputEvent<Date>, type: string): void;\n    onChange(dropdown: any): void;\n    onFileChange(event: any): void;\n    onParagraphChange(event: any): void;\n    buttonClick(event: any): void;\n    onChangeEvent(key: string, value: any, event: any): void;\n    errors(): Array<{\n        error: string;\n        message: string;\n    }>;\n    setTextClearButton(identifier: string, label: string, icon: string, routeTo: Array<string>): Button;\n    addField(field: Field): void;\n    removeField(field: Field, index: number): void;\n    addRemoveButton(identifier: string, label: string, icon: string): Button;\n    onFileComplete(data: any): void;\n    onListImageLoadError: ($event: any) => void;\n}\n"]}