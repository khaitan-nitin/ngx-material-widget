import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { BreakpointObserver } from '@angular/cdk/layout';
import { Form, FormField, FormLayout, FormButton, FormButtonLayout } from '../../model';
import { FieldChange, KeyMap } from '../../../field/model';
import { FormGroup } from '@angular/forms';
import { Action } from '../../../button/model';
import { Ability } from '@casl/ability';
import { Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class FormComponent implements OnInit, OnDestroy {
    private ability;
    private breakpointObserver;
    _formConfig: Form;
    get formConfig(): any;
    set formConfig(_formConfig: any);
    sourceIdentifier: string;
    sourceIndex: number;
    widgetArrayIndex: number;
    originalData: any;
    keyMap: Array<KeyMap>;
    onFormChange: EventEmitter<any>;
    onFieldChange: EventEmitter<any>;
    onButtonClick: EventEmitter<any>;
    formFields: Array<FormField>;
    dependencies: any;
    cellCount: number;
    isMobile: boolean;
    isTablet: boolean;
    isDesktop: boolean;
    showButtons: boolean;
    private _supportingRecord;
    get supportingRecord(): any;
    set supportingRecord(_supportingRecord: any);
    private _record;
    get record(): any;
    set record(_record: any);
    private _reset;
    get reset(): boolean;
    set reset(_reset: boolean);
    form: FormGroup;
    formLayouts: Array<FormLayout>;
    formButton: FormButton;
    formButtonLayout: FormButtonLayout;
    breakpointSubscription: Subscription;
    formInitialized: boolean;
    constructor(ability: Ability, breakpointObserver: BreakpointObserver);
    ngOnInit(): void;
    init(): void;
    getCustomLayout(): void;
    getActions(): void;
    dependentFieldChange(action: Action): void;
    fieldChange(fieldChange: FieldChange): void;
    buttonClick(event: any): void;
    fieldDefaultSetting(): void;
    setTitle(): void;
    initFormGroup(): void;
    getFormValue(): any;
    transformRows(): void;
    private formFieldRowColumnCount;
    toggleList(formLayout: FormLayout): void;
    getLayout(): void;
    resetButtonDisplay(): void;
    resetDisplayInColumn(): void;
    getNewDisplayInColumn(device: string, displayInColumn: number): number;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormComponent, "mx-form", never, { "formConfig": "formConfig"; "_formConfig": "_formConfig"; "supportingRecord": "supportingRecord"; "record": "record"; "originalData": "originalData"; "reset": "reset"; "form": "form"; "sourceIdentifier": "sourceIdentifier"; "sourceIndex": "sourceIndex"; "widgetArrayIndex": "widgetArrayIndex"; "keyMap": "keyMap"; }, { "onFormChange": "onFormChange"; "onFieldChange": "onFieldChange"; "onButtonClick": "onButtonClick"; }, never, never>;
}

//# sourceMappingURL=form.component.d.ts.map