{"version":3,"file":"list.component.d.ts","sources":["list.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { List, Record, CellColor, Column, CustomLayoutCell, CellControl } from '../model';\nimport { ObjectTree, Button, ButtonSize, Action } from '../../button/model';\nimport { KeyMap, TextField, DropdownField, FieldChange } from '../../field/model';\nimport { FormDiaplyMode, FormTitleIconPosition } from '../../form/model';\nimport { FormGroup } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Ability } from '@casl/ability';\nimport { Subscription } from 'rxjs';\nexport declare class ListComponent implements OnInit, OnDestroy {\n    ability: Ability;\n    breakpointObserver: BreakpointObserver;\n    _listConfig: List;\n    get listConfig(): List;\n    set listConfig(_listConfig: List);\n    _record: Record;\n    get record(): Record;\n    set record(_record: Record);\n    sourceIdentifier: string;\n    sourceIndex: number;\n    widgetArrayIndex: number;\n    originalData: any;\n    parent: ObjectTree;\n    _listReset: boolean;\n    get listReset(): boolean;\n    set listReset(_listReset: boolean);\n    disabled: boolean;\n    keyMap: Array<KeyMap>;\n    onFormChange: EventEmitter<any>;\n    onFieldChange: EventEmitter<any>;\n    onButtonClick: EventEmitter<any>;\n    onPageChange: EventEmitter<any>;\n    onSortChange: EventEmitter<any>;\n    _expanded: boolean;\n    get expanded(): boolean;\n    set expanded(_expanded: boolean);\n    expandRowIndex: number;\n    dataSource: MatTableDataSource<any>;\n    set contentPage(pagination: MatPaginator);\n    set contentSort(sort: MatSort);\n    cellCount: number;\n    isCustomTemplate: boolean;\n    isMobile: boolean;\n    isTablet: boolean;\n    isDesktop: boolean;\n    displayVertical: boolean;\n    form: FormGroup;\n    commonListForm: FormGroup;\n    formIndex: number;\n    inlineEditButtons: Array<Button>;\n    hasDisplayActions: boolean;\n    isInlineEditable: boolean;\n    inlineButtonSize: ButtonSize;\n    childRows: Map<number, Record>;\n    childColumnCount: number;\n    displayModes: Array<FormDiaplyMode>;\n    columnNames: Array<string>;\n    columnConfigs: Array<Column>;\n    totalDispalyableWidth: number;\n    selection: SelectionModel<any>;\n    hideCard: boolean;\n    hideHeader: boolean;\n    hideFooter: boolean;\n    pageSizeOptions: Array<number>;\n    rowCount: number;\n    limit: number;\n    expandedRow: any | null;\n    rowColors: Array<CellColor>;\n    cellColors: Array<Array<CellColor>>;\n    hoverRowData: any;\n    hoverRowIndex: number;\n    showCard: boolean;\n    iconPosition: FormTitleIconPosition;\n    selectableAdded: boolean;\n    breakpointSubscription: Subscription;\n    constructor(ability: Ability, breakpointObserver: BreakpointObserver);\n    ngOnInit(): void;\n    init(): void;\n    setCustomTemplate(): void;\n    sortDirection: 'asc' | 'desc' | '';\n    sticky(): void;\n    onScrolled(event: any): void;\n    contentFilterColumnSpan: number;\n    columnSelectionColumnSpan: number;\n    setFilterBar(): void;\n    setPageSize(): void;\n    setIconPosition(): void;\n    filterField: TextField;\n    getFilterField(): TextField;\n    columnSelectorField: DropdownField;\n    getColumnSelectorField(): DropdownField;\n    updateColumnDisplay(event: any): void;\n    inlinEditButton(identifier: string, label: string, icon: string): Button;\n    getColumnLabel(column: Column): string;\n    getColumnKey(column: Column): string;\n    resetInlineEditButton(identifier: string, label: string, icon: string): void;\n    showRowEditable(): void;\n    setRowEditablity(index: number): void;\n    populateAllChilds(): void;\n    getChildRows(row: any): any;\n    getValue(colIndex: number, cFieldIndex: number, row: any, value: any): any;\n    updateFilter(field: any): void;\n    initFormGroup(cnt: number): void;\n    initCommonFormGroup(): void;\n    getCurrentRecord(cnt: number): any;\n    getObjectTree(currentRow: any): ObjectTree;\n    /** Whether the number of selected elements matches the total number of rows. */\n    isAllSelected(): boolean;\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\n    masterToggle(): void;\n    /** The label for the checkbox on the passed row */\n    checkboxLabel(row?: any): string;\n    setCardVisibility(): void;\n    setColumnNames(): void;\n    setDetailColumnCount(): void;\n    setColors(): void;\n    selectableButton(identifier: string, label: string, icon: string): Button;\n    fieldChange(fieldChange: FieldChange): void;\n    formChange(form: FormGroup): void;\n    buttonClick(action: Action): void;\n    getLayout(): void;\n    rowClick(row: any, rowIndex: any, context: any, event: any): void;\n    resetVerticalDisplay(): void;\n    getButton(cell: CustomLayoutCell): CellControl[];\n    tooltipPosition: {\n        top: number;\n        left: number;\n    };\n    onHover(event: any, rowIndex: any, row: any): void;\n    ngOnDestroy(): void;\n}\n"]}