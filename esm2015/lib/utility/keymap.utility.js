import { CollectionUtils } from './collection.utility';
import { FormUtils } from './form.utility';
import { ListUtils } from './list.utility';
import { CrudUtils } from './crud.utility';
import { MasterDataUtils } from './master-data.utility';
export class KeyMapUtils {
    static push(keyMaps, associations, options, optionType, optionComponent, optionDependsOnValue, record) {
        // if (CollectionUtils.isEmpty(keyMaps)) {
        //   keyMaps = new Array<KeyMap>();
        // }
        let optionsDD;
        if (!(options instanceof Array)) {
            optionsDD = MasterDataUtils.getMasterDataAsOptions(options);
        }
        else {
            optionsDD = options;
        }
        if (!CollectionUtils.isEmpty(associations)) {
            keyMaps.push(KeyMapUtils.generateKeyMap(associations, options, optionDependsOnValue));
            KeyMapUtils.setOptionssUsingValues(keyMaps, true, optionType, optionComponent, record);
        }
        return keyMaps;
    }
    static generateKeyMap(associations, options, optionDependsOnValue) {
        // if (CollectionUtils.isEmpty(keyMaps)) {
        //   keyMaps = new Array<KeyMap>();
        // }
        let optionsDD;
        if (!(options instanceof Array)) {
            optionsDD = MasterDataUtils.getMasterDataAsOptions(options);
        }
        else {
            optionsDD = options;
        }
        let keyMap;
        if (!CollectionUtils.isEmpty(associations)) {
            keyMap = { associations: associations, options: optionsDD, optionDependsOnValue: optionDependsOnValue };
        }
        return keyMap;
    }
    static setOptionssUsingValues(keyMaps, relaodAll, optionType, optionComponent, record) {
        if (!CollectionUtils.isEmpty(keyMaps)) {
            keyMaps.forEach(keyMap => {
                if (!CollectionUtils.isEmpty(keyMap.associations)) {
                    keyMap.associations.forEach(association => {
                        if (optionType != null && "CRUD" /* CRUD */ == optionType) {
                            CrudUtils.setOptionsUsingValues(optionComponent, association.fieldKey, keyMap, relaodAll, record);
                        }
                        if ("FORM" /* FORM */ == optionType) {
                            FormUtils.setOptionsUsingValues(optionComponent, association.fieldKey, keyMap, relaodAll, record);
                        }
                        if ("LIST" /* LIST */ == optionType) {
                            ListUtils.setOptionsUsingValues(optionComponent, association.fieldKey, keyMap, relaodAll, record);
                        }
                    });
                }
            });
        }
    }
    static getValue(keyMaps, fieldKey, valueAsKey) {
        let value = "";
        if (!CollectionUtils.isEmpty(keyMaps)) {
            keyMaps.forEach(keyMap => {
                if (!CollectionUtils.isEmpty(keyMap.associations)) {
                    keyMap.associations.forEach(association => {
                        if (association.fieldKey == fieldKey && !CollectionUtils.isEmpty(keyMap.options)) {
                            keyMap.options.forEach(option => {
                                if (option.key == valueAsKey) {
                                    value = option.value;
                                }
                            });
                        }
                    });
                }
            });
        }
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,