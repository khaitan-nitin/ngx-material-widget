import { CollectionUtils } from './collection.utility';
export class ButtonUtils {
    static instanceOfButton(object) {
        return 'type' in object &&
            //            !('groupIdentifier' in object) &&
            (object['type'] != "CHIP" /* CHIP */ && object['type'] != "GROUP" /* GROUP */ && object['type'] != "DROPDOWN" /* DROPDOWN */) &&
            (object['type'] == "FLAT" /* FLAT */ || object['type'] == "GHOST" /* GHOST */ || object['type'] == "RAISED" /* RAISED */ || object['type'] == "FAB" /* FAB */ || object['type'] == "STROKED" /* STROKED */);
    }
    static instanceOfChipButton(object) {
        return 'type' in object && 'groupIdentifier' in object && object['type'] == "CHIP" /* CHIP */;
    }
    static instanceOfButtonGroup(object) {
        return 'type' in object && 'groupIdentifier' in object && object['type'] == "GROUP" /* GROUP */;
    }
    static instanceOfHoverButton(object) {
        return 'type' in object && 'groupIdentifier' in object && object['type'] == "DROPDOWN" /* DROPDOWN */;
    }
    static instanceOfAnyButtonType(object) {
        let isButton = false;
        if (this.instanceOfButton(object) || this.instanceOfChipButton(object) || this.instanceOfButtonGroup(object) || this.instanceOfHoverButton(object)) {
            isButton = true;
        }
        return isButton;
    }
    static hasWidth(buttons) {
        let hasButtonWidth = false;
        if (!CollectionUtils.isEmpty(buttons) && buttons.filter(button => button.width != null && button.width != "").length > 0) {
            hasButtonWidth = true;
        }
        return hasButtonWidth;
    }
    static setEqualWidth(buttons) {
        if (!CollectionUtils.isEmpty(buttons)) {
            let buttonCount = buttons.length;
            let buttonWidth = 100 / buttonCount;
            buttons.forEach(button => {
                button.width = "" + buttonWidth;
            });
        }
    }
    static getAction(sourceIdentifier, sourceIndex, widgetArrayIndex, identifier, parentHierarchy, event, originalData, context, actionDialog) {
        let data = null;
        if (originalData) {
            data = Object.assign(Object.assign({}, originalData), context);
        }
        else {
            data = context;
            originalData = context;
        }
        let action = {
            sourceIdentifier: sourceIdentifier,
            sourceIndex: sourceIndex,
            widgetArrayIndex: widgetArrayIndex,
            action: identifier,
            actionData: actionDialog,
            data: data,
            originalData: originalData,
            parentHierarchy: parentHierarchy,
            event: event
        };
        return action;
    }
    static isDisable(displayMode) {
        if (displayMode == "BLOCKED" /* BLOCKED */ || displayMode == "VIEW" /* VIEW */) {
            return true;
        }
        else {
            return false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLnV0aWxpdHkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25pdGlua2hhaXRhbi9OaXRpbi9zdHVkeS9hbmd1bGFyL21hdGVyaWFsL2FkbWluLWJ1aWxkZXItcGx1Z2luL3Byb2plY3RzL25neC1tYXRlcmlhbC13aWRnZXQvc3JjLyIsInNvdXJjZXMiOlsibGliL3V0aWxpdHkvYnV0dG9uLnV0aWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXZELE1BQU0sT0FBTyxXQUFXO0lBQ3BCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFXO1FBQy9CLE9BQU8sTUFBTSxJQUFJLE1BQU07WUFDL0IsK0NBQStDO1lBQ25DLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBbUIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHVCQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsNkJBQXVCLENBQUM7WUFDbEgsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFtQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsdUJBQW9CLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBcUIsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFrQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsMkJBQXNCLENBQUMsQ0FBQTtJQUNwTSxDQUFDO0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE1BQVc7UUFDbkMsT0FBTyxNQUFNLElBQUksTUFBTSxJQUFJLGlCQUFpQixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFtQixDQUFDO0lBQ2hHLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBVztRQUNwQyxPQUFPLE1BQU0sSUFBSSxNQUFNLElBQUksaUJBQWlCLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsdUJBQW9CLENBQUM7SUFDakcsQ0FBQztJQUVELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFXO1FBQ3BDLE9BQU8sTUFBTSxJQUFJLE1BQU0sSUFBSSxpQkFBaUIsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyw2QkFBdUIsQ0FBQztJQUNwRyxDQUFDO0lBRUQsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQVc7UUFDdEMsSUFBSSxRQUFRLEdBQVksS0FBSyxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hKLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFzQjtRQUNsQyxJQUFJLGNBQWMsR0FBWSxLQUFLLENBQUM7UUFFcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0SCxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBc0I7UUFDdkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNqQyxJQUFJLFdBQVcsR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDO1lBRXBDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3JCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLFdBQVcsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQXdCLEVBQUUsV0FBbUIsRUFBRSxnQkFBd0IsRUFBRSxVQUFrQixFQUFFLGVBQTJCLEVBQUUsS0FBVSxFQUFFLFlBQWlCLEVBQUUsT0FBWSxFQUFFLFlBQWlCO1FBQ3JNLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLFlBQVksRUFBRTtZQUNkLElBQUksbUNBQVEsWUFBWSxHQUFLLE9BQU8sQ0FBRSxDQUFDO1NBQzFDO2FBQU07WUFDSCxJQUFJLEdBQUcsT0FBTyxDQUFDO1lBQ2YsWUFBWSxHQUFHLE9BQU8sQ0FBQztTQUMxQjtRQUNELElBQUksTUFBTSxHQUFXO1lBQ2pCLGdCQUFnQixFQUFFLGdCQUFnQjtZQUNsQyxXQUFXLEVBQUUsV0FBVztZQUN4QixnQkFBZ0IsRUFBRSxnQkFBZ0I7WUFDbEMsTUFBTSxFQUFFLFVBQVU7WUFDbEIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsSUFBSSxFQUFFLElBQUk7WUFDVixZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsZUFBZTtZQUNoQyxLQUFLLEVBQUUsS0FBSztTQUNmLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUEyQjtRQUN4QyxJQUFJLFdBQVcsMkJBQTBCLElBQUksV0FBVyxxQkFBdUIsRUFBRTtZQUMvRSxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBCdXR0b25Hcm91cCwgQnV0dG9uVHlwZSwgSG92ZXJCdXR0b24sIEFjdGlvbiwgT2JqZWN0VHJlZSB9IGZyb20gJy4uL2J1dHRvbi9tb2RlbCc7XG5pbXBvcnQgeyBGb3JtRGlhcGx5TW9kZSB9IGZyb20gJy4uL2Zvcm0vbW9kZWwnO1xuaW1wb3J0IHsgQ29sbGVjdGlvblV0aWxzIH0gZnJvbSAnLi9jb2xsZWN0aW9uLnV0aWxpdHknO1xuXG5leHBvcnQgY2xhc3MgQnV0dG9uVXRpbHMge1xuICAgIHN0YXRpYyBpbnN0YW5jZU9mQnV0dG9uKG9iamVjdDogYW55KTogb2JqZWN0IGlzIEJ1dHRvbiB7XG4gICAgICAgIHJldHVybiAndHlwZScgaW4gb2JqZWN0ICYmXG4vLyAgICAgICAgICAgICEoJ2dyb3VwSWRlbnRpZmllcicgaW4gb2JqZWN0KSAmJlxuICAgICAgICAgICAgKG9iamVjdFsndHlwZSddICE9IEJ1dHRvblR5cGUuQ0hJUCAmJiBvYmplY3RbJ3R5cGUnXSAhPSBCdXR0b25UeXBlLkdST1VQICYmIG9iamVjdFsndHlwZSddICE9IEJ1dHRvblR5cGUuRFJPUERPV04pICYmXG4gICAgICAgICAgICAob2JqZWN0Wyd0eXBlJ10gPT0gQnV0dG9uVHlwZS5GTEFUIHx8IG9iamVjdFsndHlwZSddID09IEJ1dHRvblR5cGUuR0hPU1QgfHwgb2JqZWN0Wyd0eXBlJ10gPT0gQnV0dG9uVHlwZS5SQUlTRUQgfHwgb2JqZWN0Wyd0eXBlJ10gPT0gQnV0dG9uVHlwZS5GQUIgfHwgb2JqZWN0Wyd0eXBlJ10gPT0gQnV0dG9uVHlwZS5TVFJPS0VEKVxuICAgIH1cblxuICAgIHN0YXRpYyBpbnN0YW5jZU9mQ2hpcEJ1dHRvbihvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBCdXR0b25Hcm91cCB7XG4gICAgICAgIHJldHVybiAndHlwZScgaW4gb2JqZWN0ICYmICdncm91cElkZW50aWZpZXInIGluIG9iamVjdCAmJiBvYmplY3RbJ3R5cGUnXSA9PSBCdXR0b25UeXBlLkNISVA7XG4gICAgfVxuXG4gICAgc3RhdGljIGluc3RhbmNlT2ZCdXR0b25Hcm91cChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBCdXR0b25Hcm91cCB7XG4gICAgICAgIHJldHVybiAndHlwZScgaW4gb2JqZWN0ICYmICdncm91cElkZW50aWZpZXInIGluIG9iamVjdCAmJiBvYmplY3RbJ3R5cGUnXSA9PSBCdXR0b25UeXBlLkdST1VQO1xuICAgIH1cblxuICAgIHN0YXRpYyBpbnN0YW5jZU9mSG92ZXJCdXR0b24ob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgSG92ZXJCdXR0b24ge1xuICAgICAgICByZXR1cm4gJ3R5cGUnIGluIG9iamVjdCAmJiAnZ3JvdXBJZGVudGlmaWVyJyBpbiBvYmplY3QgJiYgb2JqZWN0Wyd0eXBlJ10gPT0gQnV0dG9uVHlwZS5EUk9QRE9XTjtcbiAgICB9XG5cbiAgICBzdGF0aWMgaW5zdGFuY2VPZkFueUJ1dHRvblR5cGUob2JqZWN0OiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGlzQnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlT2ZCdXR0b24ob2JqZWN0KSB8fCB0aGlzLmluc3RhbmNlT2ZDaGlwQnV0dG9uKG9iamVjdCkgfHwgdGhpcy5pbnN0YW5jZU9mQnV0dG9uR3JvdXAob2JqZWN0KSB8fCB0aGlzLmluc3RhbmNlT2ZIb3ZlckJ1dHRvbihvYmplY3QpKSB7XG4gICAgICAgICAgICBpc0J1dHRvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNCdXR0b247XG4gICAgfVxuXG4gICAgc3RhdGljIGhhc1dpZHRoKGJ1dHRvbnM6IEFycmF5PEJ1dHRvbj4pOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGhhc0J1dHRvbldpZHRoOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFDb2xsZWN0aW9uVXRpbHMuaXNFbXB0eShidXR0b25zKSAmJiBidXR0b25zLmZpbHRlcihidXR0b24gPT4gYnV0dG9uLndpZHRoICE9IG51bGwgJiYgYnV0dG9uLndpZHRoICE9IFwiXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGhhc0J1dHRvbldpZHRoID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYXNCdXR0b25XaWR0aDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0RXF1YWxXaWR0aChidXR0b25zOiBBcnJheTxCdXR0b24+KTogdm9pZCB7XG4gICAgICAgIGlmICghQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoYnV0dG9ucykpIHtcbiAgICAgICAgICAgIGxldCBidXR0b25Db3VudCA9IGJ1dHRvbnMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGJ1dHRvbldpZHRoID0gMTAwIC8gYnV0dG9uQ291bnQ7XG5cbiAgICAgICAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi53aWR0aCA9IFwiXCIgKyBidXR0b25XaWR0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFjdGlvbihzb3VyY2VJZGVudGlmaWVyOiBzdHJpbmcsIHNvdXJjZUluZGV4OiBudW1iZXIsIHdpZGdldEFycmF5SW5kZXg6IG51bWJlciwgaWRlbnRpZmllcjogc3RyaW5nLCBwYXJlbnRIaWVyYXJjaHk6IE9iamVjdFRyZWUsIGV2ZW50OiBhbnksIG9yaWdpbmFsRGF0YTogYW55LCBjb250ZXh0OiBhbnksIGFjdGlvbkRpYWxvZzogYW55KTogQWN0aW9uIHtcbiAgICAgICAgbGV0IGRhdGEgPSBudWxsO1xuICAgICAgICBpZiAob3JpZ2luYWxEYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0geyAuLi5vcmlnaW5hbERhdGEsIC4uLmNvbnRleHQgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBjb250ZXh0O1xuICAgICAgICAgICAgb3JpZ2luYWxEYXRhID0gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWN0aW9uOiBBY3Rpb24gPSB7XG4gICAgICAgICAgICBzb3VyY2VJZGVudGlmaWVyOiBzb3VyY2VJZGVudGlmaWVyLFxuICAgICAgICAgICAgc291cmNlSW5kZXg6IHNvdXJjZUluZGV4LFxuICAgICAgICAgICAgd2lkZ2V0QXJyYXlJbmRleDogd2lkZ2V0QXJyYXlJbmRleCxcbiAgICAgICAgICAgIGFjdGlvbjogaWRlbnRpZmllcixcbiAgICAgICAgICAgIGFjdGlvbkRhdGE6IGFjdGlvbkRpYWxvZyxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBvcmlnaW5hbERhdGE6IG9yaWdpbmFsRGF0YSxcbiAgICAgICAgICAgIHBhcmVudEhpZXJhcmNoeTogcGFyZW50SGllcmFyY2h5LFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGlzRGlzYWJsZShkaXNwbGF5TW9kZTogRm9ybURpYXBseU1vZGUpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGRpc3BsYXlNb2RlID09IEZvcm1EaWFwbHlNb2RlLkJMT0NLRUQgfHwgZGlzcGxheU1vZGUgPT0gRm9ybURpYXBseU1vZGUuVklFVykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0iXX0=