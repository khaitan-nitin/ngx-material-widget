import { MasterDataUtils } from './master-data.utility';
import { StringUtils } from './string.utility';
import { CollectionUtils } from './collection.utility';
export class FieldUtils {
    static isFormDisable(displayMode) {
        if (displayMode == "BLOCKED" /* BLOCKED */ || displayMode == "VIEW" /* VIEW */) {
            return true;
        }
        else {
            return false;
        }
    }
    static isFieldDisabled(field, currentDisplayMode, value) {
        let isDisabled = false;
        if (FieldUtils.isFormDisable(currentDisplayMode) || field.displayMode == "DISABLED" /* DISABLED */ || field.type == "HIDDEN" /* HIDDEN */ || field.isReadOnly || (field.isUnique && currentDisplayMode == "EDIT" /* EDIT */ && !StringUtils.isEmpty(value))) {
            isDisabled = true;
        }
        return isDisabled;
    }
    static displayEllipsis(charLimit, value) {
        let showEllipsis = false;
        let strValue = JSON.stringify(value);
        if (charLimit && charLimit > 0 && !StringUtils.isEmpty(strValue) && strValue.length > charLimit) {
            showEllipsis = true;
        }
        return showEllipsis;
    }
    static readOnlyField() {
        return ["IMAGE" /* IMAGE */, "IMAGE_AND_TEXT" /* IMAGE_AND_TEXT */, "JSON" /* JSON */, "LABEL" /* LABEL */, "BOOLEAN" /* BOOLEAN */];
    }
    static isEllipsisField(field) {
        let hasEllipsis;
        if ((field.type == "LABEL" /* LABEL */ || field.type == "TEXT" /* TEXT */ || field.type == "TEXTAREA" /* TEXTAREA */ || field.type == "EMAIL" /* EMAIL */ || field.type == "PASSWORD" /* PASSWORD */) && field.ellipsis > 0) {
            hasEllipsis = true;
        }
        return hasEllipsis;
    }
    static setOptionsUsingKey(field, masterDataKey) {
        if (!CollectionUtils.isEmpty(field)) {
            let options = MasterDataUtils.getMasterDataAsOptions(masterDataKey);
            field.options = options;
        }
    }
    static setOptionsUsingValues(field, keyMap) {
        if (!CollectionUtils.isEmpty(field)) {
            field.options = keyMap.options;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQudXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbml0aW5raGFpdGFuL05pdGluL3N0dWR5L2FuZ3VsYXIvbWF0ZXJpYWwvYWRtaW4tYnVpbGRlci1wbHVnaW4vcHJvamVjdHMvbmd4LW1hdGVyaWFsLXdpZGdldC9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0eS9maWVsZC51dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXZELE1BQU0sT0FBTyxVQUFVO0lBQ3JCLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBMkI7UUFDOUMsSUFBSSxXQUFXLDJCQUEwQixJQUFJLFdBQVcscUJBQXVCLEVBQUU7WUFDL0UsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQVksRUFBRSxrQkFBa0MsRUFBRSxLQUE2QjtRQUNwRyxJQUFJLFVBQVUsR0FBWSxLQUFLLENBQUM7UUFDaEMsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsNkJBQXdCLElBQUksS0FBSyxDQUFDLElBQUkseUJBQW9CLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksa0JBQWtCLHFCQUF1QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25QLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFpQixFQUFFLEtBQVU7UUFDbEQsSUFBSSxZQUFZLEdBQVksS0FBSyxDQUFDO1FBRWxDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsSUFBSSxTQUFTLElBQUksU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7WUFDL0YsWUFBWSxHQUFHLElBQUksQ0FBQztTQUNyQjtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYTtRQUNsQixPQUFPLDZIQUErRixDQUFDO0lBQ3pHLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQVk7UUFDakMsSUFBSSxXQUFvQixDQUFDO1FBRXpCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSx1QkFBbUIsSUFBSSxLQUFLLENBQUMsSUFBSSxxQkFBa0IsSUFBSSxLQUFLLENBQUMsSUFBSSw2QkFBc0IsSUFBSSxLQUFLLENBQUMsSUFBSSx1QkFBbUIsSUFBSSxLQUFLLENBQUMsSUFBSSw2QkFBc0IsQ0FBQyxJQUFnQixLQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtZQUMvTSxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFxRSxFQUFFLGFBQXFCO1FBQ3BILElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25DLElBQUksT0FBTyxHQUEwQixlQUFlLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFM0YsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQXFFLEVBQUUsTUFBYztRQUNoSCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDaEM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZCwgRmllbGRUeXBlLCBUZXh0RmllbGQsIEF1dG9jb21wbGV0ZUZpZWxkLCBDaGVja2JveEZpZWxkLCBSYWRpb0ZpZWxkLCBEcm9wZG93bkZpZWxkLCBEcm9wZG93bk9wdGlvbiwgS2V5TWFwLCBEaXNwbGF5TW9kZSB9IGZyb20gJy4uL2ZpZWxkL21vZGVsJztcbmltcG9ydCB7IEZvcm1EaWFwbHlNb2RlIH0gZnJvbSAnLi4vZm9ybS9tb2RlbCc7XG5pbXBvcnQgeyBNYXN0ZXJEYXRhVXRpbHMgfSBmcm9tICcuL21hc3Rlci1kYXRhLnV0aWxpdHknOyBcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnLi9zdHJpbmcudXRpbGl0eSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uVXRpbHMgfSBmcm9tICcuL2NvbGxlY3Rpb24udXRpbGl0eSc7XG5cbmV4cG9ydCBjbGFzcyBGaWVsZFV0aWxzIHtcbiAgc3RhdGljIGlzRm9ybURpc2FibGUoZGlzcGxheU1vZGU6IEZvcm1EaWFwbHlNb2RlKTogYm9vbGVhbiB7XG4gICAgaWYgKGRpc3BsYXlNb2RlID09IEZvcm1EaWFwbHlNb2RlLkJMT0NLRUQgfHwgZGlzcGxheU1vZGUgPT0gRm9ybURpYXBseU1vZGUuVklFVykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHsgXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGlzRmllbGREaXNhYmxlZChmaWVsZDogRmllbGQsIGN1cnJlbnREaXNwbGF5TW9kZTogRm9ybURpYXBseU1vZGUsIHZhbHVlOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XG4gICAgbGV0IGlzRGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBpZiAoRmllbGRVdGlscy5pc0Zvcm1EaXNhYmxlKGN1cnJlbnREaXNwbGF5TW9kZSkgfHwgZmllbGQuZGlzcGxheU1vZGUgPT0gRGlzcGxheU1vZGUuRElTQUJMRUQgfHwgZmllbGQudHlwZSA9PSBGaWVsZFR5cGUuSElEREVOIHx8IGZpZWxkLmlzUmVhZE9ubHkgfHwgKGZpZWxkLmlzVW5pcXVlICYmIGN1cnJlbnREaXNwbGF5TW9kZSA9PSBGb3JtRGlhcGx5TW9kZS5FRElUICYmICFTdHJpbmdVdGlscy5pc0VtcHR5KHZhbHVlKSkpIHtcbiAgICAgIGlzRGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpc0Rpc2FibGVkO1xuICB9XG5cbiAgc3RhdGljIGRpc3BsYXlFbGxpcHNpcyhjaGFyTGltaXQ6IG51bWJlciwgdmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGxldCBzaG93RWxsaXBzaXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGxldCBzdHJWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoY2hhckxpbWl0ICYmIGNoYXJMaW1pdCA+IDAgJiYgIVN0cmluZ1V0aWxzLmlzRW1wdHkoc3RyVmFsdWUpICYmIHN0clZhbHVlLmxlbmd0aCA+IGNoYXJMaW1pdCkge1xuICAgICAgc2hvd0VsbGlwc2lzID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNob3dFbGxpcHNpcztcbiAgfVxuXG4gIHN0YXRpYyByZWFkT25seUZpZWxkKCk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBbRmllbGRUeXBlLklNQUdFLCBGaWVsZFR5cGUuSU1BR0VfQU5EX1RFWFQsIEZpZWxkVHlwZS5KU09OLCBGaWVsZFR5cGUuTEFCRUwsIEZpZWxkVHlwZS5CT09MRUFOXTtcbiAgfVxuXG4gIHN0YXRpYyBpc0VsbGlwc2lzRmllbGQoZmllbGQ6IEZpZWxkKSB7XG4gICAgbGV0IGhhc0VsbGlwc2lzOiBib29sZWFuO1xuXG4gICAgaWYgKChmaWVsZC50eXBlID09IEZpZWxkVHlwZS5MQUJFTCB8fCBmaWVsZC50eXBlID09IEZpZWxkVHlwZS5URVhUIHx8IGZpZWxkLnR5cGUgPT0gRmllbGRUeXBlLlRFWFRBUkVBIHx8IGZpZWxkLnR5cGUgPT0gRmllbGRUeXBlLkVNQUlMIHx8IGZpZWxkLnR5cGUgPT0gRmllbGRUeXBlLlBBU1NXT1JEKSAmJiAoPFRleHRGaWVsZD5maWVsZCkuZWxsaXBzaXMgPiAwKSB7XG4gICAgICBoYXNFbGxpcHNpcyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0VsbGlwc2lzO1xuICB9XG5cbiAgc3RhdGljIHNldE9wdGlvbnNVc2luZ0tleShmaWVsZDogQXV0b2NvbXBsZXRlRmllbGQgfCBDaGVja2JveEZpZWxkIHwgUmFkaW9GaWVsZCB8IERyb3Bkb3duRmllbGQsIG1hc3RlckRhdGFLZXk6IHN0cmluZykge1xuICAgIGlmICghQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoZmllbGQpKSB7XG4gICAgICBsZXQgb3B0aW9uczogQXJyYXk8RHJvcGRvd25PcHRpb24+ID0gTWFzdGVyRGF0YVV0aWxzLmdldE1hc3RlckRhdGFBc09wdGlvbnMobWFzdGVyRGF0YUtleSk7XG5cbiAgICAgIGZpZWxkLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXRPcHRpb25zVXNpbmdWYWx1ZXMoZmllbGQ6IEF1dG9jb21wbGV0ZUZpZWxkIHwgQ2hlY2tib3hGaWVsZCB8IFJhZGlvRmllbGQgfCBEcm9wZG93bkZpZWxkLCBrZXlNYXA6IEtleU1hcCkge1xuICAgIGlmICghQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoZmllbGQpKSB7XG4gICAgICBmaWVsZC5vcHRpb25zID0ga2V5TWFwLm9wdGlvbnM7IFxuICAgIH1cbiAgfVxufSJdfQ==