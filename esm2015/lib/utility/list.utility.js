import { CollectionUtils, FormUtils } from '.';
import { FieldUtils } from './field.utility';
import { StringUtils } from './string.utility';
export class ListUtils {
    static addColoumn() {
    }
    static hideColoumn() {
    }
    static setOptionsUsingKey(list, fieldKey, masterDataKey) {
        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {
            list.columns.forEach(column => {
                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {
                    column.fields.forEach(field => {
                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == "AUTOCOMPLETE" /* AUTOCOMPLETE */ || field.type == "CHECKBOX" /* CHECKBOX */ || field.type == "RADIO" /* RADIO */ || field.type == "DROPDOWN" /* DROPDOWN */)) {
                            FieldUtils.setOptionsUsingKey(field, masterDataKey);
                        }
                    });
                }
            });
        }
    }
    static setOptionsUsingValues(list, fieldKey, keyMap, relaodAll, record) {
        if (!CollectionUtils.isEmpty(list) && !CollectionUtils.isEmpty(list.columns)) {
            list.columns.forEach(column => {
                if (!CollectionUtils.isEmpty(column) && !CollectionUtils.isEmpty(column.fields)) {
                    column.fields.forEach(field => {
                        let isMatchingDependendKeyMap = false;
                        if (!StringUtils.isEmpty(field.optionDependsOn)) {
                            //  get optionDependsOn field value
                            let optionDependsOnValue = FormUtils.getValueViaEval(record, field.optionDependsOn);
                            if (keyMap.optionDependsOnValue == optionDependsOnValue) {
                                isMatchingDependendKeyMap = true;
                            }
                        }
                        else {
                            isMatchingDependendKeyMap = true;
                        }
                        if (!CollectionUtils.isEmpty(field) && field.key == fieldKey && (field.type == "AUTOCOMPLETE" /* AUTOCOMPLETE */ || field.type == "CHECKBOX" /* CHECKBOX */ || field.type == "RADIO" /* RADIO */ || field.type == "DROPDOWN" /* DROPDOWN */)) {
                            if (isMatchingDependendKeyMap) { //} || relaodAll)   {
                                FieldUtils.setOptionsUsingValues(field, keyMap);
                            }
                        }
                    });
                }
            });
        }
    }
    static getColumnKey(column) {
        let key;
        if (column.key) {
            key = column.key;
        }
        else {
            if (column.fields && column.fields.length > 0) {
                key = column.fields[0].key;
            }
        }
        return key;
    }
    static getColumnLabel(column) {
        let label;
        if (column.label) {
            label = column.label;
        }
        else {
            if (column.fields && column.fields.length > 0) {
                label = column.fields[0].label;
            }
        }
        return label;
    }
    static getColumnSelectorField(listConfig) {
        let options = new Array();
        let values = new Array();
        for (let column of listConfig.columns) {
            let key = this.getColumnKey(column);
            let label = this.getColumnLabel(column);
            options.push({
                key: key,
                value: label,
                disabled: false,
                selected: column.show
            });
            if (column.show) {
                values.push(key);
            }
        }
        let columnSelectorField = {
            key: "columnSelector",
            label: "Display Column",
            type: "DROPDOWN" /* DROPDOWN */,
            appearance: "STANDARD" /* STANDARD */,
            isReadOnly: false,
            fieldDisplayType: "INLINE" /* INLINE */,
            placeholder: "Columns to display",
            options: options,
            multiselect: true,
            value: values
        };
        return columnSelectorField;
    }
    static getMobileConfig(listConfig) {
        if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.mobile) && !CollectionUtils.isEmpty(listConfig.mobile.cells)) {
            this.setCustomLayout(listConfig, listConfig.mobile);
        }
    }
    static setCustomLayouts(listConfig) {
        if (this.hasRowHover(listConfig)) {
            this.setCustomLayout(listConfig, listConfig.row.hover.template.layout);
        }
        if (this.hasCustomCellLayout(listConfig)) {
            listConfig.columns.forEach(column => {
                if (column.template && column.template.layout) {
                    this.setCustomLayout(listConfig, column.template.layout);
                }
            });
        }
        if (this.hasCustomRowLayout(listConfig)) {
            this.setCustomLayout(listConfig, listConfig.row.template.layout);
        }
    }
    static hasRowHover(listConfig) {
        let hasHoverConfig = false;
        if (listConfig && listConfig.row && listConfig.row.hover && listConfig.row.hover.template && listConfig.row.hover.template.layout) {
            hasHoverConfig = true;
        }
        return hasHoverConfig;
    }
    static hasCustomRowLayout(listConfig) {
        let hasCustomRowLayout = false;
        if (listConfig && listConfig.row && listConfig.row.template && listConfig.row.template.layout) {
            hasCustomRowLayout = true;
        }
        return hasCustomRowLayout;
    }
    static hasCustomCellLayout(listConfig) {
        let hasCustomCellLayout = false;
        if (listConfig && !CollectionUtils.isEmpty(listConfig.columns)) {
            listConfig.columns.forEach(column => {
                if (column.template && column.template.layout) {
                    hasCustomCellLayout = true;
                }
            });
        }
        return hasCustomCellLayout;
    }
    static setCustomLayout(listConfig, layout) {
        if (layout && !CollectionUtils.isEmpty(layout.cells)) {
            layout.cells.forEach(cell => {
                if (!CollectionUtils.isEmpty(cell.controls)) {
                    cell.controls.forEach(control => {
                        if (CollectionUtils.isEmpty(control.control)) {
                            let resolvedControl = {};
                            resolvedControl = this.getControl(listConfig, control);
                            control.control = resolvedControl.control;
                            control.colIndex = resolvedControl.colIndex;
                            control.cControlIndex = resolvedControl.cControlIndex;
                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {
                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;
                            // }
                        }
                    });
                }
            });
        }
    }
    static getControl(listConfig, cellControl) {
        let control = {};
        if (cellControl.control) {
            control = { control: cellControl.control, colIndex: 0, cControlIndex: 0 };
        }
        else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.columns) && cellControl.type == "FIELD" /* FIELD */) {
            control = this.getColumnControl(listConfig.columns, cellControl.key);
        }
        else if (!CollectionUtils.isEmpty(listConfig) && !CollectionUtils.isEmpty(listConfig.actions) && cellControl.type == "BUTTON" /* BUTTON */) {
            control.control = this.getButtonControl(listConfig.actions, cellControl.key);
            control.colIndex = listConfig.columns.length;
        }
        return control;
    }
    static getColumnControl(columns, controlKey) {
        let control = {};
        let colIndex = 0;
        columns.forEach(column => {
            if (!CollectionUtils.isEmpty(column.fields) && CollectionUtils.isEmpty(control.control)) {
                let cControlIndex = 0;
                column.fields.forEach(field => {
                    if (CollectionUtils.isEmpty(control.control)) {
                        control = ListUtils.getFieldControl(field, controlKey, colIndex, cControlIndex);
                        cControlIndex++;
                    }
                });
            }
            colIndex++;
        });
        return control;
    }
    static getFieldControl(field, controlKey, colIndex, cControlIndex) {
        let control = {};
        if (field.key == controlKey) {
            control.control = field;
            control.colIndex = colIndex;
            control.cControlIndex = cControlIndex;
            console.log("1111111");
            console.log(control);
        }
        return control;
    }
    static getButtonControl(buttons, controlKey) {
        let control;
        buttons.forEach(button => {
            if (button.identifier == controlKey) {
                control = button;
            }
        });
        return control;
    }
}
//# sourceMappingURL=data:application/json;base64,