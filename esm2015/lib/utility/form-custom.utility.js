import { CollectionUtils } from "./collection.utility";
import { StringUtils } from "./string.utility";
export class FormCustomUtils {
    static setCustomLayout(formConfig, layout) {
        if (layout && !CollectionUtils.isEmpty(layout.cells)) {
            layout.cells.forEach(cell => {
                if (!CollectionUtils.isEmpty(cell.controls)) {
                    cell.controls.forEach(control => {
                        if (CollectionUtils.isEmpty(control.control)) {
                            let resolvedControl = {};
                            resolvedControl = this.getControl(formConfig, control);
                            control.control = resolvedControl;
                            // if (control.type == CellControllType.BUTTON && control.control['type'] == ButtonType.CHIP) {
                            //     control.control['groupIdentifier'] = control.control.identifier + cell.rows + cell.cols;
                            // }
                        }
                    });
                }
            });
        }
        console.log(formConfig.layout);
    }
    static getControl(formConfig, cellControl) {
        let control = {};
        if (cellControl.control) {
            control = cellControl.control;
        }
        else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.formFields) && cellControl.type == "FIELD" /* FIELD */) {
            control = this.getFieldControl(formConfig.formFields, cellControl.key);
        }
        else if (!CollectionUtils.isEmpty(formConfig) && !CollectionUtils.isEmpty(formConfig.action) && cellControl.type == "BUTTON" /* BUTTON */) {
            control = this.getButtonControl(formConfig.action, cellControl.key);
        }
        return control;
    }
    static getFieldControl(formFields, controlKey) {
        let control = {};
        formFields.forEach(formField => {
            if (!CollectionUtils.isEmpty(formField.field) && formField.field.key == controlKey) {
                control = formField;
            }
        });
        return control;
    }
    static getButtonControl(action, controlKey) {
        let control;
        if (StringUtils.isEmpty(action['rowHeight'])) {
            action.buttons.forEach(button => {
                if (button.identifier == controlKey) {
                    control = button;
                }
            });
        }
        else {
            action.cells.forEach(cell => {
                cell.buttons.buttons.forEach(button => {
                    if (button.identifier == controlKey) {
                        control = button;
                    }
                });
            });
        }
        return control;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jdXN0b20udXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbml0aW5raGFpdGFuL05pdGluL3N0dWR5L2FuZ3VsYXIvbWF0ZXJpYWwvYWRtaW4tYnVpbGRlci1wbHVnaW4vcHJvamVjdHMvbmd4LW1hdGVyaWFsLXdpZGdldC9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0eS9mb3JtLWN1c3RvbS51dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHL0MsTUFBTSxPQUFPLGVBQWU7SUFDeEIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFnQixFQUFFLE1BQXdCO1FBQzdELElBQUksTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQzVCLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUk7NEJBQzVDLElBQUksZUFBZSxHQUFRLEVBQUUsQ0FBQzs0QkFDOUIsZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzRCQUV2RCxPQUFPLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQzs0QkFFbEMsK0ZBQStGOzRCQUMvRiwrRkFBK0Y7NEJBQy9GLElBQUk7eUJBQ1A7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7aUJBQ047WUFDTCxDQUFDLENBQUMsQ0FBQTtTQUNMO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBZ0IsRUFBRSxXQUE0QjtRQUM1RCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFFdEIsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQ3JCLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSx1QkFBNkIsRUFBRTtZQUNqSixPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxRTthQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUkseUJBQThCLEVBQUU7WUFDOUksT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2RTtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQTRCLEVBQUUsVUFBa0I7UUFDbkUsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBRXRCLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLFVBQVUsRUFBRTtnQkFDaEYsT0FBTyxHQUFHLFNBQVMsQ0FBQzthQUN2QjtRQUNMLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFxQyxFQUFFLFVBQWtCO1FBQzdFLElBQUksT0FBWSxDQUFDO1FBRWpCLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBSTtZQUMvQixNQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDMUMsSUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLFVBQVUsRUFBRTtvQkFDakMsT0FBTyxHQUFHLE1BQU0sQ0FBQztpQkFDcEI7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO2FBQVc7WUFDVyxNQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNsQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksVUFBVSxFQUFFO3dCQUNqQyxPQUFPLEdBQUcsTUFBTSxDQUFDO3FCQUNwQjtnQkFDTCxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtLCBGb3JtQnV0dG9uLCBGb3JtQnV0dG9uTGF5b3V0LCBGb3JtQ2VsbENvbnRyb2wsIEZvcm1DZWxsQ29udHJvbFR5cGUsIEZvcm1DdXN0b21MYXlvdXQsIEZvcm1GaWVsZCB9IGZyb20gXCIuLi9mb3JtL21vZGVsXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uVXRpbHMgfSBmcm9tIFwiLi9jb2xsZWN0aW9uLnV0aWxpdHlcIjtcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSBcIi4vc3RyaW5nLnV0aWxpdHlcIjtcblxuXG5leHBvcnQgY2xhc3MgRm9ybUN1c3RvbVV0aWxzIHtcbiAgICBzdGF0aWMgc2V0Q3VzdG9tTGF5b3V0KGZvcm1Db25maWc6IEZvcm0sIGxheW91dDogRm9ybUN1c3RvbUxheW91dCkgeyBcbiAgICAgICAgaWYgKGxheW91dCAmJiAhQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkobGF5b3V0LmNlbGxzKSkge1xuICAgICAgICAgICAgbGF5b3V0LmNlbGxzLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFDb2xsZWN0aW9uVXRpbHMuaXNFbXB0eShjZWxsLmNvbnRyb2xzKSkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoY29udHJvbC5jb250cm9sKSkgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVkQ29udHJvbDogYW55ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRDb250cm9sID0gdGhpcy5nZXRDb250cm9sKGZvcm1Db25maWcsIGNvbnRyb2wpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5jb250cm9sID0gcmVzb2x2ZWRDb250cm9sO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGNvbnRyb2wudHlwZSA9PSBDZWxsQ29udHJvbGxUeXBlLkJVVFRPTiAmJiBjb250cm9sLmNvbnRyb2xbJ3R5cGUnXSA9PSBCdXR0b25UeXBlLkNISVApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbC5jb250cm9sWydncm91cElkZW50aWZpZXInXSA9IGNvbnRyb2wuY29udHJvbC5pZGVudGlmaWVyICsgY2VsbC5yb3dzICsgY2VsbC5jb2xzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhmb3JtQ29uZmlnLmxheW91dClcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Q29udHJvbChmb3JtQ29uZmlnOiBGb3JtLCBjZWxsQ29udHJvbDogRm9ybUNlbGxDb250cm9sKTogYW55IHtcbiAgICAgICAgbGV0IGNvbnRyb2w6IGFueSA9IHt9O1xuXG4gICAgICAgIGlmIChjZWxsQ29udHJvbC5jb250cm9sKSB7XG4gICAgICAgICAgICBjb250cm9sID0gY2VsbENvbnRyb2wuY29udHJvbDtcbiAgICAgICAgfSBlbHNlIGlmICghQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoZm9ybUNvbmZpZykgJiYgIUNvbGxlY3Rpb25VdGlscy5pc0VtcHR5KGZvcm1Db25maWcuZm9ybUZpZWxkcykgJiYgY2VsbENvbnRyb2wudHlwZSA9PSBGb3JtQ2VsbENvbnRyb2xUeXBlLkZJRUxEKSB7XG4gICAgICAgICAgICBjb250cm9sID0gdGhpcy5nZXRGaWVsZENvbnRyb2woZm9ybUNvbmZpZy5mb3JtRmllbGRzLCBjZWxsQ29udHJvbC5rZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFDb2xsZWN0aW9uVXRpbHMuaXNFbXB0eShmb3JtQ29uZmlnKSAmJiAhQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoZm9ybUNvbmZpZy5hY3Rpb24pICYmIGNlbGxDb250cm9sLnR5cGUgPT0gRm9ybUNlbGxDb250cm9sVHlwZS5CVVRUT04pIHtcbiAgICAgICAgICAgIGNvbnRyb2wgPSB0aGlzLmdldEJ1dHRvbkNvbnRyb2woZm9ybUNvbmZpZy5hY3Rpb24sIGNlbGxDb250cm9sLmtleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udHJvbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0RmllbGRDb250cm9sKGZvcm1GaWVsZHM6IEFycmF5PEZvcm1GaWVsZD4sIGNvbnRyb2xLZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIGxldCBjb250cm9sOiBhbnkgPSB7fTtcblxuICAgICAgICBmb3JtRmllbGRzLmZvckVhY2goZm9ybUZpZWxkID0+IHtcbiAgICAgICAgICAgIGlmICghQ29sbGVjdGlvblV0aWxzLmlzRW1wdHkoZm9ybUZpZWxkLmZpZWxkKSAmJiBmb3JtRmllbGQuZmllbGQua2V5ID09IGNvbnRyb2xLZXkpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sID0gZm9ybUZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBjb250cm9sO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRCdXR0b25Db250cm9sKGFjdGlvbjogRm9ybUJ1dHRvbiB8IEZvcm1CdXR0b25MYXlvdXQsIGNvbnRyb2xLZXk6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIGxldCBjb250cm9sOiBhbnk7XG5cbiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzRW1wdHkoYWN0aW9uWydyb3dIZWlnaHQnXSkpICAge1xuICAgICAgICAgICAgKDxGb3JtQnV0dG9uPmFjdGlvbikuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5pZGVudGlmaWVyID09IGNvbnRyb2xLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbCA9IGJ1dHRvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSAgIGVsc2UgICAge1xuICAgICAgICAgICAgKDxGb3JtQnV0dG9uTGF5b3V0PmFjdGlvbikuY2VsbHMuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICAgICAgICBjZWxsLmJ1dHRvbnMuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidXR0b24uaWRlbnRpZmllciA9PSBjb250cm9sS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sID0gYnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRyb2w7XG4gICAgfVxufSJdfQ==