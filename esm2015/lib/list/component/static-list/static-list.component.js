import { Component, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { BreakpointObserver } from '@angular/cdk/layout';
import { ListComponent } from '../list.component';
import { Ability } from '@casl/ability';
export class StaticListComponent extends ListComponent {
    constructor(ability, breakpointObserver) {
        super(ability, breakpointObserver);
        this.ability = ability;
        this.breakpointObserver = breakpointObserver;
        window.onscroll = () => { this.sticky(); };
    }
    ngOnInit() {
        this.init();
    }
    isList() {
        return this.listConfig.listType == "STATIC" /* STATIC */;
    }
    onSort(event) {
        const queryParams = { sorton: event['active'], sortdir: event['direction'] };
        this.expandedRow = null;
        let action = {
            sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,
            sourceIndex: this.sourceIndex ? this.sourceIndex : 0,
            widgetArrayIndex: this.widgetArrayIndex,
            action: this._listConfig.identifier,
            actionData: queryParams,
            data: this.record,
            originalData: this.record,
            parentHierarchy: this.parent,
            event: event
        };
        console.log(action);
        this.onSortChange.emit(action);
    }
    onPage(pageInfo) {
        console.log("scrolled:-", pageInfo);
        let action = {
            sourceIdentifier: this.sourceIdentifier ? this.sourceIdentifier : this._listConfig.identifier,
            sourceIndex: this.sourceIndex ? this.sourceIndex : 0,
            widgetArrayIndex: this.widgetArrayIndex,
            action: this._listConfig.identifier,
            actionData: pageInfo,
            data: this.record,
            originalData: this.record,
            parentHierarchy: this.parent,
            event: pageInfo
        };
        console.log(action);
        this.onPageChange.emit(action);
    }
    ngOnDestroy() {
    }
}
StaticListComponent.decorators = [
    { type: Component, args: [{
                selector: 'mx-static-list',
                template: "<!-- <pre>\n  {{displayVertical | json}}----\n</pre>  -->\n<mat-card  \n  [class.mx-hide-card]=\"hideCard\"\n  *ngIf=\"(_listConfig.permission == null || (_listConfig.permission && (_listConfig.permission['subject'] | can: _listConfig.permission['action'])))\">\n  <mat-card-header \n    [class.mx-table-hidden]=\"!(_listConfig) || hideHeader || !(_listConfig && _listConfig.header)\"\n    class=\"mx-list-header\" \n    *ngIf=\"hideHeader == false\">\n    <mat-icon \n      mat-card-avatar  \n      *ngIf=\"_listConfig.header && _listConfig.header.icon && _listConfig.header.icon.font && iconPosition == 'BEFORE_TITLE'\"\n      aria-hidden=\"false\" \n      [style.margin-top.px]=\"_listConfig.header.subtitle ? 8 : 0\"\n      [attr.aria-label]=\"_listConfig.header.icon.font\">\n      {{ _listConfig.header.icon.font }}\n    </mat-icon>\n\n    <mat-card-title *ngIf=\"_listConfig.header && _listConfig.header.title\">\n      {{_listConfig.header.title}}\n      <mat-icon \n        *ngIf=\"_listConfig.header && _listConfig.header.icon && _listConfig.header.icon.font && iconPosition == 'AFTER_TITLE'\"\n        aria-hidden=\"false\" [attr.aria-label]=\"_listConfig.header.icon.font\">{{ _listConfig.header.icon.font }}</mat-icon>\n    </mat-card-title>\n    \n    <mat-card-subtitle class=\"mx-list-header-subtitle\" *ngIf=\"_listConfig.header && _listConfig.header.subtitle\">{{ _listConfig.header.subtitle }}</mat-card-subtitle>\n\n    <div class=\"mx-list-header-buttons\" *ngIf=\"_listConfig.header && _listConfig.header.actions\">\n      <mx-button-group \n          [buttons]=\"_listConfig.header.actions\" \n          [sourceIdentifier]=\"sourceIdentifier\"\n          [sourceIndex]=\"sourceIndex\"\n          [widgetArrayIndex]=\"widgetArrayIndex\"\n          [originalData]=\"originalData\"\n          (onClick)=\"buttonClick($event)\">\n      </mx-button-group> \n    </div>\n  </mat-card-header>\n\n  <mat-card-content> \n    <div class=\"mdc-layout-grid mx-list-desc\" *ngIf=\"_listConfig.description && _listConfig.description.text && _listConfig.description.bgColor\">\n      <div class=\"mdc-layout-grid__inner\">\n        <div class=\"mdc-layout-grid__cell--span-12\">\n          <div \n            class=\"mx-list-header-desc\"\n            [style.background-color]=\"_listConfig.description.bgColor\"\n            [style.color]=\"_listConfig.description.textColor\"\n          >\n            <mat-icon class=\"mx-list-header-desc-icon\" aria-hidden=\"true\" [attr.aria-label]=\"_listConfig.description.icon\" *ngIf=\"_listConfig.description.icon\">{{_listConfig.description.icon}}</mat-icon>\n            <span>{{ _listConfig.description.text }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <mat-divider class=\"mx-list-header-divider\" *ngIf=\"(_listConfig.header && (_listConfig.header.title || _listConfig.header.actions)) || (_listConfig.description && _listConfig.description.text)\"></mat-divider>\n    <mat-card-subtitle *ngIf=\"_listConfig.description && _listConfig.description.text && !_listConfig.description.bgColor\">{{ _listConfig.description.text }}</mat-card-subtitle>\n  \n    <span *ngIf=\"_listConfig\">\n      <ng-container *ngTemplateOutlet=\"cftable\"></ng-container>\n    </span>\n    \n    <mat-card-actions \n      *ngIf=\"hideFooter == false && _listConfig.pagination!='INFINIT_SCROLL' && ((_listConfig) || hideFooter || !(_listConfig && (_listConfig.permission == null || (_listConfig.permission && (_listConfig.permission['subject'] | can: _listConfig.permission['action'])))))\"\n      class=\"mx-footer-actions\" \n      align=\"right\">\n      <mat-paginator \n        [length]=\"_record.total\" \n        [pageSize]=\"limit\"\n        [pageSizeOptions]=\"pageSizeOptions\"\n        (page)=\"onPage($event)\"\n        [ngClass]=\"{'page-wise': _listConfig.pagination=='NO_PAGE'}\"\n        [hidePageSize]=\"_listConfig.pagination=='NO_PAGE'\"\n      ></mat-paginator>\n    </mat-card-actions>\n    \n  </mat-card-content>\n</mat-card>\n\n<ng-template #cftable>\n  <span *ngIf=\"!isCustomTemplate && !(isMobile && _listConfig.mobile && _listConfig.mobile.rowHeight)\">\n    <ng-container *ngTemplateOutlet=\"cftablelist\"></ng-container>\n  </span> \n  <span *ngIf=\"isCustomTemplate\">\n    <ng-container \n      [ngTemplateOutlet]=\"cftablemobile\"\n      [ngTemplateOutletContext]=\"{layout: _listConfig.row.template.layout}\"></ng-container>\n  </span>\n  <span *ngIf=\"isMobile && _listConfig.mobile && _listConfig.mobile.rowHeight\">\n    <ng-container \n      [ngTemplateOutlet]=\"cftablemobile\"\n      [ngTemplateOutletContext]=\"{layout: _listConfig.mobile}\"></ng-container>\n  </span>\n</ng-template>\n\n<ng-template #cftablemobile let-layout=\"layout\">\n  <div class=\"mdc-layout-grid mx-card-list\">\n    <div class=\"mdc-layout-grid__inner\" id=\"mxMobileSearchStrip\" *ngIf=\"_listConfig.staticList.hasOnPageFilter || layout.sorting\">\n      <div \n        *ngIf=\"_listConfig.staticList.hasOnPageFilter\"\n        class=\"mx-mobile-search-field-cont mdc-layout-grid__cell--span-{{ _listConfig.staticList.hasOnPageFilter && !layout.sorting ? 12 : 9}}\"\n      >\n        <mx-field \n          [sourceType]=\"'FORM'\"\n          [form]=\"commonListForm\" \n          [fieldControl]=\"(commonListForm != undefined && commonListForm.controls['pageFilter']) ? commonListForm.controls['pageFilter'] : null\"\n          [field]=\"filterField\"\n          [hideLabel]=\"true\"\n          [displayMode]=\"'EDIT'\" \n          [value]=\"\"\n          (onFieldChange)=\"updateFilter($event);$event.event.stopPropagation()\"\n          class=\"mx-list-search-field search-mobile\"\n          [style.width.%]=\"100\">\n        </mx-field>  \n      </div>\n      <div \n        *ngIf=\"layout.sorting\"\n        class=\"mx-mobile-sort-field-cont mdc-layout-grid__cell--span-{{ !_listConfig.staticList.hasOnPageFilter && layout.sorting ? 12 : 3}}\"> \n        <mat-icon \n          class=\"mx-mobile-filter-icon\" \n          [ngClass]=\"{'rote':this.sortDirection=='desc'}\" \n          [matMenuTriggerFor]=\"filterMenu\"  \n          aria-label=\"Filter Menu\"\n        >filter_list</mat-icon>\n        <!-- (click)=\"(sortDirection == 'asc' ? sortDirection = 'desc' : sortDirection = 'asc');_record.rows=_record.rows.reverse();\" -->\n        <mat-menu #filterMenu=\"matMenu\">\n          <button \n            class=\"mx-mobile-filter-link\"\n            *ngFor=\"let sorting of layout.sorting\" \n            mat-menu-item\n            (click)=\"onSort({'action':sorting.key, 'direction':sorting.direction})\"\n          >\n            {{sorting.label}}\n            <span class=\"material-icons mx-material-icons\">\n              {{ sorting.direction == \"asc\" ? \"north\" : \"south\" }}\n            </span>\n          </button>\n        </mat-menu>\n      </div>\n    </div>\n    <div \n      *ngIf=\"layout && layout.rowHeight\"\n      [ngClass]=\"{'mx-list-infinite-scroll': _listConfig.pagination=='INFINIT_SCROLL'}\" \n      infiniteScroll \n      [infiniteScrollDistance]=\"2\" \n      [infiniteScrollThrottle]=\"1.5\" \n      [infiniteScrollContainer]=\"scrollRow\" \n      #scrollRow \n      (scrolled)=\"onPage($event)\">\n      <!-- <pre>{{_listConfig.mobile.cells | json}}</pre> -->\n      <mat-card class=\"mx-card-mobile\" *ngFor=\"let row of _record.rows; let rowIndex=index\">\n        <mat-card-content>\n          <mat-grid-list [cols]=\"cellCount\" [rowHeight]=\"layout.rowHeight\">\n            <mat-grid-tile *ngFor=\"let cell of layout.cells\" [colspan]=\"cell.cols\" [rowspan]=\"cell.rows\">\n              <div \n                class=\"mx-card-mobile-cell width-100\"\n                [ngClass]=\"{'mx-primary-text': cell.fieldStyle && cell.fieldStyle.class == 'PRIMARY', 'mx-secondary-text': cell.fieldStyle && cell.fieldStyle.class == 'SECONDARY', 'mx-tertiary-text': cell.fieldStyle && cell.fieldStyle.class == 'TERTIARY'}\"\n                *ngIf=\"!(cell.displayInline && cell.displayInline.separator && cell.controls && cell.controls.length > 0); else elseValue;\">\n                <ng-container [ngTemplateOutlet]=\"cfCustomCell\"\n                  [ngTemplateOutletContext]=\"{cell:cell, row:row, rowIndex:rowIndex}\"></ng-container>\n              </div>\n              <ng-template #elseValue>\n                <div \n                  class=\"mx-card-mobile-cell-inline\"\n                  [ngClass]=\"{'mx-primary-text': cell.fieldStyle && cell.fieldStyle.class == 'PRIMARY', 'mx-secondary-text': cell.fieldStyle && cell.fieldStyle.class == 'SECONDARY', 'mx-tertiary-text': cell.fieldStyle && cell.fieldStyle.class == 'TERTIARY'}\">\n                  <ng-container [ngTemplateOutlet]=\"cfCustomCell\"\n                    [ngTemplateOutletContext]=\"{cell:cell, row:row, rowIndex:rowIndex}\"></ng-container>\n                </div>\n              </ng-template>\n            </mat-grid-tile>\n          </mat-grid-list>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cfCustomRowLayout let-layout=\"layout\" let-row=\"row\" let-rowIndex=\"rowIndex\" let-withCard=\"withCard\"> \n  <mat-card class=\"mx-card-mobile\" *ngIf=\"withCard\">\n    <mat-card-content>\n      <ng-container  \n        [ngTemplateOutlet]=\"cfCustomRow\"\n        [ngTemplateOutletContext]=\"{layout: layout, row: row, rowIndex: rowIndex}\"\n      ></ng-container>\n    </mat-card-content>\n  </mat-card>\n  <span class=\"mx-card-mobile\" *ngIf=\"!withCard\">\n    <ng-container  \n      [ngTemplateOutlet]=\"cfCustomRow\"\n      [ngTemplateOutletContext]=\"{layout: layout, row: row, rowIndex: rowIndex}\"\n    ></ng-container>\n  </span>\n</ng-template>\n\n<ng-template #cfCustomRow let-layout=\"layout\" let-row=\"row\" let-rowIndex=\"rowIndex\"> \n  <mat-grid-list \n      [cols]=\"layout.cellCount\"  \n      [rowHeight]=\"layout.rowHeight\">\n      <mat-grid-tile\n        *ngFor=\"let cell of layout.cells\"\n        [colspan]=\"cell.cols\"\n        [rowspan]=\"cell.rows\">\n        <div \n          class=\"mx-card-mobile-cell\" \n          [ngClass]=\"{'mx-primary-text': cell.fieldStyle && cell.fieldStyle.class == 'PRIMARY', 'mx-secondary-text': cell.fieldStyle && cell.fieldStyle.class == 'SECONDARY', 'mx-tertiary-text': cell.fieldStyle && cell.fieldStyle.class == 'TERTIARY'}\"\n          *ngIf=\"!(cell.displayInline && cell.displayInline.separator && cell.controls && cell.controls.length > 0); else elseValue;\"> \n          <ng-container \n            [ngTemplateOutlet]=\"cfCustomCell\"\n            [ngTemplateOutletContext]=\"{cell:cell, row:row, rowIndex:rowIndex}\"\n          ></ng-container>\n        </div>\n        <ng-template #elseValue>\n          <div \n            class=\"mx-card-mobile-cell-inline\"\n            [ngClass]=\"{'mx-primary-text': cell.fieldStyle && cell.fieldStyle.class == 'PRIMARY', 'mx-secondary-text': cell.fieldStyle && cell.fieldStyle.class == 'SECONDARY', 'mx-tertiary-text': cell.fieldStyle && cell.fieldStyle.class == 'TERTIARY'}\">\n            <ng-container \n              [ngTemplateOutlet]=\"cfCustomCell\"\n              [ngTemplateOutletContext]=\"{cell:cell, row:row, rowIndex:rowIndex}\"\n            ></ng-container>\n          </div>\n        </ng-template>\n      </mat-grid-tile>\n    </mat-grid-list>   \n</ng-template>\n\n<ng-template #cfCustomCell let-cell=\"cell\" let-row=\"row\" let-rowIndex=\"rowIndex\">\n  <span \n    [ngClass]=\"{'fullwidth': control.fullWidth}\"\n    class=\"{{ control?.alignment?.vertical }} {{ control?.alignment?.horizontal }}\"\n    *ngFor=\"let control of cell.controls; let cControlIndex = index;\">\n    <!-- {{control.control.key}} --> \n    <span \n      class=\"mx-card-mobile-control-separator\"\n      *ngIf=\"cell.displayInline && cell.displayInline.separator && cControlIndex > 0\" \n      [innerHtml]=\"cell.displayInline.separator\"></span>\n\n    <!-- =={{cell.link | json}}--{{cell.linkKey}}--=={{control.control.key}}=={{control.type}}== -->\n    <mx-field\n      *ngIf=\"control.control && (!cell.link || (cell.link && cell.linkKey && cell.linkKey != control.control.key)) && control.type == 'FIELD'\" \n      [sourceType]=\"'LIST'\"\n      [sourceIdentifier]=\"_listConfig.identifier\" \n      [sourceIndex]=\"rowIndex\" \n      [widgetArrayIndex]=\"widgetArrayIndex\"\n      [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\" \n      [fieldControl]=\"(formIndex == rowIndex && form != undefined) ? form.controls[control.control.key] : null\"\n      [field]=\"control.control\"\n      [displayMode]=\"displayModes[rowIndex]\" \n      [hideLabel]=\"true\"\n      [value]=\"getValue(control.colIndex, control.cControlIndex, row, control.control.value)\" \n      class=\"mx-list-field\"\n      [ngClass]=\"{'mx-list-field-disabled': (_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled, 'mx-primary-text': control.fieldStyle && control.fieldStyle.class == 'PRIMARY', 'mx-secondary-text': control.fieldStyle && control.fieldStyle.class == 'SECONDARY', 'mx-tertiary-text': control.fieldStyle && control.fieldStyle.class == 'TERTIARY'}\"\n      [row]=\"row\"\n      [keyMap]=\"keyMap\"\n      (onFieldChange)=\"fieldChange($event);$event.event && $event.event.stopPropagation ? $event.event.stopPropagation(): ''\">\n    </mx-field>\n    <mx-button\n      *ngIf=\"cell.link && ((cell.linkKey && cell.linkKey == control.control.key) || !cell.linkKey) && control.type == 'FIELD'\" \n      [identifier]=\"'listFieldAsLink'\"\n      [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\"\n      [sourceIdentifier]=\"_listConfig.identifier\"\n      [sourceIndex]=\"rowIndex\"\n      [widgetArrayIndex]=\"widgetArrayIndex\"\n      [button]=\"cell.link\"\n      [label]=\"getValue(control.colIndex, control.cControlIndex, row, control.control.value)\"\n      [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\"\n      [originalData]=\"row\"\n      [parentHierarchy]=\"parent\"\n      [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n      (onClick)=\"buttonClick($event);$event.event.stopPropagation()\"\n    ></mx-button>\n\n    <!-- [formDisplayMode]=\"formConfig.displayMode\" -->\n    <!-- <mx-button-group \n      [ngClass]=\"{'fullwidth': control.fullWidth}\"\n      *ngIf=\"control.type == 'BUTTON'\"\n      [buttons]=\"control.control\" \n      [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\" \n      [sourceIdentifier]=\"_listConfig.identifier\"\n      [sourceIndex]=\"rowIndex\" \n      [widgetArrayIndex]=\"widgetArrayIndex\"\n      [originalData]=\"row\"\n      [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\" \n      (onClick)=\"buttonClick($event)\">\n    </mx-button-group> -->\n\n    <mx-button \n      *ngIf=\"control.type == 'BUTTON'\"\n      [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\"\n      [sourceIdentifier]=\"_listConfig.identifier\"\n      [sourceIndex]=\"rowIndex\" \n      [widgetArrayIndex]=\"widgetArrayIndex\"\n      [button]=\"control.control\"\n      [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\" \n      [originalData]=\"row\"\n      [parentHierarchy]=\"parent\" \n      [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n      (onClick)=\"setRowEditablity(rowIndex);buttonClick($event);$event.event.stopPropagation()\"\n    ></mx-button> \n  </span>\n</ng-template>\n\n<ng-template #cftablelist>\n  <div class=\"mdc-layout-grid mx-table\">\n    <div class=\"mdc-layout-grid__inner\" id=\"mxMobileSearchStrip\" *ngIf=\"_listConfig.staticList.hasOnPageFilter || _listConfig.hasColumnSelection\">\n      <div \n        *ngIf=\"_listConfig.staticList.hasOnPageFilter\"\n        class=\"mdc-layout-grid__cell--span-{{ _listConfig.staticList.hasOnPageFilter && !_listConfig.hasColumnSelection ? 12 : 9}}\"\n      >\n        <mx-field \n          [sourceType]=\"'FORM'\"\n          [form]=\"commonListForm\" \n          [fieldControl]=\"(commonListForm != undefined && commonListForm.controls['pageFilter']) ? commonListForm.controls['pageFilter'] : null\"\n          [field]=\"filterField\"\n          [hideLabel]=\"true\"\n          [displayMode]=\"'EDIT'\" \n          [value]=\"\"\n          (onFieldChange)=\"updateFilter($event);$event.event.stopPropagation()\"\n          class=\"mx-list-search-field\"\n          [style.width.%]=\"100\">\n        </mx-field>  \n      </div>\n      <div \n        *ngIf=\"_listConfig.hasColumnSelection\" \n        class=\"mdc-layout-grid__cell--span-{{!_listConfig.staticList.hasOnPageFilter && _listConfig.hasColumnSelection ? 12 : 3}} mdc-layout-grid--align-right\" \n        [style.width.%]=\"100\">\n        <mx-field\n          [sourceType]=\"'FORM'\"\n          [form]=\"commonListForm\" \n          [fieldControl]=\"(commonListForm != undefined && commonListForm.controls['columnSelector']) ? commonListForm.controls['columnSelector'] : null\"\n          [field]=\"columnSelectorField\"\n          [hideLabel]=\"true\"\n          [displayMode]=\"'EDIT'\" \n          class=\"mx-list-sel-col-field\"\n          (onFieldChange)=\"updateColumnDisplay($event)\"\n          [style.width.%]=\"100\">\n        </mx-field>  \n        <!-- ;$event.event.stopPropagation() -->\n      </div>\n    </div>\n    <div class=\"mdc-layout-grid__inner\">\n      <div class=\"mdc-layout-grid__cell--span-12\" *ngIf=\"columnNames\">\n        <table  \n          mat-table  \n          [dataSource]=\"dataSource\" \n          class=\"mx-table\"\n          [ngClass]=\"{'mx-table-hover': _listConfig.shade && _listConfig.shade.type == 'HOVER', 'mx-table-alternate': _listConfig.shade && _listConfig.shade.type == 'ALTERNATE', 'mx-table-without-header': _listConfig.hideHeaderRow}\"\n          multiTemplateDataRows\n          matSort\n          [matSortActive]=\"_listConfig.defaultSort ? _listConfig.defaultSort.column : ''\" \n          matSortDisableClear  \n          [style.width.%]=\"'100'\"\n          [matSortDirection]=\"_listConfig.defaultSort ? _listConfig.defaultSort.order: ''\"\n          (matSortChange)=\"onSort($event)\">\n\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"9999\">\n              {{ _listConfig.noRecordFound ? _listConfig.noRecordFound : 'No data found'}}\n            </td>\n          </tr>\n          \n          <ng-container matColumnDef=\"select\">\n            <th \n              [class.mx-table-header-hidden]=\"_listConfig.hideHeaderRow\"\n              mat-header-cell \n              *matHeaderCellDef \n              class=\"selectable-column\">\n              <mat-checkbox \n                class=\"mx-list-checkbox-selectable\"\n                (change)=\"$event ? masterToggle() : null\"\n                [checked]=\"selection.hasValue() && isAllSelected()\"\n                [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                [aria-label]=\"checkboxLabel()\">\n              </mat-checkbox>\n            </th>\n            <td \n              mat-cell \n              *matCellDef=\"let row; let rowIndex = dataIndex\"\n              [ngClass]=\"{'mx-row-editable': inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel', 'mx-row-non-editable': !(inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel')}\"\n              [style.background-color]=\"rowColors && rowColors[rowIndex] ? rowColors[rowIndex].bgColor : ''\"\n              [style.color]=\"rowColors && rowColors[rowIndex] ? rowColors[rowIndex].textColor : ''\"\n              class=\"selectable-column\">\n              <mat-checkbox \n                class=\"mx-list-checkbox-selectable\"\n                [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n                (change)=\"$event ? selection.toggle(row) : null\"\n                [checked]=\"selection.isSelected(row)\"\n                [aria-label]=\"checkboxLabel(row)\">\n              </mat-checkbox>\n                <!-- (click)=\"$event.event.stopPropagation()\" -->\n            </td>\n          </ng-container>\n          \n          <ng-container \n            *ngFor=\"let column of columnConfigs; let colIndex = index\"\n            [matColumnDef]=\"getColumnKey(column)\">\n            <th \n              mat-header-cell \n              *matHeaderCellDef\n              mat-sort-header\n              disableClear\n              [disabled]=\"!column.sortable\"\n              [class.mx-table-header-hidden]=\"_listConfig.hideHeaderRow\"\n              [ngClass]=\"{'mx-list-field-first': colIndex == 0}\"\n              [style.width.%]=\"displayVertical ? '' : column.width / totalDispalyableWidth * 100\">\n              {{getColumnLabel(column)}}\n            </th> \n            <!-- [attr.data-label]=\"getColumnLabel(column)\" -->\n            <td \n              mat-cell \n              *matCellDef=\"let row; let rowIndex = dataIndex\"\n              class=\"mx-table-data-cell\"\n              [ngClass]=\"{'mx-row-editable': inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel', 'mx-row-non-editable': !(inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel')}\"\n              [style.background-color]=\"cellColors && cellColors[rowIndex] && cellColors[rowIndex][colIndex] ? cellColors[rowIndex][colIndex].bgColor : ''\"\n              [style.color]=\"cellColors && cellColors[rowIndex] && cellColors[rowIndex][colIndex] ? cellColors[rowIndex][colIndex].textColor : ''\"\n              [style.width.%]=\"displayVertical ? '' : column.width / totalDispalyableWidth * 100\"\n              (click)=\"_listConfig.rowAction ? rowClick(row, rowIndex, ((formIndex == rowIndex && form != undefined) ? form.value : null), $event) : _listConfig.rowAction\"\n              >\n\n              <ng-container *ngIf=\"column?.template?.html || column?.template?.layout; else elseDefault\">\n                <div \n                  [style.width.%]=\"100\"\n                  *ngIf=\"column?.template?.html\">\n                  <ng-container *cfTemplate=\"'<style>'+column?.template?.css+'</style>' + column?.template?.html; context: {row: row, index: rowIndex}\"></ng-container>\n                </div>\n                <div \n                  [style.width.%]=\"100\"\n                  *ngIf=\"column?.template?.layout\">\n                  <!-- {{row | json}}--- -->\n                  <ng-container  \n                    [ngTemplateOutlet]=\"cfCustomRowLayout\"\n                    [ngTemplateOutletContext]=\"{layout: column.template.layout, row: row, rowIndex: rowIndex, withCard: false}\"\n                  ></ng-container>\n                </div>\n              </ng-container>\n              <ng-template #elseDefault>\n                <div \n                  [ngClass]=\"{'mx-list-field-not-first': cFieldIndex > 0, 'mx-list-field-inline': column.displayInline && column.displayInline.separator}\" \n                  *ngFor=\"let field of column.fields; let cFieldIndex = index;\">\n                  <span *ngIf=\"column.displayInline && column.displayInline.separator && cFieldIndex > 0\">{{column.displayInline.separator}}</span>\n                  <mx-field\n                    *ngIf=\"!column.link || (column.link && column.linkKey && column.linkKey != field.key)\" \n                    [sourceType]=\"'LIST'\"\n                    [sourceIdentifier]=\"_listConfig.identifier\" \n                    [sourceIndex]=\"rowIndex\" \n                    [widgetArrayIndex]=\"widgetArrayIndex\"\n                    [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\" \n                    [fieldControl]=\"(formIndex == rowIndex && form != undefined) ? form.controls[field.key] : null\"\n                    [field]=\"field\"\n                    [displayMode]=\"displayModes[rowIndex]\" \n                    [hideLabel]=\"true\"\n                    [value]=\"getValue(colIndex, cFieldIndex, row, field.value)\" \n                    class=\"mx-list-field\"\n                    [ngClass]=\"{'mx-list-field-disabled': (_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled}\"\n                    [row]=\"row\"\n                    [keyMap]=\"keyMap\"\n                    (onFieldChange)=\"fieldChange($event);$event.event && $event.event.stopPropagation ? $event.event.stopPropagation(): ''\">\n                  </mx-field>\n                  <mx-button\n                    *ngIf=\"column.link && ((column.linkKey && column.linkKey == field.key) || !column.linkKey)\" \n                    [identifier]=\"'listFieldAsLink'\"\n                    [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\"\n                    [sourceIdentifier]=\"_listConfig.identifier\"\n                    [sourceIndex]=\"rowIndex\"\n                    [widgetArrayIndex]=\"widgetArrayIndex\"\n                    [button]=\"column.link\"\n                    [label]=\"getValue(colIndex, cFieldIndex, row, field.value)\"\n                    [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\"\n                    [originalData]=\"row\"\n                    [parentHierarchy]=\"parent\"\n                    [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n                    (onClick)=\"buttonClick($event);$event.event.stopPropagation()\"\n                  ></mx-button>\n                </div>\n              </ng-template>\n            </td>\n          </ng-container>\n      \n          <ng-container matColumnDef=\"expandedRow\"> \n            <td \n              mat-cell \n              [ngClass]=\"{'mx-row-editable': inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel', 'mx-row-non-editable': !(inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel')}\"\n              *matCellDef=\"let row; let rowIndex = dataIndex\" \n              [attr.colspan]=\"childColumnCount\">\n              <div class=\"mx-element-detail\"\n                  [@detailExpand]=\"row == expandedRow || this._expanded == true ? 'expanded' : 'collapsed'\">\n                <mx-static-list \n                  *ngIf=\"_listConfig.child && _listConfig.child.type == 'LIST' && _listConfig.child.record && (row == expandedRow || _expanded == true)\"\n                  [listConfig]=\"_listConfig.child.record\" \n                  [sourceIdentifier]=\"sourceIdentifier\"\n                  [record]=\"getChildRows(expandedRow)\" \n                  [keyMap]=\"keyMap\"\n                  [expanded]=\"_expanded\"\n                  [listReset]=\"listReset\"\n                  [parent]=\"getObjectTree(row)\"\n                  [style.width.%]=\"100\"\n                  [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n                  (onFormChange)=\"formChange($event)\"\n                  (onFieldChange)=\"fieldChange($event);$event.event.stopPropagation()\"\n                  (onButtonClick)=\"buttonClick($event);$event.event.stopPropagation()\"\n                  (onPageChange)=\"onPage($event)\"\n                  (onSortChange)=\"onSort($event)\"  \n                >\n                </mx-static-list>\n                <mx-form \n                    *ngIf=\"_listConfig.child && _listConfig.child.type == 'FORM' && (row == expandedRow || _expanded == true)\"\n                    [formConfig]=\"_listConfig.child.record\"\n                    [sourceIdentifier]=\"_listConfig.identifier\"\n                    [sourceIndex]=\"rowIndex\"\n                    [widgetArrayIndex]=\"widgetArrayIndex\"\n                    [record]=\"getChildRows(expandedRow)\" \n                    [keyMap]=\"keyMap\"\n                    [reset]=\"listReset\"\n                    [style.width.%]=\"100\"\n                    (onFormChange)=\"formChange($event)\"\n                    (onFieldChange)=\"fieldChange($event)\"\n                    (onButtonClick)=\"buttonClick($event)\"\n                ></mx-form>\n              </div>\n            </td> \n          </ng-container>\n      \n          <ng-container \n            *ngIf=\"_listConfig.actions && _listConfig.actions.length > 0\"\n            matColumnDef=\"action\">\n            <th \n              mat-header-cell \n              *matHeaderCellDef\n              class=\"mx-list-action-col\"\n              [class.mx-table-header-hidden]=\"_listConfig.hideHeaderRow\"\n              [style.width.%]=\"displayVertical ? '' : _listConfig.actionWidth / totalDispalyableWidth * 100\"\n              >\n              Action\n            </th>\n            <td \n              mat-cell \n              *matCellDef=\"let row; let rowIndex = dataIndex\"\n              class=\"mx-list-action-col mx-row-non-editable\"\n              [style.background-color]=\"rowColors && rowColors[rowIndex] ? rowColors[rowIndex].bgColor : ''\"\n              [style.color]=\"rowColors && rowColors[rowIndex] ? rowColors[rowIndex].textColor : ''\"\n              [style.width.%]=\"displayVertical ? '' : _listConfig.actionWidth / totalDispalyableWidth * 100\"\n              > \n              <!-- --{{inlineEditButtons[rowIndex].size}} -->\n              <mx-button \n                *ngIf=\"isInlineEditable && inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].icon\"\n                [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\"\n                [sourceIdentifier]=\"_listConfig.identifier\"\n                [sourceIndex]=\"rowIndex\" \n                [widgetArrayIndex]=\"widgetArrayIndex\"\n                [button]=\"inlineEditButtons[rowIndex]\"\n                class=\"mx-button\"\n                [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\" \n                [originalData]=\"row\"\n                [parentHierarchy]=\"parent\" \n                [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n                (onClick)=\"setRowEditablity(rowIndex);buttonClick($event);$event.event.stopPropagation()\"\n              ></mx-button> \n              <mx-button-group\n                  *ngIf=\"!isInlineEditable || (inlineEditButtons && inlineEditButtons[rowIndex] && inlineEditButtons[rowIndex].label == 'Cancel')\"\n                  [buttons]=\"_listConfig.actions\"\n                  [form]=\"(formIndex == rowIndex && form != undefined) ? form : null\"\n                  [sourceIdentifier]=\"_listConfig.identifier\"\n                  [sourceIndex]=\"rowIndex\"\n                  [widgetArrayIndex]=\"widgetArrayIndex\"\n                  [context]=\"(formIndex == rowIndex && form != undefined) ? form.value : null\"\n                  [originalData]=\"row\"\n                  [parentHierarchy]=\"parent\"\n                  [disabled]=\"(_listConfig && row && _listConfig.disableRow && _listConfig.disableRow(row)) || disabled\"\n                  (onClick)=\"buttonClick($event);\"\n              ></mx-button-group>\n            </td>\n          </ng-container> \n          <tr \n            mat-header-row \n            *matHeaderRowDef=\"columnNames; sticky: _listConfig.stickyHeader\"\n          ></tr>\n          <div *ngIf=\"(_listConfig.row &&_listConfig.row.hover);else withoutTooltip\">\n            <tr \n              mat-row \n              *matRowDef=\"let row; columns: columnNames; let i = dataIndex;\"\n              [tooltip]=\"rowHoverTemplate\"\n              show-delay=\"300\"\n              [position]=\"tooltipPosition\"\n              [width]=\"_listConfig?.row?.hover?.width\"  \n              [max-width]=\"_listConfig?.row?.hover?.width\"\n              theme=\"light\"\n              content-type=\"template\"\n              class=\"mx-row\"\n              [ngClass]=\"{'without-hover': !(_listConfig.row &&_listConfig.row.hover)}\"\n              (mouseenter)=\"onHover($event,i, (_listConfig && _listConfig.child && _listConfig.child.record && expandedRow === row) ? null : row)\" \n              (click)=\"expandedRow = (_listConfig && _listConfig.child && _listConfig.child.record && expandedRow === row) ? null : row\"\n            ></tr>\n          </div>\n\n          <ng-template #withoutTooltip>\n            <tr \n              mat-row \n              *matRowDef=\"let row; columns: columnNames; let i = dataIndex;\"\n              class=\"mx-row\"\n              [ngClass]=\"{'without-hover': !(_listConfig.row &&_listConfig.row.hover)}\"\n              (click)=\"expandedRow = (_listConfig && _listConfig.child && _listConfig.child.record && expandedRow === row) ? null : row\"\n            ></tr>\n          </ng-template>\n          <!-- [tooltip]=\"rowHoverTemplate\"\n          placement=\"bottom\"\n          content-type=\"template\"\n          hideDelayTouchscreen=0\n          hide-delay=100\n          show-delay=100\n          animation-duration=100\n          max-width=_listConfig?.row?.hover?.width\n          display=\"_listConfig.row && _listConfig.row.hover && (_listConfig.row.hover.template || _listConfig.row.hover.layout)\"\n          theme=\"light\"\n           -->\n          <tr  \n            style=\"background-color: aliceblue;\"\n            mat-row  \n            *matRowDef=\"let row; columns: ['expandedRow']\" \n            [ngClass]=\"{'mx-detail-row-hide': !_listConfig.child || !_listConfig.child.record}\"\n            class=\"mx-detail-row\"\n          ></tr>\n        </table>\n      </div>\n    </div>\n  </div>\n</ng-template> \n\n<ng-template #rowHoverTemplate>\n  <div *ngIf=\"_listConfig?.row?.hover && _listConfig.row.hover.template && _listConfig.row.hover.template.component\" [ngStyle]=\"{'width': _listConfig.row.hover.width + 'px'}\">\n    <!-- <ndc-dynamic\n      [ndcDynamicComponent]=\"_listConfig.row.hover.template.component\"\n      [ndcDynamicInputs]=\"hoverRowData\"\n    ></ndc-dynamic> -->\n  </div>\n  <div *ngIf=\"_listConfig?.row?.hover && _listConfig.row.hover.template && _listConfig.row.hover.template.layout\" [ngStyle]=\"{'width': _listConfig.row.hover.width + 'px'}\" class=\"mx-list-hover-tooltip\">\n    <ng-container  \n      [ngTemplateOutlet]=\"cfCustomRowLayout\"\n      [ngTemplateOutletContext]=\"{layout: _listConfig.row.hover.template.layout, row: hoverRowData, rowIndex: hoverRowIndex, withCard: false}\"\n    ></ng-container>\n  </div>\n</ng-template> \n\n<ng-template #rowTemplate>\n  <div *ngIf=\"_listConfig?.row?.template\">\n    <!-- <ndc-dynamic [ndcDynamicComponent]=\"_listConfig.row.template\"></ndc-dynamic> -->\n  </div>\n</ng-template>",
                animations: [
                    trigger('detailExpand', [
                        state('collapsed', style({ height: '0px', minHeight: '0' })),
                        state('expanded', style({ height: '*' })),
                        transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ]),
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".mx-list-header .mat-card-header-text{margin:0!important}.mx-list-header .mat-card-title{margin-top:6px}.mx-list-header .mat-card-avatar{font-size:40px;padding-right:8px}.mat-card-subtitle,.mx-list-header-subtitle .mat-card-subtitle{padding-top:8px}.mx-list-header-buttons{position:absolute;right:5px;top:5px}.mx-table-header-hidden,.mx-table-hidden{display:none!important}.mx-table-without-header thead,.mx-table-without-header tr.mat-header-row{height:0!important}table{width:100%}.mx-list-desc,.mx-table{padding:0!important}.mx-hide-card{padding:0}td,th{max-width:200px;white-space:normal;word-wrap:break-word}.mx-element-detail{border-left:2px groove #f5f5f5;display:flex;overflow:hidden;padding-right:3px;width:100%}.mx-list-action-col{text-align:right!important}tr.mx-detail-row{background-color:#f5f5f5;height:0!important}tr.mx-detail-row-hide{display:none!important}.sticky{position:-webkit-sticky;position:sticky}.selectable-column{padding-right:1%}.rote{transform:rotateX(180deg)}.mx-element-detail>th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:0!important}.mat-card-content{margin-bottom:0!important}.mx-list-header-desc{margin:5px 0;padding:5px 10px;width:auto}.mx-list-header-desc-icon{font-size:15px;height:15px;margin-top:0;padding:0 5px 0 0;width:15px}.mx-table-alternate tr.mat-row:nth-child(odd),.mx-table-hover tr.mat-row:hover{background:#f5f5f5}.mx-table-alternate tr.mat-row:not(:nth-child(4n+1)){background:#fff}.mx-list-field .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:0}.mx-list-field-not-first{padding-top:5px}.mx-list-field-disabled{color:rgba(0,0,0,.5411764705882353)}.mx-list-checkbox-selectable{padding-right:12px}.mx-list-field-inline{display:inline}@media screen and (max-width:599px){.mat-table{border:0;vertical-align:middle}.mat-table caption{font-size:1em}.mat-table .mat-header-row{display:none}.mat-table .mat-header-cell{border:10px solid;clip:rect(0 0 0 0);height:1px;margin:-1px;padding:0;position:absolute;width:1px}.mat-table .mat-row{border-bottom:5px solid #ddd;display:block;height:unset}.mat-table .mat-cell{display:block;font-size:1em;font-weight:700}.mat-table .mx-row-non-editable{border-bottom-width:1px;padding:12px 8px!important}.mat-table .mx-row-editable{border-bottom-width:0;padding:0 8px!important}.mat-table .mat-cell:before{content:attr(data-label);float:left;font-size:.85em;font-weight:400}.mat-table .mat-cell:last-child{border-bottom:0}.mat-table .mat-row td{max-width:unset}}.mx-card-list{padding:0}.mx-card-list mat-card{padding:8px}.mx-card-mobile{margin-bottom:12px;word-wrap:break-word}.mx-card-mobile .mat-grid-tile .mat-figure{justify-content:unset}.mx-card-mobile .mx-primary-text .mx-field-value{font-size:18px;font-weight:400;margin-bottom:none}.mx-card-mobile .mx-secondary-text .mx-field-value{font-size:14px;font-weight:300;margin-bottom:none;margin-top:4px}.mx-card-mobile .mx-tertiary-text .mx-field-value{font-size:12px;font-weight:300;margin-bottom:none;margin-top:8px}.mx-card-mobile .mx-card-mobile-cell{display:block;width:100%}.mx-card-mobile .mx-card-mobile-cell .fullwidth button{width:100%}.mx-card-mobile .mx-card-mobile-cell .mx-primary-text .mx-field-value,.mx-card-mobile .mx-card-mobile-cell .mx-secondary-text .mx-field-value,.mx-card-mobile .mx-card-mobile-cell .mx-tertiary-text .mx-field-value{display:block}.mx-card-mobile .mx-card-mobile-cell .fullwidth button,.mx-card-mobile .mx-card-mobile-cell .fullwidth mat-chip{width:100%}.mx-card-mobile .mx-card-mobile-cell-inline{display:inline-block;width:100%}.mx-card-mobile .mx-card-mobile-cell-inline .mx-card-mobile-control-separator{padding:4px}.hover-template{display:none;position:absolute;z-index:9999}.mx-row:hover .without-hover{pointer-events:none}.mx-list-infinite-scroll{height:69vh;overflow-y:auto}.search-mobile{margin-right:10px}.mx-mobile-search-field-cont,.mx-mobile-sort-field-cont{display:flex}.sticky{background:#fff;border-bottom:1px solid #d3cece;left:0;margin:0 auto;padding:10px 20px;position:fixed;right:0;top:0;width:88%;z-index:99}.sticky+.content{padding-top:102px}.mx-mobile-filter-icon{padding-top:8px}.mx-mobile-filter-link{text-align:end}.mx-list-hover-tooltip{padding:8px}.right-align-forced{text-align:right;width:100%}.width-100{height:100%;width:100%!important}.top{top:0}.middle{top:40%}.bottom{bottom:0}.left{left:0}.left,.right{display:block;position:absolute;width:auto}.right{right:0}.center{display:block;left:50%;position:absolute;width:auto}.mat-drawer-inner-container{overflow:hidden!important}.mx-material-icons{font-size:12px}"]
            },] }
];
StaticListComponent.ctorParameters = () => [
    { type: Ability },
    { type: BreakpointObserver }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9uaXRpbmtoYWl0YW4vTml0aW4vc3R1ZHkvYW5ndWxhci9tYXRlcmlhbC9hZG1pbi1idWlsZGVyLXBsdWdpbi9wcm9qZWN0cy9uZ3gtbWF0ZXJpYWwtd2lkZ2V0L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9saXN0L2NvbXBvbmVudC9zdGF0aWMtbGlzdC9zdGF0aWMtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUlsRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBZXhDLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxhQUFhO0lBQ3BELFlBQW1CLE9BQWdCLEVBQVMsa0JBQXNDO1FBQ2hGLEtBQUssQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQURsQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQVMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUVoRixNQUFNLENBQUMsUUFBUSxHQUFHLEdBQUUsRUFBRSxHQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQSxDQUFBLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEseUJBQW1CLENBQUM7SUFDckQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsTUFBTSxXQUFXLEdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUVyRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUV4QixJQUFJLE1BQU0sR0FBVztZQUNuQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVO1lBQzdGLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVTtZQUNuQyxVQUFVLEVBQUUsV0FBVztZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDakIsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3pCLGVBQWUsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUM1QixLQUFLLEVBQUUsS0FBSztTQUNiLENBQUE7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBb0I7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEMsSUFBSSxNQUFNLEdBQVc7WUFDbkIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVTtZQUM3RixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVU7WUFDbkMsVUFBVSxFQUFFLFFBQVE7WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsTUFBTTtZQUN6QixlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDNUIsS0FBSyxFQUFFLFFBQVE7U0FDaEIsQ0FBQztRQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFdBQVc7SUFDWCxDQUFDOzs7WUFuRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLGlza0NBQTJDO2dCQUUzQyxVQUFVLEVBQUU7b0JBQ1YsT0FBTyxDQUFDLGNBQWMsRUFBRTt3QkFDdEIsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO3dCQUMxRCxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO3dCQUN2QyxVQUFVLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7cUJBQ3RGLENBQUM7aUJBQ0g7Z0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3RDOzs7WUFkUSxPQUFPO1lBTlAsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2FuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlcn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmltcG9ydCB7IEJyZWFrcG9pbnRPYnNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9sYXlvdXQnO1xuXG5pbXBvcnQgeyBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGlzdFR5cGUsIFBhZ2luYXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vYnV0dG9uL21vZGVsJztcbmltcG9ydCB7IEFiaWxpdHkgfSBmcm9tICdAY2FzbC9hYmlsaXR5JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbXgtc3RhdGljLWxpc3QnLCBcbiAgdGVtcGxhdGVVcmw6ICcuL3N0YXRpYy1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3RhdGljLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ2RldGFpbEV4cGFuZCcsIFtcbiAgICAgIHN0YXRlKCdjb2xsYXBzZWQnLCBzdHlsZSh7aGVpZ2h0OiAnMHB4JywgbWluSGVpZ2h0OiAnMCd9KSksXG4gICAgICBzdGF0ZSgnZXhwYW5kZWQnLCBzdHlsZSh7aGVpZ2h0OiAnKid9KSksXG4gICAgICB0cmFuc2l0aW9uKCdleHBhbmRlZCA8PT4gY29sbGFwc2VkJywgYW5pbWF0ZSgnMjI1bXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpJykpLFxuICAgIF0pLFxuICBdLCBcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBTdGF0aWNMaXN0Q29tcG9uZW50IGV4dGVuZHMgTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhYmlsaXR5OiBBYmlsaXR5LCBwdWJsaWMgYnJlYWtwb2ludE9ic2VydmVyOiBCcmVha3BvaW50T2JzZXJ2ZXIpIHtcbiAgICBzdXBlcihhYmlsaXR5LCBicmVha3BvaW50T2JzZXJ2ZXIpO1xuICAgIHdpbmRvdy5vbnNjcm9sbCA9ICgpPT4ge3RoaXMuc3RpY2t5KCl9O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpc0xpc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGlzdENvbmZpZy5saXN0VHlwZSA9PSBMaXN0VHlwZS5TVEFUSUM7XG4gIH1cblxuICBvblNvcnQoZXZlbnQpIHtcbiAgICBjb25zdCBxdWVyeVBhcmFtczogUGFyYW1zID0geyBzb3J0b246IGV2ZW50WydhY3RpdmUnXSwgc29ydGRpcjogZXZlbnRbJ2RpcmVjdGlvbiddIH07XG5cbiAgICB0aGlzLmV4cGFuZGVkUm93ID0gbnVsbDtcbiAgICBcbiAgICBsZXQgYWN0aW9uOiBBY3Rpb24gPSB7XG4gICAgICBzb3VyY2VJZGVudGlmaWVyOiB0aGlzLnNvdXJjZUlkZW50aWZpZXIgPyB0aGlzLnNvdXJjZUlkZW50aWZpZXIgOiB0aGlzLl9saXN0Q29uZmlnLmlkZW50aWZpZXIsXG4gICAgICBzb3VyY2VJbmRleDogdGhpcy5zb3VyY2VJbmRleCA/IHRoaXMuc291cmNlSW5kZXggOiAwLFxuICAgICAgd2lkZ2V0QXJyYXlJbmRleDogdGhpcy53aWRnZXRBcnJheUluZGV4LFxuICAgICAgYWN0aW9uOiB0aGlzLl9saXN0Q29uZmlnLmlkZW50aWZpZXIsXG4gICAgICBhY3Rpb25EYXRhOiBxdWVyeVBhcmFtcyxcbiAgICAgIGRhdGE6IHRoaXMucmVjb3JkLFxuICAgICAgb3JpZ2luYWxEYXRhOiB0aGlzLnJlY29yZCxcbiAgICAgIHBhcmVudEhpZXJhcmNoeTogdGhpcy5wYXJlbnQsXG4gICAgICBldmVudDogZXZlbnRcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhhY3Rpb24pO1xuICAgIHRoaXMub25Tb3J0Q2hhbmdlLmVtaXQoYWN0aW9uKTtcbiAgfVxuXG4gIG9uUGFnZShwYWdlSW5mbzogUGFnaW5hdGlvbikge1xuICAgIGNvbnNvbGUubG9nKFwic2Nyb2xsZWQ6LVwiLHBhZ2VJbmZvKVxuICAgIGxldCBhY3Rpb246IEFjdGlvbiA9IHtcbiAgICAgIHNvdXJjZUlkZW50aWZpZXI6IHRoaXMuc291cmNlSWRlbnRpZmllciA/IHRoaXMuc291cmNlSWRlbnRpZmllciA6IHRoaXMuX2xpc3RDb25maWcuaWRlbnRpZmllcixcbiAgICAgIHNvdXJjZUluZGV4OiB0aGlzLnNvdXJjZUluZGV4ID8gdGhpcy5zb3VyY2VJbmRleCA6IDAsXG4gICAgICB3aWRnZXRBcnJheUluZGV4OiB0aGlzLndpZGdldEFycmF5SW5kZXgsXG4gICAgICBhY3Rpb246IHRoaXMuX2xpc3RDb25maWcuaWRlbnRpZmllcixcbiAgICAgIGFjdGlvbkRhdGE6IHBhZ2VJbmZvLFxuICAgICAgZGF0YTogdGhpcy5yZWNvcmQsXG4gICAgICBvcmlnaW5hbERhdGE6IHRoaXMucmVjb3JkLFxuICAgICAgcGFyZW50SGllcmFyY2h5OiB0aGlzLnBhcmVudCxcbiAgICAgIGV2ZW50OiBwYWdlSW5mb1xuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhhY3Rpb24pO1xuICAgIHRoaXMub25QYWdlQ2hhbmdlLmVtaXQoYWN0aW9uKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICB9XG59XG4iXX0=