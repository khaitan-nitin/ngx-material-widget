import { BreakpointObserver, Breakpoints } from "@angular/cdk/layout";
import { ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild, } from "@angular/core";
export class NavigationComponent {
    constructor(breakpointObserver, ref) {
        this.breakpointObserver = breakpointObserver;
        this.ref = ref;
        this.isExpanded = true;
        this.logout = new EventEmitter();
        this.showSubmenu = [false];
        this.isShowing = false;
        this.showSubSubMenu = [[false, false], false];
    }
    ngAfterViewChecked() {
        //Called after every check of the component's view. Applies to components only.
        //Add 'implements AfterViewChecked' to the class.
        this.ref.detectChanges();
    }
    mouseenter() {
        if (!this.isExpanded) {
            this.isShowing = true;
        }
    }
    mouseleave() {
        if (!this.isExpanded) {
            this.isShowing = false;
        }
    }
    logoutEvent() {
        this.logout.emit();
    }
    ngOnInit() { }
    ngAfterViewInit() {
        //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
        //Add 'implements AfterViewInit' to the class.
        this.navigation = this.navigationPanel.navigations;
        this.isExpanded = (!this.navigationPanel.defaultCollapse);
        this.breakpointObserver
            .observe([Breakpoints.HandsetLandscape, Breakpoints.HandsetPortrait])
            .subscribe((result) => {
            if (result.matches) {
                this.isExpanded = false;
            }
        });
    }
}
NavigationComponent.decorators = [
    { type: Component, args: [{
                selector: "admin-navigation",
                template: "<mat-sidenav-container class=\"admin-container\" autosize>\n  <mat-sidenav\n    #sidenav\n    class=\"admin-sidenav\"\n    [fixedInViewport]=\"'true'\"\n    [ngClass]=\"{\n      'side-width': isExpanded || isShowing,\n      'mobile-side-remove': !isExpanded,\n      'collaps-width': !isExpanded && !isShowing\n    }\"\n    mode=\"side\"\n    opened=\"true\"\n    (mouseenter)=\"mouseenter()\"\n    (mouseleave)=\"mouseleave()\"\n  >\n    <span class=\"flex-layout\">\n      <mat-nav-list>\n        <header *ngIf=\"navigationPanel?.header\">\n          <H3\n            *ngIf=\"navigationPanel?.header?.logo?.name; else image\"\n            align=\"center\"\n            >{{ navigationPanel?.header?.logo?.name }}</H3\n          >\n          <ng-template #image>\n            <div class=\"flex-center\">\n              <img\n                [ngClass]=\"{ 'image-icon': !(isExpanded || isShowing) }\"\n                [src]=\"navigationPanel?.header?.logo?.image\"\n                class=\"header-image\"\n              />\n            </div>\n          </ng-template>\n        </header>\n        <div *ngFor=\"let data of navigation; let i = index\">\n          <!-- <mat-list-item (click)=\"showSubmenu[0] = !showSubmenu[0]\" class=\"parent\">\n          <span class=\"full-width\" *ngIf=\"isExpanded || isShowing\">{{data.name}}</span>\n          <mat-icon mat-list-icon>{{data.icon}}</mat-icon>\n          <mat-icon class=\"menu-button\" [ngClass]=\"{'rotated' : showSubmenu[0]}\" *ngIf=\"isExpanded || isShowing\">\n            expand_more</mat-icon>\n        </mat-list-item> -->\n          <ng-container\n            *ngTemplateOutlet=\"mainmenu; context: { menu: data, index: i }\"\n          ></ng-container>\n        </div>\n      </mat-nav-list>\n\n      <footer *ngIf=\"navigationPanel.footer\">\n        <mat-nav-list>\n          <mat-list-item\n            *ngIf=\"navigationPanel.footer.logout\"\n            (click)=\"logoutEvent()\"\n          >\n            <ng-container\n              *ngIf=\"\n                navigationPanel.footer?.template.content as tmpl;\n                else footertemplate\n              \"\n            >\n              <ng-container\n                cfTemplate\n                [cfTemplate]=\"\n                  '<style>' +\n                  navigationPanel.footer?.template?.css +\n                  '</style>' +\n                  tmpl\n                \"\n              >\n              </ng-container>\n            </ng-container>\n          </mat-list-item>\n        </mat-nav-list>\n      </footer>\n    </span>\n  </mat-sidenav>\n\n  <ng-content></ng-content>\n</mat-sidenav-container>\n\n<ng-template #submenu let-menu=\"menu\" let-j=\"mainindex\" let-s=\"subindex\">\n  <div\n    class=\"submenu\"\n    [ngClass]=\"{ expanded: s >= 0 ? showSubSubMenu[j][s] : showSubmenu[j] }\"\n    *ngIf=\"isShowing || isExpanded\"\n  >\n    <div *ngFor=\"let item of menu; let m = index\">\n      <div *ngIf=\"item?.children; else nochild\">\n        <mat-list-item\n          (click)=\"showSubSubMenu[j][m] = !showSubSubMenu[j][m]\"\n          class=\"parent\"\n        >\n          <span class=\"full-width\" *ngIf=\"isExpanded || isShowing\">\n            <span *ngIf=\"item.name; else submenuImage\">{{ item.name }}</span>\n            <span\n              [matBadge]=\"item?.subText?.text\"\n              *ngIf=\"item?.subText?.displayType == 'BADGE'\"\n              matBadgeOverlap=\"false\"\n            ></span>\n            <span\n              *ngIf=\"item?.subText?.displayType == 'PLAIN_TEXT'\"\n              class=\"sub-text\"\n              >{{ item?.subText?.text }}</span\n            >\n          </span>\n          <mat-icon *ngIf=\"item.icon; else subimageIcon\" mat-list-icon>{{\n            item.icon\n          }}</mat-icon>\n          <mat-icon\n            class=\"menu-button\"\n            [ngClass]=\"{ rotated: showSubSubMenu[j][m] }\"\n            *ngIf=\"isExpanded || isShowing\"\n          >\n            expand_more</mat-icon\n          >\n        </mat-list-item>\n        <span *ngIf=\"showSubSubMenu[j][m]\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              submenu;\n              context: { menu: item.children, mainindex: j, subindex: m }\n            \"\n          >\n          </ng-container>\n        </span>\n      </div>\n      <ng-template #nochild>\n        <mat-list-item [routerLink]=\"[item?.route]\" routerLinkActive=\"active\">\n          <span *ngIf=\"item.name; else submenuImage\">{{ item.name }}</span>\n          <span\n            [matBadge]=\"item?.subText?.text\"\n            *ngIf=\"item?.subText?.displayType == 'BADGE'\"\n            matBadgeOverlap=\"false\"\n          ></span>\n          <span\n            *ngIf=\"item?.subText?.displayType == 'PLAIN_TEXT'\"\n            class=\"sub-text\"\n            >{{ item?.subText?.text }}</span\n          >\n          <mat-icon *ngIf=\"item.icon; else subimageIcon\" mat-list-icon>\n            {{ item.icon }}</mat-icon\n          >\n        </mat-list-item>\n      </ng-template>\n      <mat-divider *ngIf=\"item?.divider\"></mat-divider>\n\n      <ng-template #subimageIcon>\n        <img [src]=\"item.image\" class=\"image-icon\" />\n      </ng-template>\n\n      <ng-template #submenuImage>\n        <img [src]=\"item.nameAsImage\" class=\"image-name\" />\n      </ng-template>\n    </div>\n    <!-- <mat-list-item>SubSubmenu Item 2</mat-list-item> -->\n  </div>\n</ng-template>\n\n<ng-template #mainmenu let-menu=\"menu\" let-i=\"index\">\n  <div *ngIf=\"menu.children; else nochild\">\n    <mat-list-item (click)=\"showSubmenu[i] = !showSubmenu[i]\" class=\"parent\">\n      <span class=\"full-width\" *ngIf=\"isExpanded || isShowing\">\n        <span *ngIf=\"menu.name; else menuImage\">{{ menu.name }}</span>\n        <span\n          [matBadge]=\"menu?.subText?.text\"\n          *ngIf=\"menu?.subText?.displayType == 'BADGE'\"\n          matBadgeOverlap=\"false\"\n        ></span>\n\n        <span\n          *ngIf=\"menu?.subText?.displayType == 'PLAIN_TEXT'\"\n          class=\"sub-text\"\n          >{{ menu?.subText?.text }}</span\n        >\n      </span>\n      <mat-icon *ngIf=\"menu.icon; else imageIcon\" mat-list-icon\n        >{{ menu.icon }}\n      </mat-icon>\n\n      <mat-icon\n        class=\"menu-button\"\n        [ngClass]=\"{ rotated: showSubmenu[i] }\"\n        *ngIf=\"isExpanded || isShowing\"\n      >\n        expand_more\n      </mat-icon>\n    </mat-list-item>\n    <span *ngIf=\"showSubmenu[i]\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          submenu;\n          context: { menu: menu.children, mainindex: i }\n        \"\n      ></ng-container>\n    </span>\n  </div>\n  <ng-template #nochild>\n    <mat-list-item\n      class=\"parent\"\n      [routerLink]=\"[menu?.route]\"\n      routerLinkActive=\"active\"\n      ><span class=\"full-width\" *ngIf=\"isExpanded || isShowing\">\n        <span *ngIf=\"menu.name; else menuImage\">{{ menu.name }}</span></span\n      >\n      <mat-icon *ngIf=\"menu.icon; else imageIcon\" mat-list-icon>\n        {{ menu.icon }}</mat-icon\n      >\n    </mat-list-item>\n  </ng-template>\n  <mat-divider *ngIf=\"menu?.divider\"></mat-divider>\n  <ng-template #imageIcon>\n    <img [src]=\"menu.image\" class=\"image-icon\" />\n  </ng-template>\n\n  <ng-template #menuImage>\n    <img [src]=\"menu.nameAsImage\" class=\"image-name\" />\n  </ng-template>\n</ng-template>\n\n<ng-template #footertemplate>\n  <mat-icon mat-list-icon>power_settings_new</mat-icon>\n  <span *ngIf=\"isExpanded || isShowing\">Logout</span>\n</ng-template>\n\n<button\n  mat-mini-fab\n  color=\"primary\"\n  [ngClass]=\"{ minimize: !isExpanded && !isShowing }\"\n  (click)=\"isExpanded = !isExpanded\"\n  class=\"menu-side-button\"\n  aria-label=\"Menu collapse\"\n\n  *ngIf=\"navigationPanel.canCollapse\"\n>\n  <mat-icon> keyboard_arrow_left</mat-icon>\n</button>\n",
                styles: [".admin-sidenav-content{align-items:center;display:flex;height:100%;justify-content:center}.admin-sidenav{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none}.full-width{align-items:center;display:flex;padding-left:10px;width:100%}.menu-button{transform:rotate(0deg);transition:.3s ease-in-out}.menu-button.rotated{transform:rotate(180deg)}.submenu{overflow-y:hidden;padding-left:30px;transform:scaleY(0);transform-origin:top;transition:transform .3s ease}.submenu.expanded{transform:scaleY(1)}.side-width{width:250px}.collaps-width{width:65px}.menu-side-button{background:#fff;color:#000;left:238px;position:fixed;top:55px;z-index:9}@media (max-width:599px){.menu-side-button{display:none}}.menu-side-button.minimize{left:52px;transform:rotate(180deg)}@media (max-width:599px){.mobile-side-remove{display:none}}mat-sidenav-container{min-height:88vh}.image-icon{width:32px}.image-name{width:92px;z-index:-1}.sub-text{background:#673ab7;border-radius:5px;color:#fff;margin:5px;padding:5px}.mat-badge-medium.mat-badge-above .mat-badge-content{top:-18px}.flex-beetween{align-content:space-between}.flex-beetween,.flex-layout{display:flex;flex-direction:column}.flex-layout{height:100%;justify-content:space-between}.flex-layout .flex-center{display:flex;flex-direction:row;justify-content:center}.flex-layout .flex-center .header-image{max-width:64px}.mat-drawer-inner-container{overflow:hidden!important}"]
            },] }
];
NavigationComponent.ctorParameters = () => [
    { type: BreakpointObserver },
    { type: ChangeDetectorRef }
];
NavigationComponent.propDecorators = {
    sidenav: [{ type: ViewChild, args: ["sidenav",] }],
    isExpanded: [{ type: Input }],
    navigationPanel: [{ type: Input }],
    navigation: [{ type: Input }],
    logout: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25pdGlua2hhaXRhbi9OaXRpbi9zdHVkeS9hbmd1bGFyL21hdGVyaWFsL2FkbWluLWJ1aWxkZXItcGx1Z2luL3Byb2plY3RzL25neC1tYXRlcmlhbC13aWRnZXQvc3JjLyIsInNvdXJjZXMiOlsibGliL25hdmlnYXRpb24vY29tcG9uZW50L25hdmlnYXRpb24vbmF2aWdhdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RFLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUNOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQVN2QixNQUFNLE9BQU8sbUJBQW1CO0lBVTlCLFlBQ1Msa0JBQXNDLEVBQ3JDLEdBQXNCO1FBRHZCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDckMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFWdkIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUdqQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUMzQyxnQkFBVyxHQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsbUJBQWMsR0FBZSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBS2xELENBQUM7SUFFSixrQkFBa0I7UUFDaEIsK0VBQStFO1FBQy9FLGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLEtBQUksQ0FBQztJQUViLGVBQWU7UUFDYiw2R0FBNkc7UUFDN0csOENBQThDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUM7UUFDbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsa0JBQWtCO2FBQ3BCLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDcEUsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDcEIsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQzthQUN6QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBeERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixzdlBBQTBDOzthQUUzQzs7O1lBakJRLGtCQUFrQjtZQUV6QixpQkFBaUI7OztzQkFpQmhCLFNBQVMsU0FBQyxTQUFTO3lCQUNuQixLQUFLOzhCQUNMLEtBQUs7eUJBQ0wsS0FBSztxQkFDTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlYWtwb2ludE9ic2VydmVyLCBCcmVha3BvaW50cyB9IGZyb20gXCJAYW5ndWxhci9jZGsvbGF5b3V0XCI7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWF0U2lkZW5hdiB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9zaWRlbmF2XCI7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uLCBOYXZpZ2F0aW9uUGFubmVsIH0gZnJvbSBcIi4uLy4uL21vZGVsXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJhZG1pbi1uYXZpZ2F0aW9uXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vbmF2aWdhdGlvbi5jb21wb25lbnQuaHRtbFwiLFxuICBzdHlsZVVybHM6IFtcIi4vbmF2aWdhdGlvbi5jb21wb25lbnQuc2Nzc1wiXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF2aWdhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoXCJzaWRlbmF2XCIpIHNpZGVuYXY6IE1hdFNpZGVuYXY7XG4gIEBJbnB1dCgpIGlzRXhwYW5kZWQgPSB0cnVlO1xuICBASW5wdXQoKSBuYXZpZ2F0aW9uUGFuZWw6IE5hdmlnYXRpb25QYW5uZWw7XG4gIEBJbnB1dCgpIG5hdmlnYXRpb246IEFycmF5PE5hdmlnYXRpb24+O1xuICBAT3V0cHV0KCkgbG9nb3V0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHNob3dTdWJtZW51OiBBcnJheTxib29sZWFuPiA9IFtmYWxzZV07XG4gIGlzU2hvd2luZyA9IGZhbHNlO1xuICBzaG93U3ViU3ViTWVudTogQXJyYXk8YW55PiA9IFtbZmFsc2UsIGZhbHNlXSwgZmFsc2VdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBicmVha3BvaW50T2JzZXJ2ZXI6IEJyZWFrcG9pbnRPYnNlcnZlcixcbiAgICBwcml2YXRlIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkIHtcbiAgICAvL0NhbGxlZCBhZnRlciBldmVyeSBjaGVjayBvZiB0aGUgY29tcG9uZW50J3Mgdmlldy4gQXBwbGllcyB0byBjb21wb25lbnRzIG9ubHkuXG4gICAgLy9BZGQgJ2ltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCcgdG8gdGhlIGNsYXNzLlxuICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG1vdXNlZW50ZXIoKSB7XG4gICAgaWYgKCF0aGlzLmlzRXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuaXNTaG93aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBtb3VzZWxlYXZlKCkge1xuICAgIGlmICghdGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICB0aGlzLmlzU2hvd2luZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGxvZ291dEV2ZW50KCkge1xuICAgIHRoaXMubG9nb3V0LmVtaXQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgLy9DYWxsZWQgYWZ0ZXIgbmdBZnRlckNvbnRlbnRJbml0IHdoZW4gdGhlIGNvbXBvbmVudCdzIHZpZXcgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuIEFwcGxpZXMgdG8gY29tcG9uZW50cyBvbmx5LlxuICAgIC8vQWRkICdpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQnIHRvIHRoZSBjbGFzcy5cbiAgICB0aGlzLm5hdmlnYXRpb24gPSB0aGlzLm5hdmlnYXRpb25QYW5lbC5uYXZpZ2F0aW9ucztcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSAoIXRoaXMubmF2aWdhdGlvblBhbmVsLmRlZmF1bHRDb2xsYXBzZSk7XG4gICAgdGhpcy5icmVha3BvaW50T2JzZXJ2ZXJcbiAgICAgIC5vYnNlcnZlKFtCcmVha3BvaW50cy5IYW5kc2V0TGFuZHNjYXBlLCBCcmVha3BvaW50cy5IYW5kc2V0UG9ydHJhaXRdKVxuICAgICAgLnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQubWF0Y2hlcykge1xuICAgICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxufVxuIl19