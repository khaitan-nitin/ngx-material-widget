import { Component } from '@angular/core';
import { CollectionUtils, SecurityUtils, CrudUtils } from '../../../utility';
//extends ModalInterfaceComponent
export class CrudListComponentInterface {
    constructor() {
        this.keyMap = new Array();
        // super();
    }
    ngOnInit() {
        this.setCommonConfig();
        this.setListConfig();
    }
    setCommonConfig() {
    }
    setListConfig() {
    }
    setBadges() {
        return null;
    }
    setCommonConfigUsingCrud(crud) {
        //  Config
        this.identifier = crud.identifier;
        this.header = crud.header;
        //  Tab wise data/setting
        //this.keyMap = {};
        this.listReset = true;
    }
    setListConfigUsingCrud(crud) {
        //  Config
        this.quickLinks = crud.quickLinks;
        this.searchConfig = crud.search;
        this.listConfig = crud.list;
        this.actions = crud.actions;
        this.setConfigListData([], []);
    }
    loadFilterParams(filterStr) {
        if (filterStr != null) {
            const filter = SecurityUtils.decrypt(filterStr);
            this.configListData.searchData = filter;
        }
        else {
        }
        this.configListData.pageNo = 1;
    }
    setConfigListData(records, badges, route) {
        let configListDataNew = {
            pageBackRoute: route,
            badges: badges,
            records: records,
            originalData: this.originalData
        };
        this.configListData = Object.assign(Object.assign({}, this.configListData), configListDataNew);
    }
    getRowKey(lIndex) {
        let keys;
        if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex]) {
            keys = this.listConfig.lists[lIndex].uniqueKeys;
        }
        else {
            keys = new Array();
        }
        return keys;
    }
    getChildRowKey(lIndex) {
        let keys;
        if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child && this.listConfig.lists[lIndex].child.record && this.listConfig.lists[lIndex].child.record.uniqueKeys) {
            keys = this.listConfig.lists[lIndex].child.record.uniqueKeys;
        }
        else {
            keys = new Array();
        }
        return keys;
    }
    getChildRecordIdentifier(lIndex) {
        let childRecordIdentifier;
        if (this.listConfig && this.listConfig.lists && this.listConfig.lists[lIndex] && this.listConfig.lists[lIndex].child) {
            childRecordIdentifier = this.listConfig.lists[lIndex].child.recordIdentifier;
        }
        else {
            childRecordIdentifier = "";
        }
        return childRecordIdentifier;
    }
    beforeChangeMerge(action, sourceIdentifier) {
        let rows;
        let rowIndex = -1;
        if (this.configListData && this.configListData.records) {
            for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {
                if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {
                    for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {
                        let keys = this.getRowKey(lIndex);
                        let isMatchingRow = true;
                        for (let key of keys) {
                            if (this.configListData.records[lIndex].rows[rIndex][key] != action.originalData[key]) {
                                isMatchingRow = false;
                            }
                        }
                        if (isMatchingRow) {
                            this.configListData.records[lIndex].rows[rIndex] = Object.assign(Object.assign({}, action.originalData), action.data);
                            rows = this.configListData.records[lIndex].rows;
                            rowIndex = rIndex;
                            break;
                        }
                    }
                }
            }
        }
        return { rows: rows, rowIndex: rowIndex };
    }
    addRow(action, sourceIdentifier, data) {
        let rows;
        let rowIndex = -1;
        if (this.configListData && this.configListData.records) {
            for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {
                if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {
                    if (CollectionUtils.isEmpty(data)) {
                        this.configListData.records[lIndex].rows.push({});
                    }
                    else {
                        this.configListData.records[lIndex].rows.push(data);
                    }
                    rows = this.configListData.records[lIndex].rows;
                    rowIndex = this.configListData.records[lIndex].rows.length - 1;
                    break;
                }
            }
        }
        return { rows: rows, rowIndex: rowIndex };
    }
    afterChangeMerge() {
        this.configListData = JSON.parse(JSON.stringify(this.configListData));
        this.listReset = true;
    }
    beforeChildChangeMerge(action, sourceIdentifier) {
        let rows;
        let rowIndex = -1;
        if (this.configListData && this.configListData.records) {
            for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {
                if (this.listConfig.lists[lIndex].identifier == sourceIdentifier) {
                    for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {
                        let keys = this.getRowKey(lIndex);
                        let isMatchingRow = true;
                        for (let key of keys) {
                            if (action.parentHierarchy.parent['key'].indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {
                                isMatchingRow = false;
                            }
                        }
                        if (isMatchingRow) {
                            let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);
                            for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {
                                let keys = this.getChildRowKey(lIndex);
                                let isChildMatchingRow = true;
                                for (let key of keys) {
                                    if (this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex][key] != action.originalData[key]) {
                                        isChildMatchingRow = false;
                                    }
                                }
                                if (isChildMatchingRow) {
                                    this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier][cIndex] = Object.assign(Object.assign({}, action.originalData), action.data);
                                    rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];
                                    rowIndex = cIndex;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        return { rows: rows, rowIndex: rowIndex };
    }
    addChildRow(action, sourceIdentifier, data) {
        let rows;
        let rowIndex = -1;
        if (this.configListData && this.configListData.records) {
            for (let lIndex = 0; lIndex < this.configListData.records.length; lIndex++) {
                if (this.listConfig.lists[lIndex].identifier == action.sourceIdentifier) {
                    for (let rIndex = 0; rIndex < this.configListData.records[lIndex].rows.length; rIndex++) {
                        let keys = this.getRowKey(lIndex);
                        let isMatchingRow = true;
                        for (let key of keys) {
                            if (action.originalData[key].indexOf(this.configListData.records[lIndex].rows[rIndex][key]) < -1) {
                                isMatchingRow = false;
                            }
                        }
                        if (isMatchingRow) {
                            let childRecordIdentifier = this.getChildRecordIdentifier(lIndex);
                            for (let cIndex = 0; cIndex < this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].length; cIndex++) {
                                if (CollectionUtils.isEmpty(data)) {
                                    this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push({});
                                }
                                else {
                                    this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier].push(data);
                                }
                                rows = this.configListData.records[lIndex].rows[rIndex][childRecordIdentifier];
                                rowIndex = cIndex;
                                break;
                            }
                        }
                    }
                }
            }
        }
        return { rows: rows, rowIndex: rowIndex };
    }
    setTabDisplayMode(crudTabs, formDisplayMode) {
        CrudUtils.setDisplayType(crudTabs, formDisplayMode);
    }
    afterChildChangeMerge() {
        this.afterChangeMerge();
    }
    setHeaderTitle(title) {
        this.header.title = title;
    }
    setHeaderDescription(description) {
        this.header.description.text = description;
    }
}
CrudListComponentInterface.decorators = [
    { type: Component, args: [{
                selector: 'mx-crud-list-interface',
                template: "<p>crud-list works!</p>\n",
                styles: [""]
            },] }
];
CrudListComponentInterface.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,